
myprojeck1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acb4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800ae58  0800ae58  0000be58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b320  0800b320  0001a5cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b320  0800b320  0000c320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b328  0800b328  0001a5cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b328  0800b328  0000c328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b32c  0800b32c  0000c32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000d5cc  20000000  0800b330  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  2000d5cc  080188fc  0001a5cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000da18  080188fc  0001aa18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a5cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa07  00000000  00000000  0001a5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002693  00000000  00000000  0002a003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0002c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c60  00000000  00000000  0002d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019562  00000000  00000000  0002e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012826  00000000  00000000  00047862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0de4  00000000  00000000  0005a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fae6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005868  00000000  00000000  000faeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00100718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000d5cc 	.word	0x2000d5cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae3c 	.word	0x0800ae3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000d5d0 	.word	0x2000d5d0
 80001dc:	0800ae3c 	.word	0x0800ae3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Write_Cmd_Data>:

//===============================================================
//write parameter

void  Write_Cmd_Data (unsigned char CMDP)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
    LCD_CS_0;
 8000ffe:	2200      	movs	r2, #0
 8001000:	2101      	movs	r1, #1
 8001002:	480b      	ldr	r0, [pc, #44]	@ (8001030 <Write_Cmd_Data+0x3c>)
 8001004:	f003 fa3a 	bl	800447c <HAL_GPIO_WritePin>
   	LCD_DC_1;
 8001008:	2201      	movs	r2, #1
 800100a:	2104      	movs	r1, #4
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <Write_Cmd_Data+0x3c>)
 800100e:	f003 fa35 	bl	800447c <HAL_GPIO_WritePin>

   	SPI_Write(&CMDP, 1);
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f888 	bl	800112c <SPI_Write>

   	LCD_CS_1;
 800101c:	2201      	movs	r2, #1
 800101e:	2101      	movs	r1, #1
 8001020:	4803      	ldr	r0, [pc, #12]	@ (8001030 <Write_Cmd_Data+0x3c>)
 8001022:	f003 fa2b 	bl	800447c <HAL_GPIO_WritePin>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020400 	.word	0x40020400

08001034 <Write_Cmd>:

//=============================================================
//write command

void Write_Cmd(unsigned char CMD)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    LCD_CS_0;
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	480b      	ldr	r0, [pc, #44]	@ (8001070 <Write_Cmd+0x3c>)
 8001044:	f003 fa1a 	bl	800447c <HAL_GPIO_WritePin>
   	LCD_DC_0;
 8001048:	2200      	movs	r2, #0
 800104a:	2104      	movs	r1, #4
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <Write_Cmd+0x3c>)
 800104e:	f003 fa15 	bl	800447c <HAL_GPIO_WritePin>

   	SPI_Write(&CMD, 1);
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f868 	bl	800112c <SPI_Write>

   	LCD_CS_1;
 800105c:	2201      	movs	r2, #1
 800105e:	2101      	movs	r1, #1
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <Write_Cmd+0x3c>)
 8001062:	f003 fa0b 	bl	800447c <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020400 	.word	0x40020400

08001074 <Write_Data_U16>:

//==============================================================
//write  data word

void  Write_Data_U16(unsigned int y)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	unsigned char m,n;
	m=y>>8;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	73fb      	strb	r3, [r7, #15]
	n=y;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	73bb      	strb	r3, [r7, #14]
	Write_Data(m,n);
 8001086:	7bba      	ldrb	r2, [r7, #14]
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f805 	bl	800109c <Write_Data>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <Write_Data>:

//===================================================================
//write data byte

void Write_Data(unsigned char DH,unsigned char DL)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
    LCD_CS_0;
 80010ac:	2200      	movs	r2, #0
 80010ae:	2101      	movs	r1, #1
 80010b0:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <Write_Data+0x4c>)
 80010b2:	f003 f9e3 	bl	800447c <HAL_GPIO_WritePin>
   	LCD_DC_1;
 80010b6:	2201      	movs	r2, #1
 80010b8:	2104      	movs	r1, #4
 80010ba:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <Write_Data+0x4c>)
 80010bc:	f003 f9de 	bl	800447c <HAL_GPIO_WritePin>

   	SPI_Write(&DH, 1);
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	2101      	movs	r1, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f831 	bl	800112c <SPI_Write>
   	SPI_Write(&DL, 1);
 80010ca:	1dbb      	adds	r3, r7, #6
 80010cc:	2101      	movs	r1, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f82c 	bl	800112c <SPI_Write>

   	LCD_CS_1;
 80010d4:	2201      	movs	r2, #1
 80010d6:	2101      	movs	r1, #1
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <Write_Data+0x4c>)
 80010da:	f003 f9cf 	bl	800447c <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40020400 	.word	0x40020400

080010ec <Write_Bytes>:


void Write_Bytes(unsigned char * pbuff, unsigned short size)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
    LCD_CS_0;
 80010f8:	2200      	movs	r2, #0
 80010fa:	2101      	movs	r1, #1
 80010fc:	480a      	ldr	r0, [pc, #40]	@ (8001128 <Write_Bytes+0x3c>)
 80010fe:	f003 f9bd 	bl	800447c <HAL_GPIO_WritePin>
   	LCD_DC_1;
 8001102:	2201      	movs	r2, #1
 8001104:	2104      	movs	r1, #4
 8001106:	4808      	ldr	r0, [pc, #32]	@ (8001128 <Write_Bytes+0x3c>)
 8001108:	f003 f9b8 	bl	800447c <HAL_GPIO_WritePin>

   	SPI_Write(pbuff, size);
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f80b 	bl	800112c <SPI_Write>

   	LCD_CS_1;
 8001116:	2201      	movs	r2, #1
 8001118:	2101      	movs	r1, #1
 800111a:	4803      	ldr	r0, [pc, #12]	@ (8001128 <Write_Bytes+0x3c>)
 800111c:	f003 f9ae 	bl	800447c <HAL_GPIO_WritePin>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020400 	.word	0x40020400

0800112c <SPI_Write>:


HAL_StatusTypeDef SPI_Write(uint8_t* pbuff, uint16_t size)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
	//DMA, use HAL_SPI_Transmit_DMA() function
    HAL_StatusTypeDef status =  HAL_SPI_Transmit_DMA(&hspi1, pbuff, size);
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	461a      	mov	r2, r3
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4808      	ldr	r0, [pc, #32]	@ (8001160 <SPI_Write+0x34>)
 8001140:	f004 fa5e 	bl	8005600 <HAL_SPI_Transmit_DMA>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){;}
 8001148:	bf00      	nop
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <SPI_Write+0x34>)
 800114c:	f004 fb28 	bl	80057a0 <HAL_SPI_GetState>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d1f9      	bne.n	800114a <SPI_Write+0x1e>
    return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]

    //no DMA, use HAL_SPI_Transmit() function
    //return HAL_SPI_Transmit(&hspi1, pbuff, size, 100);
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000d650 	.word	0x2000d650

08001164 <GC9A01_Initial>:

//=============================================================
//LCD Initial

void GC9A01_Initial(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  	LCD_CS_1;
 8001168:	2201      	movs	r2, #1
 800116a:	2101      	movs	r1, #1
 800116c:	48fc      	ldr	r0, [pc, #1008]	@ (8001560 <GC9A01_Initial+0x3fc>)
 800116e:	f003 f985 	bl	800447c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001172:	2005      	movs	r0, #5
 8001174:	f001 ff92 	bl	800309c <HAL_Delay>
	LCD_RST_0;
 8001178:	2200      	movs	r2, #0
 800117a:	2102      	movs	r1, #2
 800117c:	48f8      	ldr	r0, [pc, #992]	@ (8001560 <GC9A01_Initial+0x3fc>)
 800117e:	f003 f97d 	bl	800447c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001182:	200a      	movs	r0, #10
 8001184:	f001 ff8a 	bl	800309c <HAL_Delay>
	LCD_RST_1;
 8001188:	2201      	movs	r2, #1
 800118a:	2102      	movs	r1, #2
 800118c:	48f4      	ldr	r0, [pc, #976]	@ (8001560 <GC9A01_Initial+0x3fc>)
 800118e:	f003 f975 	bl	800447c <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8001192:	2078      	movs	r0, #120	@ 0x78
 8001194:	f001 ff82 	bl	800309c <HAL_Delay>


 //************* Start Initial Sequence **********//
	Write_Cmd(0xEF);
 8001198:	20ef      	movs	r0, #239	@ 0xef
 800119a:	f7ff ff4b 	bl	8001034 <Write_Cmd>

	Write_Cmd(0xEB);
 800119e:	20eb      	movs	r0, #235	@ 0xeb
 80011a0:	f7ff ff48 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x14);
 80011a4:	2014      	movs	r0, #20
 80011a6:	f7ff ff25 	bl	8000ff4 <Write_Cmd_Data>

    Write_Cmd(0xFE);
 80011aa:	20fe      	movs	r0, #254	@ 0xfe
 80011ac:	f7ff ff42 	bl	8001034 <Write_Cmd>
	Write_Cmd(0xEF);
 80011b0:	20ef      	movs	r0, #239	@ 0xef
 80011b2:	f7ff ff3f 	bl	8001034 <Write_Cmd>

	Write_Cmd(0xEB);
 80011b6:	20eb      	movs	r0, #235	@ 0xeb
 80011b8:	f7ff ff3c 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x14);
 80011bc:	2014      	movs	r0, #20
 80011be:	f7ff ff19 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x84);
 80011c2:	2084      	movs	r0, #132	@ 0x84
 80011c4:	f7ff ff36 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x40);
 80011c8:	2040      	movs	r0, #64	@ 0x40
 80011ca:	f7ff ff13 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x85);
 80011ce:	2085      	movs	r0, #133	@ 0x85
 80011d0:	f7ff ff30 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 80011d4:	20ff      	movs	r0, #255	@ 0xff
 80011d6:	f7ff ff0d 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x86);
 80011da:	2086      	movs	r0, #134	@ 0x86
 80011dc:	f7ff ff2a 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 80011e0:	20ff      	movs	r0, #255	@ 0xff
 80011e2:	f7ff ff07 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x87);
 80011e6:	2087      	movs	r0, #135	@ 0x87
 80011e8:	f7ff ff24 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 80011ec:	20ff      	movs	r0, #255	@ 0xff
 80011ee:	f7ff ff01 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x88);
 80011f2:	2088      	movs	r0, #136	@ 0x88
 80011f4:	f7ff ff1e 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x0A);
 80011f8:	200a      	movs	r0, #10
 80011fa:	f7ff fefb 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x89);
 80011fe:	2089      	movs	r0, #137	@ 0x89
 8001200:	f7ff ff18 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x21);
 8001204:	2021      	movs	r0, #33	@ 0x21
 8001206:	f7ff fef5 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x8A);
 800120a:	208a      	movs	r0, #138	@ 0x8a
 800120c:	f7ff ff12 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x00);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff feef 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x8B);
 8001216:	208b      	movs	r0, #139	@ 0x8b
 8001218:	f7ff ff0c 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x80);
 800121c:	2080      	movs	r0, #128	@ 0x80
 800121e:	f7ff fee9 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x8C);
 8001222:	208c      	movs	r0, #140	@ 0x8c
 8001224:	f7ff ff06 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x01);
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff fee3 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x8D);
 800122e:	208d      	movs	r0, #141	@ 0x8d
 8001230:	f7ff ff00 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x01);
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff fedd 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x8E);
 800123a:	208e      	movs	r0, #142	@ 0x8e
 800123c:	f7ff fefa 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 8001240:	20ff      	movs	r0, #255	@ 0xff
 8001242:	f7ff fed7 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x8F);
 8001246:	208f      	movs	r0, #143	@ 0x8f
 8001248:	f7ff fef4 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 800124c:	20ff      	movs	r0, #255	@ 0xff
 800124e:	f7ff fed1 	bl	8000ff4 <Write_Cmd_Data>


	Write_Cmd(0xB6);
 8001252:	20b6      	movs	r0, #182	@ 0xb6
 8001254:	f7ff feee 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x00);
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fecb 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff fec8 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x36);
 8001264:	2036      	movs	r0, #54	@ 0x36
 8001266:	f7ff fee5 	bl	8001034 <Write_Cmd>

	if(USE_HORIZONTAL==0)Write_Cmd_Data(0x18);
	else if(USE_HORIZONTAL==1)Write_Cmd_Data(0x28);
	else if(USE_HORIZONTAL==2)Write_Cmd_Data(0x48);
 800126a:	2048      	movs	r0, #72	@ 0x48
 800126c:	f7ff fec2 	bl	8000ff4 <Write_Cmd_Data>
	else Write_Cmd_Data(0x88);



	Write_Cmd(0x3A);
 8001270:	203a      	movs	r0, #58	@ 0x3a
 8001272:	f7ff fedf 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x05);
 8001276:	2005      	movs	r0, #5
 8001278:	f7ff febc 	bl	8000ff4 <Write_Cmd_Data>


	Write_Cmd(0x90);
 800127c:	2090      	movs	r0, #144	@ 0x90
 800127e:	f7ff fed9 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x08);
 8001282:	2008      	movs	r0, #8
 8001284:	f7ff feb6 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 8001288:	2008      	movs	r0, #8
 800128a:	f7ff feb3 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 800128e:	2008      	movs	r0, #8
 8001290:	f7ff feb0 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 8001294:	2008      	movs	r0, #8
 8001296:	f7ff fead 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xBD);
 800129a:	20bd      	movs	r0, #189	@ 0xbd
 800129c:	f7ff feca 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x06);
 80012a0:	2006      	movs	r0, #6
 80012a2:	f7ff fea7 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xBC);
 80012a6:	20bc      	movs	r0, #188	@ 0xbc
 80012a8:	f7ff fec4 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x00);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fea1 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xFF);
 80012b2:	20ff      	movs	r0, #255	@ 0xff
 80012b4:	f7ff febe 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x60);
 80012b8:	2060      	movs	r0, #96	@ 0x60
 80012ba:	f7ff fe9b 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff fe98 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x04);
 80012c4:	2004      	movs	r0, #4
 80012c6:	f7ff fe95 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xC3);
 80012ca:	20c3      	movs	r0, #195	@ 0xc3
 80012cc:	f7ff feb2 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x13);
 80012d0:	2013      	movs	r0, #19
 80012d2:	f7ff fe8f 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd(0xC4);
 80012d6:	20c4      	movs	r0, #196	@ 0xc4
 80012d8:	f7ff feac 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x13);
 80012dc:	2013      	movs	r0, #19
 80012de:	f7ff fe89 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xC9);
 80012e2:	20c9      	movs	r0, #201	@ 0xc9
 80012e4:	f7ff fea6 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x22);
 80012e8:	2022      	movs	r0, #34	@ 0x22
 80012ea:	f7ff fe83 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xBE);
 80012ee:	20be      	movs	r0, #190	@ 0xbe
 80012f0:	f7ff fea0 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x11);
 80012f4:	2011      	movs	r0, #17
 80012f6:	f7ff fe7d 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xE1);
 80012fa:	20e1      	movs	r0, #225	@ 0xe1
 80012fc:	f7ff fe9a 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x10);
 8001300:	2010      	movs	r0, #16
 8001302:	f7ff fe77 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x0E);
 8001306:	200e      	movs	r0, #14
 8001308:	f7ff fe74 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xDF);
 800130c:	20df      	movs	r0, #223	@ 0xdf
 800130e:	f7ff fe91 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x21);
 8001312:	2021      	movs	r0, #33	@ 0x21
 8001314:	f7ff fe6e 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x0c);
 8001318:	200c      	movs	r0, #12
 800131a:	f7ff fe6b 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x02);
 800131e:	2002      	movs	r0, #2
 8001320:	f7ff fe68 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xF0);
 8001324:	20f0      	movs	r0, #240	@ 0xf0
 8001326:	f7ff fe85 	bl	8001034 <Write_Cmd>
    Write_Cmd_Data(0x45);
 800132a:	2045      	movs	r0, #69	@ 0x45
 800132c:	f7ff fe62 	bl	8000ff4 <Write_Cmd_Data>
    Write_Cmd_Data(0x09);
 8001330:	2009      	movs	r0, #9
 8001332:	f7ff fe5f 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 8001336:	2008      	movs	r0, #8
 8001338:	f7ff fe5c 	bl	8000ff4 <Write_Cmd_Data>
  	Write_Cmd_Data(0x08);
 800133c:	2008      	movs	r0, #8
 800133e:	f7ff fe59 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x26);
 8001342:	2026      	movs	r0, #38	@ 0x26
 8001344:	f7ff fe56 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x2A);
 8001348:	202a      	movs	r0, #42	@ 0x2a
 800134a:	f7ff fe53 	bl	8000ff4 <Write_Cmd_Data>

 	Write_Cmd(0xF1);
 800134e:	20f1      	movs	r0, #241	@ 0xf1
 8001350:	f7ff fe70 	bl	8001034 <Write_Cmd>
 	Write_Cmd_Data(0x43);
 8001354:	2043      	movs	r0, #67	@ 0x43
 8001356:	f7ff fe4d 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x70);
 800135a:	2070      	movs	r0, #112	@ 0x70
 800135c:	f7ff fe4a 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x72);
 8001360:	2072      	movs	r0, #114	@ 0x72
 8001362:	f7ff fe47 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x36);
 8001366:	2036      	movs	r0, #54	@ 0x36
 8001368:	f7ff fe44 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x37);
 800136c:	2037      	movs	r0, #55	@ 0x37
 800136e:	f7ff fe41 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x6F);
 8001372:	206f      	movs	r0, #111	@ 0x6f
 8001374:	f7ff fe3e 	bl	8000ff4 <Write_Cmd_Data>


 	Write_Cmd(0xF2);
 8001378:	20f2      	movs	r0, #242	@ 0xf2
 800137a:	f7ff fe5b 	bl	8001034 <Write_Cmd>
 	Write_Cmd_Data(0x45);
 800137e:	2045      	movs	r0, #69	@ 0x45
 8001380:	f7ff fe38 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x09);
 8001384:	2009      	movs	r0, #9
 8001386:	f7ff fe35 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 800138a:	2008      	movs	r0, #8
 800138c:	f7ff fe32 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 8001390:	2008      	movs	r0, #8
 8001392:	f7ff fe2f 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x26);
 8001396:	2026      	movs	r0, #38	@ 0x26
 8001398:	f7ff fe2c 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x2A);
 800139c:	202a      	movs	r0, #42	@ 0x2a
 800139e:	f7ff fe29 	bl	8000ff4 <Write_Cmd_Data>

 	Write_Cmd(0xF3);
 80013a2:	20f3      	movs	r0, #243	@ 0xf3
 80013a4:	f7ff fe46 	bl	8001034 <Write_Cmd>
 	Write_Cmd_Data(0x43);
 80013a8:	2043      	movs	r0, #67	@ 0x43
 80013aa:	f7ff fe23 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x70);
 80013ae:	2070      	movs	r0, #112	@ 0x70
 80013b0:	f7ff fe20 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x72);
 80013b4:	2072      	movs	r0, #114	@ 0x72
 80013b6:	f7ff fe1d 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x36);
 80013ba:	2036      	movs	r0, #54	@ 0x36
 80013bc:	f7ff fe1a 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x37);
 80013c0:	2037      	movs	r0, #55	@ 0x37
 80013c2:	f7ff fe17 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(0x6F);
 80013c6:	206f      	movs	r0, #111	@ 0x6f
 80013c8:	f7ff fe14 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xED);
 80013cc:	20ed      	movs	r0, #237	@ 0xed
 80013ce:	f7ff fe31 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x1B);
 80013d2:	201b      	movs	r0, #27
 80013d4:	f7ff fe0e 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x0B);
 80013d8:	200b      	movs	r0, #11
 80013da:	f7ff fe0b 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xAE);
 80013de:	20ae      	movs	r0, #174	@ 0xae
 80013e0:	f7ff fe28 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x77);
 80013e4:	2077      	movs	r0, #119	@ 0x77
 80013e6:	f7ff fe05 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xCD);
 80013ea:	20cd      	movs	r0, #205	@ 0xcd
 80013ec:	f7ff fe22 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x63);
 80013f0:	2063      	movs	r0, #99	@ 0x63
 80013f2:	f7ff fdff 	bl	8000ff4 <Write_Cmd_Data>


	Write_Cmd(0x70);
 80013f6:	2070      	movs	r0, #112	@ 0x70
 80013f8:	f7ff fe1c 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x07);
 80013fc:	2007      	movs	r0, #7
 80013fe:	f7ff fdf9 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8001402:	2007      	movs	r0, #7
 8001404:	f7ff fdf6 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x04);
 8001408:	2004      	movs	r0, #4
 800140a:	f7ff fdf3 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x0E);
 800140e:	200e      	movs	r0, #14
 8001410:	f7ff fdf0 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x0F);
 8001414:	200f      	movs	r0, #15
 8001416:	f7ff fded 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x09);
 800141a:	2009      	movs	r0, #9
 800141c:	f7ff fdea 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8001420:	2007      	movs	r0, #7
 8001422:	f7ff fde7 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 8001426:	2008      	movs	r0, #8
 8001428:	f7ff fde4 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x03);
 800142c:	2003      	movs	r0, #3
 800142e:	f7ff fde1 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0xE8);
 8001432:	20e8      	movs	r0, #232	@ 0xe8
 8001434:	f7ff fdfe 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x34);
 8001438:	2034      	movs	r0, #52	@ 0x34
 800143a:	f7ff fddb 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x62);
 800143e:	2062      	movs	r0, #98	@ 0x62
 8001440:	f7ff fdf8 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x18);
 8001444:	2018      	movs	r0, #24
 8001446:	f7ff fdd5 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x0D);
 800144a:	200d      	movs	r0, #13
 800144c:	f7ff fdd2 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 8001450:	2071      	movs	r0, #113	@ 0x71
 8001452:	f7ff fdcf 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0xED);
 8001456:	20ed      	movs	r0, #237	@ 0xed
 8001458:	f7ff fdcc 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 800145c:	2070      	movs	r0, #112	@ 0x70
 800145e:	f7ff fdc9 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8001462:	2070      	movs	r0, #112	@ 0x70
 8001464:	f7ff fdc6 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x18);
 8001468:	2018      	movs	r0, #24
 800146a:	f7ff fdc3 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x0F);
 800146e:	200f      	movs	r0, #15
 8001470:	f7ff fdc0 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 8001474:	2071      	movs	r0, #113	@ 0x71
 8001476:	f7ff fdbd 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0xEF);
 800147a:	20ef      	movs	r0, #239	@ 0xef
 800147c:	f7ff fdba 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8001480:	2070      	movs	r0, #112	@ 0x70
 8001482:	f7ff fdb7 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8001486:	2070      	movs	r0, #112	@ 0x70
 8001488:	f7ff fdb4 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x63);
 800148c:	2063      	movs	r0, #99	@ 0x63
 800148e:	f7ff fdd1 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x18);
 8001492:	2018      	movs	r0, #24
 8001494:	f7ff fdae 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x11);
 8001498:	2011      	movs	r0, #17
 800149a:	f7ff fdab 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 800149e:	2071      	movs	r0, #113	@ 0x71
 80014a0:	f7ff fda8 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 80014a4:	20f1      	movs	r0, #241	@ 0xf1
 80014a6:	f7ff fda5 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80014aa:	2070      	movs	r0, #112	@ 0x70
 80014ac:	f7ff fda2 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80014b0:	2070      	movs	r0, #112	@ 0x70
 80014b2:	f7ff fd9f 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x18);
 80014b6:	2018      	movs	r0, #24
 80014b8:	f7ff fd9c 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x13);
 80014bc:	2013      	movs	r0, #19
 80014be:	f7ff fd99 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 80014c2:	2071      	movs	r0, #113	@ 0x71
 80014c4:	f7ff fd96 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0xF3);
 80014c8:	20f3      	movs	r0, #243	@ 0xf3
 80014ca:	f7ff fd93 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80014ce:	2070      	movs	r0, #112	@ 0x70
 80014d0:	f7ff fd90 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80014d4:	2070      	movs	r0, #112	@ 0x70
 80014d6:	f7ff fd8d 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x64);
 80014da:	2064      	movs	r0, #100	@ 0x64
 80014dc:	f7ff fdaa 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x28);
 80014e0:	2028      	movs	r0, #40	@ 0x28
 80014e2:	f7ff fd87 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x29);
 80014e6:	2029      	movs	r0, #41	@ 0x29
 80014e8:	f7ff fd84 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 80014ec:	20f1      	movs	r0, #241	@ 0xf1
 80014ee:	f7ff fd81 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff fd7e 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 80014f8:	20f1      	movs	r0, #241	@ 0xf1
 80014fa:	f7ff fd7b 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fd78 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8001504:	2007      	movs	r0, #7
 8001506:	f7ff fd75 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x66);
 800150a:	2066      	movs	r0, #102	@ 0x66
 800150c:	f7ff fd92 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x3C);
 8001510:	203c      	movs	r0, #60	@ 0x3c
 8001512:	f7ff fd6f 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff fd6c 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0xCD);
 800151c:	20cd      	movs	r0, #205	@ 0xcd
 800151e:	f7ff fd69 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x67);
 8001522:	2067      	movs	r0, #103	@ 0x67
 8001524:	f7ff fd66 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x45);
 8001528:	2045      	movs	r0, #69	@ 0x45
 800152a:	f7ff fd63 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x45);
 800152e:	2045      	movs	r0, #69	@ 0x45
 8001530:	f7ff fd60 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x10);
 8001534:	2010      	movs	r0, #16
 8001536:	f7ff fd5d 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff fd5a 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fd57 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff fd54 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x67);
 800154c:	2067      	movs	r0, #103	@ 0x67
 800154e:	f7ff fd71 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x00);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fd4e 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x3C);
 8001558:	203c      	movs	r0, #60	@ 0x3c
 800155a:	f7ff fd4b 	bl	8000ff4 <Write_Cmd_Data>
 800155e:	e001      	b.n	8001564 <GC9A01_Initial+0x400>
 8001560:	40020400 	.word	0x40020400
	Write_Cmd_Data(0x00);
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff fd45 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fd42 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff fd3f 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff fd3c 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x54);
 800157c:	2054      	movs	r0, #84	@ 0x54
 800157e:	f7ff fd39 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x10);
 8001582:	2010      	movs	r0, #16
 8001584:	f7ff fd36 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x32);
 8001588:	2032      	movs	r0, #50	@ 0x32
 800158a:	f7ff fd33 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x98);
 800158e:	2098      	movs	r0, #152	@ 0x98
 8001590:	f7ff fd30 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x74);
 8001594:	2074      	movs	r0, #116	@ 0x74
 8001596:	f7ff fd4d 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x10);
 800159a:	2010      	movs	r0, #16
 800159c:	f7ff fd2a 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x85);
 80015a0:	2085      	movs	r0, #133	@ 0x85
 80015a2:	f7ff fd27 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x80);
 80015a6:	2080      	movs	r0, #128	@ 0x80
 80015a8:	f7ff fd24 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fd21 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fd1e 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x4E);
 80015b8:	204e      	movs	r0, #78	@ 0x4e
 80015ba:	f7ff fd1b 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff fd18 	bl	8000ff4 <Write_Cmd_Data>

    Write_Cmd(0x98);
 80015c4:	2098      	movs	r0, #152	@ 0x98
 80015c6:	f7ff fd35 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(0x3e);
 80015ca:	203e      	movs	r0, #62	@ 0x3e
 80015cc:	f7ff fd12 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 80015d0:	2007      	movs	r0, #7
 80015d2:	f7ff fd0f 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x35);
 80015d6:	2035      	movs	r0, #53	@ 0x35
 80015d8:	f7ff fd2c 	bl	8001034 <Write_Cmd>
	Write_Cmd(0x21);
 80015dc:	2021      	movs	r0, #33	@ 0x21
 80015de:	f7ff fd29 	bl	8001034 <Write_Cmd>

	Write_Cmd(0x11);
 80015e2:	2011      	movs	r0, #17
 80015e4:	f7ff fd26 	bl	8001034 <Write_Cmd>
	HAL_Delay(120);
 80015e8:	2078      	movs	r0, #120	@ 0x78
 80015ea:	f001 fd57 	bl	800309c <HAL_Delay>
	Write_Cmd(0x29);
 80015ee:	2029      	movs	r0, #41	@ 0x29
 80015f0:	f7ff fd20 	bl	8001034 <Write_Cmd>
	HAL_Delay(20);
 80015f4:	2014      	movs	r0, #20
 80015f6:	f001 fd51 	bl	800309c <HAL_Delay>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop

08001600 <ClearScreen2>:

//===============================================================
//clear screen2
//Use DMA，faster
void ClearScreen2(unsigned int bColor)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af02      	add	r7, sp, #8
 8001606:	6078      	str	r0, [r7, #4]
	ClearWindow(0,0,GC9A01_TFTWIDTH,GC9A01_TFTHEIGHT,bColor);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	23f0      	movs	r3, #240	@ 0xf0
 800160e:	22f0      	movs	r2, #240	@ 0xf0
 8001610:	2100      	movs	r1, #0
 8001612:	2000      	movs	r0, #0
 8001614:	f000 f804 	bl	8001620 <ClearWindow>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <ClearWindow>:

void ClearWindow(unsigned int startX, unsigned int startY, unsigned int endX, unsigned int endY, unsigned int bColor)
{
 8001620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001624:	b08f      	sub	sp, #60	@ 0x3c
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	466b      	mov	r3, sp
 8001632:	461e      	mov	r6, r3
 unsigned int i;

 //Exchange high 8bit and low 8bit of bColor for DMA batch transmit
 unsigned char hb = (bColor&0xFFFF) >> 8;
 8001634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001636:	0a1b      	lsrs	r3, r3, #8
 8001638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 unsigned char lb = bColor & 0xFF;
 800163c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800163e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 unsigned short tempColor = lb * 256 + hb;
 8001642:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001646:	b29b      	uxth	r3, r3
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b29a      	uxth	r2, r3
 800164c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001650:	b29b      	uxth	r3, r3
 8001652:	4413      	add	r3, r2
 8001654:	863b      	strh	r3, [r7, #48]	@ 0x30

 unsigned int totalSize = (endX-startX) * (endY - startY) * 2; // total clear window data size
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	6839      	ldr	r1, [r7, #0]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	1a8a      	subs	r2, r1, r2
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 unsigned int bufSize = 512;  // define bufSize, need less than DMA transmit size
 800166a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28

 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize; // transmit loop times
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001674:	fbb3 f2f2 	udiv	r2, r3, r2
 8001678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800167a:	fb01 f202 	mul.w	r2, r1, r2
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001682:	1ad2      	subs	r2, r2, r3
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
 unsigned int modNum = totalSize % bufSize;  // remainder data bytes
 800168c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800168e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001690:	fbb3 f2f2 	udiv	r2, r3, r2
 8001694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001696:	fb01 f202 	mul.w	r2, r1, r2
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	623b      	str	r3, [r7, #32]


 //use a tempBuf to initial bColor data, bufSize < DMA transmit size
 unsigned short tempBuf[bufSize];
 800169e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016a0:	460b      	mov	r3, r1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	2300      	movs	r3, #0
 80016a8:	4688      	mov	r8, r1
 80016aa:	4699      	mov	r9, r3
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80016b8:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80016bc:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80016c0:	2300      	movs	r3, #0
 80016c2:	460c      	mov	r4, r1
 80016c4:	461d      	mov	r5, r3
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	012b      	lsls	r3, r5, #4
 80016d0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80016d4:	0122      	lsls	r2, r4, #4
 80016d6:	004b      	lsls	r3, r1, #1
 80016d8:	3307      	adds	r3, #7
 80016da:	08db      	lsrs	r3, r3, #3
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	ebad 0d03 	sub.w	sp, sp, r3
 80016e2:	466b      	mov	r3, sp
 80016e4:	3301      	adds	r3, #1
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	61bb      	str	r3, [r7, #24]
 unsigned char * ptempBuf;

 //init tempBuf data to tempColor( Exchange high 8bit and low 8bit of bColor )
 for(i=0; i<bufSize; i++){
 80016ec:	2300      	movs	r3, #0
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80016f0:	e007      	b.n	8001702 <ClearWindow+0xe2>
	 tempBuf[i] = tempColor;
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016f6:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80016f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 for(i=0; i<bufSize; i++){
 80016fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fe:	3301      	adds	r3, #1
 8001700:	637b      	str	r3, [r7, #52]	@ 0x34
 8001702:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001706:	429a      	cmp	r2, r3
 8001708:	d3f3      	bcc.n	80016f2 <ClearWindow+0xd2>
 }

 // Clear window size: from (startX, startY) to (endX, endY)
 LCD_SetPos(startX,startY,endX-1,endY-1);// (endX-startX) * (endY - startY)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f81e 	bl	8001756 <LCD_SetPos>

 // transmit bufSize byte one time, loopNum loops
 ptempBuf = (unsigned char *)tempBuf;
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	617b      	str	r3, [r7, #20]
 for(i=0; i<loopNum; i++){
 800171e:	2300      	movs	r3, #0
 8001720:	637b      	str	r3, [r7, #52]	@ 0x34
 8001722:	e008      	b.n	8001736 <ClearWindow+0x116>
	 Write_Bytes(ptempBuf, bufSize);
 8001724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001726:	b29b      	uxth	r3, r3
 8001728:	4619      	mov	r1, r3
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff fcde 	bl	80010ec <Write_Bytes>
 for(i=0; i<loopNum; i++){
 8001730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001732:	3301      	adds	r3, #1
 8001734:	637b      	str	r3, [r7, #52]	@ 0x34
 8001736:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	429a      	cmp	r2, r3
 800173c:	d3f2      	bcc.n	8001724 <ClearWindow+0x104>
 }

 // transmit remainder data, modNum bytes
 Write_Bytes(ptempBuf, modNum);
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	b29b      	uxth	r3, r3
 8001742:	4619      	mov	r1, r3
 8001744:	6978      	ldr	r0, [r7, #20]
 8001746:	f7ff fcd1 	bl	80010ec <Write_Bytes>
 800174a:	46b5      	mov	sp, r6

}
 800174c:	bf00      	nop
 800174e:	373c      	adds	r7, #60	@ 0x3c
 8001750:	46bd      	mov	sp, r7
 8001752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001756 <LCD_SetPos>:


//===============================================================
 void LCD_SetPos(unsigned int Xstart,unsigned int Ystart,unsigned int Xend,unsigned int Yend)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	603b      	str	r3, [r7, #0]
	Write_Cmd(0x2a);
 8001764:	202a      	movs	r0, #42	@ 0x2a
 8001766:	f7ff fc65 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(Xstart>>8);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fc3f 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(Xstart);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fc3a 	bl	8000ff4 <Write_Cmd_Data>
 	Write_Cmd_Data(Xend>>8);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fc34 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(Xend);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc2f 	bl	8000ff4 <Write_Cmd_Data>

	Write_Cmd(0x2b);
 8001796:	202b      	movs	r0, #43	@ 0x2b
 8001798:	f7ff fc4c 	bl	8001034 <Write_Cmd>
	Write_Cmd_Data(Ystart>>8);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fc26 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(Ystart);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc21 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(Yend>>8);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fc1b 	bl	8000ff4 <Write_Cmd_Data>
	Write_Cmd_Data(Yend);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fc16 	bl	8000ff4 <Write_Cmd_Data>

  	Write_Cmd(0x2c);//LCD_WriteCMD(GRAMWR);
 80017c8:	202c      	movs	r0, #44	@ 0x2c
 80017ca:	f7ff fc33 	bl	8001034 <Write_Cmd>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <showzifu>:


 //show one Character
 void showzifu(unsigned int x,unsigned int y,unsigned char value,unsigned int dcolor,unsigned int bgcolor)
 {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	4613      	mov	r3, r2
 80017e6:	71fb      	strb	r3, [r7, #7]
 	unsigned char i,j;
 	unsigned char *temp=String6_12;
 80017e8:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <showzifu+0xac>)
 80017ea:	613b      	str	r3, [r7, #16]

    LCD_SetPos(x,y,x+7,y+11);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1dda      	adds	r2, r3, #7
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	330b      	adds	r3, #11
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff ffad 	bl	8001756 <LCD_SetPos>
 	temp+=(value-32)*12;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f1a3 0220 	sub.w	r2, r3, #32
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	461a      	mov	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4413      	add	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
 	for(j=0;j<12;j++)
 8001812:	2300      	movs	r3, #0
 8001814:	75bb      	strb	r3, [r7, #22]
 8001816:	e02d      	b.n	8001874 <showzifu+0x9c>
 	{
 		for(i=0;i<8;i++)
 8001818:	2300      	movs	r3, #0
 800181a:	75fb      	strb	r3, [r7, #23]
 800181c:	e021      	b.n	8001862 <showzifu+0x8a>
 		{
 		 	if((*temp&(1<<(7-i)))!=0)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	fa42 f303 	asr.w	r3, r2, r3
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <showzifu+0x72>
 			{
 				Write_Data(dcolor>>8,dcolor);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	b2db      	uxtb	r3, r3
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fc2a 	bl	800109c <Write_Data>
 8001848:	e008      	b.n	800185c <showzifu+0x84>
 			}
 			else
 			{
 				Write_Data(bgcolor>>8,bgcolor);
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	b2db      	uxtb	r3, r3
 8001850:	6a3a      	ldr	r2, [r7, #32]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fc20 	bl	800109c <Write_Data>
 		for(i=0;i<8;i++)
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	3301      	adds	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b07      	cmp	r3, #7
 8001866:	d9da      	bls.n	800181e <showzifu+0x46>
 			}
 		}
 		temp++;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	3301      	adds	r3, #1
 800186c:	613b      	str	r3, [r7, #16]
 	for(j=0;j<12;j++)
 800186e:	7dbb      	ldrb	r3, [r7, #22]
 8001870:	3301      	adds	r3, #1
 8001872:	75bb      	strb	r3, [r7, #22]
 8001874:	7dbb      	ldrb	r3, [r7, #22]
 8001876:	2b0b      	cmp	r3, #11
 8001878:	d9ce      	bls.n	8001818 <showzifu+0x40>
 	 }
 }
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000000 	.word	0x20000000

08001888 <showzifustr>:

 //show String
 void showzifustr(unsigned int x,unsigned int y,unsigned char *str,unsigned int dcolor,unsigned int bgcolor)
 {
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
 	unsigned int x1,y1;
 	x1=x;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	617b      	str	r3, [r7, #20]
 	y1=y;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	613b      	str	r3, [r7, #16]
 	while(*str!='\0')
 800189e:	e00e      	b.n	80018be <showzifustr+0x36>
 	{
 		showzifu(x1,y1,*str,dcolor,bgcolor);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6939      	ldr	r1, [r7, #16]
 80018ac:	6978      	ldr	r0, [r7, #20]
 80018ae:	f7ff ff93 	bl	80017d8 <showzifu>
 		x1+=7;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3307      	adds	r3, #7
 80018b6:	617b      	str	r3, [r7, #20]
 		str++;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
 	while(*str!='\0')
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ec      	bne.n	80018a0 <showzifustr+0x18>
 	}
 }
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <LCD_DrawPoint>:


 void LCD_DrawPoint(unsigned int x,unsigned int y,unsigned int color)
 {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 	LCD_SetPos(x,y,x,y);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff ff37 	bl	8001756 <LCD_SetPos>
 	Write_Data_U16(color);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fbc3 	bl	8001074 <Write_Data_U16>
 }
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <LCD_DrawLine>:


 void LCD_DrawLine(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned int color)
 {
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b08e      	sub	sp, #56	@ 0x38
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	603b      	str	r3, [r7, #0]
 	unsigned int t;
 	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001904:	2300      	movs	r3, #0
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 	int incx,incy,uRow,uCol;
 	delta_x=x2-x1;
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
 	delta_y=y2-y1;
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
 	uRow=x1;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	617b      	str	r3, [r7, #20]
 	uCol=y1;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	613b      	str	r3, [r7, #16]
 	if(delta_x>0)incx=1;
 8001924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001926:	2b00      	cmp	r3, #0
 8001928:	dd02      	ble.n	8001930 <LCD_DrawLine+0x3a>
 800192a:	2301      	movs	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e00b      	b.n	8001948 <LCD_DrawLine+0x52>
 	else if (delta_x==0)incx=0;
 8001930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <LCD_DrawLine+0x46>
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	e005      	b.n	8001948 <LCD_DrawLine+0x52>
 	else {incx=-1;delta_x=-delta_x;}
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001944:	425b      	negs	r3, r3
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
 	if(delta_y>0)incy=1;
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	2b00      	cmp	r3, #0
 800194c:	dd02      	ble.n	8001954 <LCD_DrawLine+0x5e>
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	e00b      	b.n	800196c <LCD_DrawLine+0x76>
 	else if (delta_y==0)incy=0;
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <LCD_DrawLine+0x6a>
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	e005      	b.n	800196c <LCD_DrawLine+0x76>
 	else {incy=-1;delta_y=-delta_x;}
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001968:	425b      	negs	r3, r3
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
 	if(delta_x>delta_y)distance=delta_x;
 800196c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	429a      	cmp	r2, r3
 8001972:	dd02      	ble.n	800197a <LCD_DrawLine+0x84>
 8001974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	e001      	b.n	800197e <LCD_DrawLine+0x88>
 	else distance=delta_y;
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	623b      	str	r3, [r7, #32]
 	for(t=0;t<distance+1;t++)
 800197e:	2300      	movs	r3, #0
 8001980:	637b      	str	r3, [r7, #52]	@ 0x34
 8001982:	e028      	b.n	80019d6 <LCD_DrawLine+0xe0>
 	{
 		LCD_DrawPoint(uRow,uCol,color);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	6939      	ldr	r1, [r7, #16]
 8001988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ffa0 	bl	80018d0 <LCD_DrawPoint>
 		xerr+=delta_x;
 8001990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001994:	4413      	add	r3, r2
 8001996:	633b      	str	r3, [r7, #48]	@ 0x30
 		yerr+=delta_y;
 8001998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	4413      	add	r3, r2
 800199e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 		if(xerr>distance)
 80019a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dd07      	ble.n	80019b8 <LCD_DrawLine+0xc2>
 		{
 			xerr-=distance;
 80019a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
 			uRow+=incx;
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
 		}
 		if(yerr>distance)
 80019b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dd07      	ble.n	80019d0 <LCD_DrawLine+0xda>
 		{
 			yerr-=distance;
 80019c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 			uCol+=incy;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4413      	add	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
 	for(t=0;t<distance+1;t++)
 80019d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d2:	3301      	adds	r3, #1
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	3301      	adds	r3, #1
 80019da:	461a      	mov	r2, r3
 80019dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019de:	4293      	cmp	r3, r2
 80019e0:	d3d0      	bcc.n	8001984 <LCD_DrawLine+0x8e>
 		}
 	}
 }
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3738      	adds	r7, #56	@ 0x38
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <LCD_DrawRectangle>:


 void LCD_DrawRectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2,unsigned int color)
 {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
 	LCD_DrawLine(x1,y1,x2,y1,color);
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7ff ff76 	bl	80018f6 <LCD_DrawLine>
 	LCD_DrawLine(x1,y1,x1,y2,color);
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f7ff ff6e 	bl	80018f6 <LCD_DrawLine>
 	LCD_DrawLine(x1,y2,x2,y2,color);
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f7ff ff66 	bl	80018f6 <LCD_DrawLine>
 	LCD_DrawLine(x2,y1,x2,y2,color);
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff5e 	bl	80018f6 <LCD_DrawLine>
 }
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <show_picture2a>:
 }


 //use DMA batch transmit, faster
 void show_picture2a(uint16_t x,uint16_t y,uint16_t b,uint16_t h)
 {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b089      	sub	sp, #36	@ 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	80fb      	strh	r3, [r7, #6]
 8001a56:	4603      	mov	r3, r0
 8001a58:	80bb      	strh	r3, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	807b      	strh	r3, [r7, #2]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	803b      	strh	r3, [r7, #0]
	 int i;
	 unsigned char * pPic;
	 unsigned int totalSize = 208*60*2;
 8001a62:	f44f 43c3 	mov.w	r3, #24960	@ 0x6180
 8001a66:	61bb      	str	r3, [r7, #24]
	 unsigned int bufSize = 512; //bufSize, need less than DMA transmit data size
 8001a68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a6c:	617b      	str	r3, [r7, #20]

 	 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a76:	6979      	ldr	r1, [r7, #20]
 8001a78:	fb01 f202 	mul.w	r2, r1, r2
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	1ad2      	subs	r2, r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	613b      	str	r3, [r7, #16]
 	 unsigned int modNum = totalSize % bufSize;
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a92:	6979      	ldr	r1, [r7, #20]
 8001a94:	fb01 f202 	mul.w	r2, r1, r2
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]


    LCD_SetPos(x,y,(x+b)-1,(y+h)-1);
 8001a9c:	88f8      	ldrh	r0, [r7, #6]
 8001a9e:	88b9      	ldrh	r1, [r7, #4]
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	461c      	mov	r4, r3
 8001aaa:	88ba      	ldrh	r2, [r7, #4]
 8001aac:	883b      	ldrh	r3, [r7, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	f7ff fe4f 	bl	8001756 <LCD_SetPos>

    //Exchange high 8bit and low 8bit of every point, for picture DMA transmit

    pPic = (unsigned char *)pic1;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <show_picture2a+0xc8>)
 8001aba:	60bb      	str	r3, [r7, #8]

    //transmit bufSize bytes of picture data , loop loopNum times
    for(i=0; i<loopNum; i++){
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	e00e      	b.n	8001ae0 <show_picture2a+0x9c>
    	Write_Bytes(pPic+i*bufSize, bufSize);
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	fb02 f303 	mul.w	r3, r2, r3
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	4413      	add	r3, r2
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fb09 	bl	80010ec <Write_Bytes>
    for(i=0; i<loopNum; i++){
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8ec      	bhi.n	8001ac2 <show_picture2a+0x7e>
    }
    //transmit remainder data of picture
    Write_Bytes(pPic+i*bufSize, modNum);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	4413      	add	r3, r2
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	b292      	uxth	r2, r2
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff faf6 	bl	80010ec <Write_Bytes>

    //Exchange high 8bit and low 8bit of every point, recover picture data
    inversPicData1a();
 8001b00:	f000 f8d2 	bl	8001ca8 <inversPicData1a>

    return;
 8001b04:	bf00      	nop
 }
 8001b06:	3724      	adds	r7, #36	@ 0x24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd90      	pop	{r4, r7, pc}
 8001b0c:	20000474 	.word	0x20000474

08001b10 <show_picture2b>:
 void show_picture2b(uint16_t x,uint16_t y,uint16_t b,uint16_t h)
 {
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4604      	mov	r4, r0
 8001b18:	4608      	mov	r0, r1
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4623      	mov	r3, r4
 8001b20:	80fb      	strh	r3, [r7, #6]
 8001b22:	4603      	mov	r3, r0
 8001b24:	80bb      	strh	r3, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	807b      	strh	r3, [r7, #2]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	803b      	strh	r3, [r7, #0]
	 int i;
	 unsigned char * pPic;
	 unsigned int totalSize = 208*60*2;
 8001b2e:	f44f 43c3 	mov.w	r3, #24960	@ 0x6180
 8001b32:	61bb      	str	r3, [r7, #24]
	 unsigned int bufSize = 512; //bufSize, need less than DMA transmit data size
 8001b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b38:	617b      	str	r3, [r7, #20]

 	 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize;
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b42:	6979      	ldr	r1, [r7, #20]
 8001b44:	fb01 f202 	mul.w	r2, r1, r2
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	1ad2      	subs	r2, r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	613b      	str	r3, [r7, #16]
 	 unsigned int modNum = totalSize % bufSize;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b5e:	6979      	ldr	r1, [r7, #20]
 8001b60:	fb01 f202 	mul.w	r2, r1, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]


    LCD_SetPos(x,y,(x+b)-1,(y+h)-1);
 8001b68:	88f8      	ldrh	r0, [r7, #6]
 8001b6a:	88b9      	ldrh	r1, [r7, #4]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	4413      	add	r3, r2
 8001b72:	3b01      	subs	r3, #1
 8001b74:	461c      	mov	r4, r3
 8001b76:	88ba      	ldrh	r2, [r7, #4]
 8001b78:	883b      	ldrh	r3, [r7, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	4622      	mov	r2, r4
 8001b80:	f7ff fde9 	bl	8001756 <LCD_SetPos>

    //Exchange high 8bit and low 8bit of every point, for picture DMA transmit

    pPic = (unsigned char *)pic2;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <show_picture2b+0xc8>)
 8001b86:	60bb      	str	r3, [r7, #8]

    //transmit bufSize bytes of picture data , loop loopNum times
    for(i=0; i<loopNum; i++){
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	e00e      	b.n	8001bac <show_picture2b+0x9c>
    	Write_Bytes(pPic+i*bufSize, bufSize);
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff faa3 	bl	80010ec <Write_Bytes>
    for(i=0; i<loopNum; i++){
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8ec      	bhi.n	8001b8e <show_picture2b+0x7e>
    }
    //transmit remainder data of picture
    Write_Bytes(pPic+i*bufSize, modNum);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fa90 	bl	80010ec <Write_Bytes>

    //Exchange high 8bit and low 8bit of every point, recover picture data
    inversPicData1b();
 8001bcc:	f000 f89a 	bl	8001d04 <inversPicData1b>

    return;
 8001bd0:	bf00      	nop
 }
 8001bd2:	3724      	adds	r7, #36	@ 0x24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	200065f4 	.word	0x200065f4

08001bdc <show_picture2c>:
 void show_picture2c(uint16_t x,uint16_t y,uint16_t b,uint16_t h)
 {
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4604      	mov	r4, r0
 8001be4:	4608      	mov	r0, r1
 8001be6:	4611      	mov	r1, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4623      	mov	r3, r4
 8001bec:	80fb      	strh	r3, [r7, #6]
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80bb      	strh	r3, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	807b      	strh	r3, [r7, #2]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	803b      	strh	r3, [r7, #0]
	 int i;
	 unsigned char * pPic;
	 unsigned int totalSize = 40*40*2;
 8001bfa:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8001bfe:	61bb      	str	r3, [r7, #24]
	 unsigned int bufSize = 512; //bufSize, need less than DMA transmit data size
 8001c00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c04:	617b      	str	r3, [r7, #20]

 	 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize;
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c0e:	6979      	ldr	r1, [r7, #20]
 8001c10:	fb01 f202 	mul.w	r2, r1, r2
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	1ad2      	subs	r2, r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	613b      	str	r3, [r7, #16]
 	 unsigned int modNum = totalSize % bufSize;
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c2a:	6979      	ldr	r1, [r7, #20]
 8001c2c:	fb01 f202 	mul.w	r2, r1, r2
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]


    LCD_SetPos(x,y,(x+b)-1,(y+h)-1);
 8001c34:	88f8      	ldrh	r0, [r7, #6]
 8001c36:	88b9      	ldrh	r1, [r7, #4]
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	461c      	mov	r4, r3
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	883b      	ldrh	r3, [r7, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	f7ff fd83 	bl	8001756 <LCD_SetPos>

    //Exchange high 8bit and low 8bit of every point, for picture DMA transmit

    pPic = (unsigned char *)pic3;
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <show_picture2c+0xc8>)
 8001c52:	60bb      	str	r3, [r7, #8]

    //transmit bufSize bytes of picture data , loop loopNum times
    for(i=0; i<loopNum; i++){
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	e00e      	b.n	8001c78 <show_picture2c+0x9c>
    	Write_Bytes(pPic+i*bufSize, bufSize);
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4413      	add	r3, r2
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fa3d 	bl	80010ec <Write_Bytes>
    for(i=0; i<loopNum; i++){
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d8ec      	bhi.n	8001c5a <show_picture2c+0x7e>
    }
    //transmit remainder data of picture
    Write_Bytes(pPic+i*bufSize, modNum);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fa2a 	bl	80010ec <Write_Bytes>

    //Exchange high 8bit and low 8bit of every point, recover picture data
    inversPicData1c();
 8001c98:	f000 f862 	bl	8001d60 <inversPicData1c>

    return;
 8001c9c:	bf00      	nop
 }
 8001c9e:	3724      	adds	r7, #36	@ 0x24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd90      	pop	{r4, r7, pc}
 8001ca4:	2000c774 	.word	0x2000c774

08001ca8 <inversPicData1a>:
//      return;
//   }


// Exchange high 8bit and low 8bit of picture data, for DMA transmit
 void inversPicData1a(void){
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 	int i;
 	unsigned char hb, lb;

 	for(i=0; i<208*60; i++){  			//160*120 is the size of picture
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	e01a      	b.n	8001cea <inversPicData1a+0x42>
 			hb = pic1[i] >> 8;  			//high 8 bit
 8001cb4:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <inversPicData1a+0x58>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	70fb      	strb	r3, [r7, #3]
 			lb = pic1[i] & 0xFF; 		//low 8 bit
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <inversPicData1a+0x58>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cca:	70bb      	strb	r3, [r7, #2]
 			pic1[i] = lb * 256 + hb; 	//exchange high 8 bit and low 8 bit
 8001ccc:	78bb      	ldrb	r3, [r7, #2]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	b299      	uxth	r1, r3
 8001cdc:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <inversPicData1a+0x58>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 	for(i=0; i<208*60; i++){  			//160*120 is the size of picture
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f5b3 5f43 	cmp.w	r3, #12480	@ 0x30c0
 8001cf0:	dbe0      	blt.n	8001cb4 <inversPicData1a+0xc>
 	}
 }
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	20000474 	.word	0x20000474

08001d04 <inversPicData1b>:
 void inversPicData1b(void){
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 	int i;
 	unsigned char hb, lb;

 	for(i=0; i<208*60; i++){  			//160*120 is the size of picture
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	e01a      	b.n	8001d46 <inversPicData1b+0x42>
 			hb = pic2[i] >> 8;  			//high 8 bit
 8001d10:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <inversPicData1b+0x58>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	70fb      	strb	r3, [r7, #3]
 			lb = pic2[i] & 0xFF; 		//low 8 bit
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d5c <inversPicData1b+0x58>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d26:	70bb      	strb	r3, [r7, #2]
 			pic2[i] = lb * 256 + hb; 	//exchange high 8 bit and low 8 bit
 8001d28:	78bb      	ldrb	r3, [r7, #2]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	b299      	uxth	r1, r3
 8001d38:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <inversPicData1b+0x58>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 	for(i=0; i<208*60; i++){  			//160*120 is the size of picture
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3301      	adds	r3, #1
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f5b3 5f43 	cmp.w	r3, #12480	@ 0x30c0
 8001d4c:	dbe0      	blt.n	8001d10 <inversPicData1b+0xc>
 	}
 }
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	200065f4 	.word	0x200065f4

08001d60 <inversPicData1c>:
 void inversPicData1c(void){
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 	int i;
 	unsigned char hb, lb;

 	for(i=0; i<40*40; i++){  			//160*120 is the size of picture
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e01a      	b.n	8001da2 <inversPicData1c+0x42>
 			hb = pic3[i] >> 8;  			//high 8 bit
 8001d6c:	4a12      	ldr	r2, [pc, #72]	@ (8001db8 <inversPicData1c+0x58>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	70fb      	strb	r3, [r7, #3]
 			lb = pic3[i] & 0xFF; 		//low 8 bit
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <inversPicData1c+0x58>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d82:	70bb      	strb	r3, [r7, #2]
 			pic3[i] = lb * 256 + hb; 	//exchange high 8 bit and low 8 bit
 8001d84:	78bb      	ldrb	r3, [r7, #2]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	b299      	uxth	r1, r3
 8001d94:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <inversPicData1c+0x58>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 	for(i=0; i<40*40; i++){  			//160*120 is the size of picture
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001da8:	dbe0      	blt.n	8001d6c <inversPicData1c+0xc>
 	}
 }
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	2000c774 	.word	0x2000c774
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc6:	f001 f8f7 	bl	8002fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dca:	f000 fa97 	bl	80022fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC1_Init();
 8001dce:	f000 fb01 	bl	80023d4 <MX_ADC1_Init>
  MX_GPIO_Init();
 8001dd2:	f000 fd2f 	bl	8002834 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd6:	f000 fcfd 	bl	80027d4 <MX_DMA_Init>
  MX_SPI1_Init();
 8001dda:	f000 fbd9 	bl	8002590 <MX_SPI1_Init>
  MX_RTC_Init();
 8001dde:	f000 fb7d 	bl	80024dc <MX_RTC_Init>
  MX_TIM4_Init();
 8001de2:	f000 fcab 	bl	800273c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001de6:	f000 fc09 	bl	80025fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  GC9A01_Initial();
 8001dea:	f7ff f9bb 	bl	8001164 <GC9A01_Initial>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ClearScreen2(WHITE);
 8001dee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001df2:	f7ff fc05 	bl	8001600 <ClearScreen2>
  show_picture2a(16,0,208,60);
 8001df6:	233c      	movs	r3, #60	@ 0x3c
 8001df8:	22d0      	movs	r2, #208	@ 0xd0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2010      	movs	r0, #16
 8001dfe:	f7ff fe21 	bl	8001a44 <show_picture2a>
  show_picture2b(16,180,208,60);
 8001e02:	233c      	movs	r3, #60	@ 0x3c
 8001e04:	22d0      	movs	r2, #208	@ 0xd0
 8001e06:	21b4      	movs	r1, #180	@ 0xb4
 8001e08:	2010      	movs	r0, #16
 8001e0a:	f7ff fe81 	bl	8001b10 <show_picture2b>
  show_picture2a(16,0,208,60);
 8001e0e:	233c      	movs	r3, #60	@ 0x3c
 8001e10:	22d0      	movs	r2, #208	@ 0xd0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2010      	movs	r0, #16
 8001e16:	f7ff fe15 	bl	8001a44 <show_picture2a>
  show_picture2b(16,180,208,60);
 8001e1a:	233c      	movs	r3, #60	@ 0x3c
 8001e1c:	22d0      	movs	r2, #208	@ 0xd0
 8001e1e:	21b4      	movs	r1, #180	@ 0xb4
 8001e20:	2010      	movs	r0, #16
 8001e22:	f7ff fe75 	bl	8001b10 <show_picture2b>
  show_picture2c(20,60,40,40);
 8001e26:	2328      	movs	r3, #40	@ 0x28
 8001e28:	2228      	movs	r2, #40	@ 0x28
 8001e2a:	213c      	movs	r1, #60	@ 0x3c
 8001e2c:	2014      	movs	r0, #20
 8001e2e:	f7ff fed5 	bl	8001bdc <show_picture2c>
  show_picture2c(20,60,40,40);
 8001e32:	2328      	movs	r3, #40	@ 0x28
 8001e34:	2228      	movs	r2, #40	@ 0x28
 8001e36:	213c      	movs	r1, #60	@ 0x3c
 8001e38:	2014      	movs	r0, #20
 8001e3a:	f7ff fecf 	bl	8001bdc <show_picture2c>
  showzifustr(60, 73, "NHOM 5", BLACK, WHITE);
 8001e3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2300      	movs	r3, #0
 8001e46:	4aa8      	ldr	r2, [pc, #672]	@ (80020e8 <main+0x328>)
 8001e48:	2149      	movs	r1, #73	@ 0x49
 8001e4a:	203c      	movs	r0, #60	@ 0x3c
 8001e4c:	f7ff fd1c 	bl	8001888 <showzifustr>
  LCD_DrawLine(60, 88, 100, 82, RED);
 8001e50:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2352      	movs	r3, #82	@ 0x52
 8001e58:	2264      	movs	r2, #100	@ 0x64
 8001e5a:	2158      	movs	r1, #88	@ 0x58
 8001e5c:	203c      	movs	r0, #60	@ 0x3c
 8001e5e:	f7ff fd4a 	bl	80018f6 <LCD_DrawLine>
  for(int i = 130; i<210; i++){
 8001e62:	2382      	movs	r3, #130	@ 0x82
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	e00b      	b.n	8001e80 <main+0xc0>
	  LCD_DrawLine(i, 82, i, 170, CBLUE);
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	f249 63be 	movw	r3, #38590	@ 0x96be
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	23aa      	movs	r3, #170	@ 0xaa
 8001e74:	2152      	movs	r1, #82	@ 0x52
 8001e76:	f7ff fd3e 	bl	80018f6 <LCD_DrawLine>
  for(int i = 130; i<210; i++){
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2bd1      	cmp	r3, #209	@ 0xd1
 8001e84:	ddf0      	ble.n	8001e68 <main+0xa8>
  }


  showzifustr(142, 90, "Human", BLACK, CPINK);
 8001e86:	f24f 639f 	movw	r3, #63135	@ 0xf69f
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	4a97      	ldr	r2, [pc, #604]	@ (80020ec <main+0x32c>)
 8001e90:	215a      	movs	r1, #90	@ 0x5a
 8001e92:	208e      	movs	r0, #142	@ 0x8e
 8001e94:	f7ff fcf8 	bl	8001888 <showzifustr>
  showzifustr(140, 100,"Indoor?", BLACK, CPINK);
 8001e98:	f24f 639f 	movw	r3, #63135	@ 0xf69f
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	4a93      	ldr	r2, [pc, #588]	@ (80020f0 <main+0x330>)
 8001ea2:	2164      	movs	r1, #100	@ 0x64
 8001ea4:	208c      	movs	r0, #140	@ 0x8c
 8001ea6:	f7ff fcef 	bl	8001888 <showzifustr>

  LCD_DrawRectangle(20, 100, 127 ,170, GREEN);
 8001eaa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	23aa      	movs	r3, #170	@ 0xaa
 8001eb2:	227f      	movs	r2, #127	@ 0x7f
 8001eb4:	2164      	movs	r1, #100	@ 0x64
 8001eb6:	2014      	movs	r0, #20
 8001eb8:	f7ff fd98 	bl	80019ec <LCD_DrawRectangle>
	showzifustr(22, 105, "Date:", BLACK, WHITE);
 8001ebc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	4a8b      	ldr	r2, [pc, #556]	@ (80020f4 <main+0x334>)
 8001ec6:	2169      	movs	r1, #105	@ 0x69
 8001ec8:	2016      	movs	r0, #22
 8001eca:	f7ff fcdd 	bl	8001888 <showzifustr>
	showzifustr(22, 120, "Time:", BLACK, WHITE);
 8001ece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4a88      	ldr	r2, [pc, #544]	@ (80020f8 <main+0x338>)
 8001ed8:	2178      	movs	r1, #120	@ 0x78
 8001eda:	2016      	movs	r0, #22
 8001edc:	f7ff fcd4 	bl	8001888 <showzifustr>
    showzifustr(22, 135, "Onto:", BLACK, WHITE);
 8001ee0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	4a84      	ldr	r2, [pc, #528]	@ (80020fc <main+0x33c>)
 8001eea:	2187      	movs	r1, #135	@ 0x87
 8001eec:	2016      	movs	r0, #22
 8001eee:	f7ff fccb 	bl	8001888 <showzifustr>
	showzifustr(22, 150, "LastOff:", BLACK, WHITE);
 8001ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	4a81      	ldr	r2, [pc, #516]	@ (8002100 <main+0x340>)
 8001efc:	2196      	movs	r1, #150	@ 0x96
 8001efe:	2016      	movs	r0, #22
 8001f00:	f7ff fcc2 	bl	8001888 <showzifustr>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001f04:	2200      	movs	r2, #0
 8001f06:	497f      	ldr	r1, [pc, #508]	@ (8002104 <main+0x344>)
 8001f08:	487f      	ldr	r0, [pc, #508]	@ (8002108 <main+0x348>)
 8001f0a:	f003 f900 	bl	800510e <HAL_RTC_GetTime>
	nextFiveMinutes = sTime.Minutes + 0b0010;
 8001f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8002104 <main+0x344>)
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	3302      	adds	r3, #2
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4b7d      	ldr	r3, [pc, #500]	@ (800210c <main+0x34c>)
 8001f18:	701a      	strb	r2, [r3, #0]
	TIM1->CCR3 = 0;
 8001f1a:	4b7d      	ldr	r3, [pc, #500]	@ (8002110 <main+0x350>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    while (1)
    {

     	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001f20:	2200      	movs	r2, #0
 8001f22:	4978      	ldr	r1, [pc, #480]	@ (8002104 <main+0x344>)
 8001f24:	4878      	ldr	r0, [pc, #480]	@ (8002108 <main+0x348>)
 8001f26:	f003 f8f2 	bl	800510e <HAL_RTC_GetTime>
    	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4979      	ldr	r1, [pc, #484]	@ (8002114 <main+0x354>)
 8001f2e:	4876      	ldr	r0, [pc, #472]	@ (8002108 <main+0x348>)
 8001f30:	f003 f9cf 	bl	80052d2 <HAL_RTC_GetDate>
    	  sprintf(date, "%02d/%02d/20%02d",sDate.Date,sDate.Month,sDate.Year);
 8001f34:	4b77      	ldr	r3, [pc, #476]	@ (8002114 <main+0x354>)
 8001f36:	789b      	ldrb	r3, [r3, #2]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b76      	ldr	r3, [pc, #472]	@ (8002114 <main+0x354>)
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4b74      	ldr	r3, [pc, #464]	@ (8002114 <main+0x354>)
 8001f42:	78db      	ldrb	r3, [r3, #3]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	460b      	mov	r3, r1
 8001f48:	4973      	ldr	r1, [pc, #460]	@ (8002118 <main+0x358>)
 8001f4a:	4874      	ldr	r0, [pc, #464]	@ (800211c <main+0x35c>)
 8001f4c:	f005 fb3c 	bl	80075c8 <siprintf>
    	  showzifustr(55, 105, date, BLACK, WHITE);
 8001f50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	4a70      	ldr	r2, [pc, #448]	@ (800211c <main+0x35c>)
 8001f5a:	2169      	movs	r1, #105	@ 0x69
 8001f5c:	2037      	movs	r0, #55	@ 0x37
 8001f5e:	f7ff fc93 	bl	8001888 <showzifustr>
    	  sprintf(time, "%02dh%02d'",sTime.Hours,sTime.Minutes);
 8001f62:	4b68      	ldr	r3, [pc, #416]	@ (8002104 <main+0x344>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b66      	ldr	r3, [pc, #408]	@ (8002104 <main+0x344>)
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	496c      	ldr	r1, [pc, #432]	@ (8002120 <main+0x360>)
 8001f6e:	486d      	ldr	r0, [pc, #436]	@ (8002124 <main+0x364>)
 8001f70:	f005 fb2a 	bl	80075c8 <siprintf>
    	  showzifustr(55, 120, time, BLACK, WHITE);
 8001f74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	4a69      	ldr	r2, [pc, #420]	@ (8002124 <main+0x364>)
 8001f7e:	2178      	movs	r1, #120	@ 0x78
 8001f80:	2037      	movs	r0, #55	@ 0x37
 8001f82:	f7ff fc81 	bl	8001888 <showzifustr>
    	  distance1 = distance;
 8001f86:	4b68      	ldr	r3, [pc, #416]	@ (8002128 <main+0x368>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a68      	ldr	r2, [pc, #416]	@ (800212c <main+0x36c>)
 8001f8c:	6013      	str	r3, [r2, #0]

    	  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f94:	4866      	ldr	r0, [pc, #408]	@ (8002130 <main+0x370>)
 8001f96:	f002 fa71 	bl	800447c <HAL_GPIO_WritePin>
    	  usDelay(3);
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	f000 fa6c 	bl	8002478 <usDelay>
    	  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fa6:	4862      	ldr	r0, [pc, #392]	@ (8002130 <main+0x370>)
 8001fa8:	f002 fa68 	bl	800447c <HAL_GPIO_WritePin>
    	  usDelay(10);
 8001fac:	200a      	movs	r0, #10
 8001fae:	f000 fa63 	bl	8002478 <usDelay>
    	  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb8:	485d      	ldr	r0, [pc, #372]	@ (8002130 <main+0x370>)
 8001fba:	f002 fa5f 	bl	800447c <HAL_GPIO_WritePin>
    	  while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin)==GPIO_PIN_RESET);
 8001fbe:	bf00      	nop
 8001fc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fc4:	485a      	ldr	r0, [pc, #360]	@ (8002130 <main+0x370>)
 8001fc6:	f002 fa41 	bl	800444c <HAL_GPIO_ReadPin>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f7      	beq.n	8001fc0 <main+0x200>
    	  numTicks = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
    	  while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin)==GPIO_PIN_SET)
 8001fd4:	e005      	b.n	8001fe2 <main+0x222>
    	  {
    		numTicks++;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	607b      	str	r3, [r7, #4]
    		usDelay(2);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f000 fa4b 	bl	8002478 <usDelay>
    	  while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin)==GPIO_PIN_SET)
 8001fe2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fe6:	4852      	ldr	r0, [pc, #328]	@ (8002130 <main+0x370>)
 8001fe8:	f002 fa30 	bl	800444c <HAL_GPIO_ReadPin>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d0f1      	beq.n	8001fd6 <main+0x216>
    	  };
    	  distance = (numTicks + 0.0f)*2.8*Speedofsound;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffc:	ee17 0a90 	vmov	r0, s15
 8002000:	f7fe faaa 	bl	8000558 <__aeabi_f2d>
 8002004:	a336      	add	r3, pc, #216	@ (adr r3, 80020e0 <main+0x320>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fafd 	bl	8000608 <__aeabi_dmul>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4614      	mov	r4, r2
 8002014:	461d      	mov	r5, r3
 8002016:	4b47      	ldr	r3, [pc, #284]	@ (8002134 <main+0x374>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa9d 	bl	8000558 <__aeabi_f2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe faef 	bl	8000608 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f7fe fde1 	bl	8000bf8 <__aeabi_d2f>
 8002036:	4603      	mov	r3, r0
 8002038:	4a3b      	ldr	r2, [pc, #236]	@ (8002128 <main+0x368>)
 800203a:	6013      	str	r3, [r2, #0]
    	  distance2 = distance;
 800203c:	4b3a      	ldr	r3, [pc, #232]	@ (8002128 <main+0x368>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a3d      	ldr	r2, [pc, #244]	@ (8002138 <main+0x378>)
 8002042:	6013      	str	r3, [r2, #0]

    	  if(((distance2-distance1)>=5)|(distance2<20))
 8002044:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <main+0x378>)
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	4b38      	ldr	r3, [pc, #224]	@ (800212c <main+0x36c>)
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002054:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	bfac      	ite	ge
 8002062:	2301      	movge	r3, #1
 8002064:	2300      	movlt	r3, #0
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b33      	ldr	r3, [pc, #204]	@ (8002138 <main+0x378>)
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	bf4c      	ite	mi
 800207c:	2301      	movmi	r3, #1
 800207e:	2300      	movpl	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d05e      	beq.n	8002148 <main+0x388>
    	  {
    		  if (nextFiveMinutes >= 60) {
 800208a:	4b20      	ldr	r3, [pc, #128]	@ (800210c <main+0x34c>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002090:	d905      	bls.n	800209e <main+0x2de>
    		      nextFiveMinutes -= 58 ;
 8002092:	4b1e      	ldr	r3, [pc, #120]	@ (800210c <main+0x34c>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	3b3a      	subs	r3, #58	@ 0x3a
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <main+0x34c>)
 800209c:	701a      	strb	r2, [r3, #0]
    		  };
    		  human = 1;
 800209e:	4b27      	ldr	r3, [pc, #156]	@ (800213c <main+0x37c>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
    		  nextFiveMinutes = sTime.Minutes;
 80020a4:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <main+0x344>)
 80020a6:	785a      	ldrb	r2, [r3, #1]
 80020a8:	4b18      	ldr	r3, [pc, #96]	@ (800210c <main+0x34c>)
 80020aa:	701a      	strb	r2, [r3, #0]
    		  nextFiveMinutes += 0b0010;
 80020ac:	4b17      	ldr	r3, [pc, #92]	@ (800210c <main+0x34c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	3302      	adds	r3, #2
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b15      	ldr	r3, [pc, #84]	@ (800210c <main+0x34c>)
 80020b6:	701a      	strb	r2, [r3, #0]
    		  sprintf(restminute, "%02d'",nextFiveMinutes);
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <main+0x34c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	4920      	ldr	r1, [pc, #128]	@ (8002140 <main+0x380>)
 80020c0:	4820      	ldr	r0, [pc, #128]	@ (8002144 <main+0x384>)
 80020c2:	f005 fa81 	bl	80075c8 <siprintf>
        	  showzifustr(60, 135, restminute , BLACK, WHITE);
 80020c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2300      	movs	r3, #0
 80020ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <main+0x384>)
 80020d0:	2187      	movs	r1, #135	@ 0x87
 80020d2:	203c      	movs	r0, #60	@ 0x3c
 80020d4:	f7ff fbd8 	bl	8001888 <showzifustr>
 80020d8:	e05f      	b.n	800219a <main+0x3da>
 80020da:	bf00      	nop
 80020dc:	f3af 8000 	nop.w
 80020e0:	66666666 	.word	0x66666666
 80020e4:	40066666 	.word	0x40066666
 80020e8:	0800ae58 	.word	0x0800ae58
 80020ec:	0800ae60 	.word	0x0800ae60
 80020f0:	0800ae68 	.word	0x0800ae68
 80020f4:	0800ae70 	.word	0x0800ae70
 80020f8:	0800ae78 	.word	0x0800ae78
 80020fc:	0800ae80 	.word	0x0800ae80
 8002100:	0800ae88 	.word	0x0800ae88
 8002104:	2000d768 	.word	0x2000d768
 8002108:	2000d5e8 	.word	0x2000d5e8
 800210c:	2000d8a2 	.word	0x2000d8a2
 8002110:	40010000 	.word	0x40010000
 8002114:	2000d77c 	.word	0x2000d77c
 8002118:	0800ae94 	.word	0x0800ae94
 800211c:	2000d880 	.word	0x2000d880
 8002120:	0800aea8 	.word	0x0800aea8
 8002124:	2000d870 	.word	0x2000d870
 8002128:	2000d3f4 	.word	0x2000d3f4
 800212c:	2000d8a4 	.word	0x2000d8a4
 8002130:	40020000 	.word	0x40020000
 8002134:	3c8c7e28 	.word	0x3c8c7e28
 8002138:	2000d8a8 	.word	0x2000d8a8
 800213c:	2000d8ac 	.word	0x2000d8ac
 8002140:	0800aeb4 	.word	0x0800aeb4
 8002144:	2000d89c 	.word	0x2000d89c
    	  }else{

    		  if(sTime.Minutes == nextFiveMinutes){
 8002148:	4b5a      	ldr	r3, [pc, #360]	@ (80022b4 <main+0x4f4>)
 800214a:	785a      	ldrb	r2, [r3, #1]
 800214c:	4b5a      	ldr	r3, [pc, #360]	@ (80022b8 <main+0x4f8>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d122      	bne.n	800219a <main+0x3da>
    		  human = 0;
 8002154:	4b59      	ldr	r3, [pc, #356]	@ (80022bc <main+0x4fc>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
    		  sprintf(timelately, "%02dh'",sTime.Hours);
 800215a:	4b56      	ldr	r3, [pc, #344]	@ (80022b4 <main+0x4f4>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	4957      	ldr	r1, [pc, #348]	@ (80022c0 <main+0x500>)
 8002162:	4858      	ldr	r0, [pc, #352]	@ (80022c4 <main+0x504>)
 8002164:	f005 fa30 	bl	80075c8 <siprintf>
        	  showzifustr(80, 150, timelately , BLACK, WHITE);
 8002168:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	4a54      	ldr	r2, [pc, #336]	@ (80022c4 <main+0x504>)
 8002172:	2196      	movs	r1, #150	@ 0x96
 8002174:	2050      	movs	r0, #80	@ 0x50
 8002176:	f7ff fb87 	bl	8001888 <showzifustr>
    		  sprintf(latelyoff, "%02d'",nextFiveMinutes);
 800217a:	4b4f      	ldr	r3, [pc, #316]	@ (80022b8 <main+0x4f8>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	4951      	ldr	r1, [pc, #324]	@ (80022c8 <main+0x508>)
 8002182:	4852      	ldr	r0, [pc, #328]	@ (80022cc <main+0x50c>)
 8002184:	f005 fa20 	bl	80075c8 <siprintf>
        	  showzifustr(100, 150, latelyoff , BLACK, WHITE);
 8002188:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	4a4e      	ldr	r2, [pc, #312]	@ (80022cc <main+0x50c>)
 8002192:	2196      	movs	r1, #150	@ 0x96
 8002194:	2064      	movs	r0, #100	@ 0x64
 8002196:	f7ff fb77 	bl	8001888 <showzifustr>
    		  };

    	  }
    	  if(human == 1){
 800219a:	4b48      	ldr	r3, [pc, #288]	@ (80022bc <main+0x4fc>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d139      	bne.n	8002216 <main+0x456>
    		  if(lux < 2900)
 80021a2:	4b4b      	ldr	r3, [pc, #300]	@ (80022d0 <main+0x510>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	f640 3253 	movw	r2, #2899	@ 0xb53
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d808      	bhi.n	80021c0 <main+0x400>
    		  {
    			  if(TIM1->CCR3 <= 100){
 80021ae:	4b49      	ldr	r3, [pc, #292]	@ (80022d4 <main+0x514>)
 80021b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b2:	2b64      	cmp	r3, #100	@ 0x64
 80021b4:	d804      	bhi.n	80021c0 <main+0x400>
        			  TIM1->CCR3 += 5;
 80021b6:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <main+0x514>)
 80021b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ba:	4a46      	ldr	r2, [pc, #280]	@ (80022d4 <main+0x514>)
 80021bc:	3305      	adds	r3, #5
 80021be:	63d3      	str	r3, [r2, #60]	@ 0x3c
    			  	  }
    		  }
    		  if(lux>2950){
 80021c0:	4b43      	ldr	r3, [pc, #268]	@ (80022d0 <main+0x510>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f640 3286 	movw	r2, #2950	@ 0xb86
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d90f      	bls.n	80021ec <main+0x42c>
    			  if(TIM1->CCR3 > 0){
 80021cc:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <main+0x514>)
 80021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <main+0x41e>
        			  TIM1->CCR3 -= 5;
 80021d4:	4b3f      	ldr	r3, [pc, #252]	@ (80022d4 <main+0x514>)
 80021d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d8:	4a3e      	ldr	r2, [pc, #248]	@ (80022d4 <main+0x514>)
 80021da:	3b05      	subs	r3, #5
 80021dc:	63d3      	str	r3, [r2, #60]	@ 0x3c
    			  }
    			  if(TIM1->CCR3 == 0){
 80021de:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <main+0x514>)
 80021e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <main+0x42c>
        			  TIM1->CCR3 = 0;
 80021e6:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <main+0x514>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    			  }
    		  }
    		  if((lux>=2900)&&(lux<=2950))
 80021ec:	4b38      	ldr	r3, [pc, #224]	@ (80022d0 <main+0x510>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f640 3253 	movw	r2, #2899	@ 0xb53
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d909      	bls.n	800220c <main+0x44c>
 80021f8:	4b35      	ldr	r3, [pc, #212]	@ (80022d0 <main+0x510>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f640 3286 	movw	r2, #2950	@ 0xb86
 8002200:	4293      	cmp	r3, r2
 8002202:	d803      	bhi.n	800220c <main+0x44c>
    		  {
    			  TIM1->CCR3 = TIM1->CCR3;
 8002204:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <main+0x514>)
 8002206:	4a33      	ldr	r2, [pc, #204]	@ (80022d4 <main+0x514>)
 8002208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    		  }
    		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800220c:	2108      	movs	r1, #8
 800220e:	4832      	ldr	r0, [pc, #200]	@ (80022d8 <main+0x518>)
 8002210:	f003 fcda 	bl	8005bc8 <HAL_TIM_PWM_Start>
 8002214:	e006      	b.n	8002224 <main+0x464>
    	  }
    	  else{
    		  TIM1->CCR3 = 0;
 8002216:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <main+0x514>)
 8002218:	2200      	movs	r2, #0
 800221a:	63da      	str	r2, [r3, #60]	@ 0x3c
    		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800221c:	2108      	movs	r1, #8
 800221e:	482e      	ldr	r0, [pc, #184]	@ (80022d8 <main+0x518>)
 8002220:	f003 fcd2 	bl	8005bc8 <HAL_TIM_PWM_Start>

    	  }
    	      sprintf(sensor, "%.2f", distance);
 8002224:	4b2d      	ldr	r3, [pc, #180]	@ (80022dc <main+0x51c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f995 	bl	8000558 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	492b      	ldr	r1, [pc, #172]	@ (80022e0 <main+0x520>)
 8002234:	482b      	ldr	r0, [pc, #172]	@ (80022e4 <main+0x524>)
 8002236:	f005 f9c7 	bl	80075c8 <siprintf>
              showzifustr(150, 120, sensor , BLACK, WHITE);
 800223a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2300      	movs	r3, #0
 8002242:	4a28      	ldr	r2, [pc, #160]	@ (80022e4 <main+0x524>)
 8002244:	2178      	movs	r1, #120	@ 0x78
 8002246:	2096      	movs	r0, #150	@ 0x96
 8002248:	f7ff fb1e 	bl	8001888 <showzifustr>

        	  HAL_ADC_Start(&hadc1);
 800224c:	4826      	ldr	r0, [pc, #152]	@ (80022e8 <main+0x528>)
 800224e:	f000 ff8d 	bl	800316c <HAL_ADC_Start>
        	  HAL_ADC_PollForConversion(&hadc1, 20);
 8002252:	2114      	movs	r1, #20
 8002254:	4824      	ldr	r0, [pc, #144]	@ (80022e8 <main+0x528>)
 8002256:	f001 f83d 	bl	80032d4 <HAL_ADC_PollForConversion>
        	  lux = HAL_ADC_GetValue(&hadc1);
 800225a:	4823      	ldr	r0, [pc, #140]	@ (80022e8 <main+0x528>)
 800225c:	f001 f8c5 	bl	80033ea <HAL_ADC_GetValue>
 8002260:	4603      	mov	r3, r0
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <main+0x510>)
 8002266:	801a      	strh	r2, [r3, #0]
        	  sprintf(light, "%d (lux)", lux);
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <main+0x510>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	491f      	ldr	r1, [pc, #124]	@ (80022ec <main+0x52c>)
 8002270:	481f      	ldr	r0, [pc, #124]	@ (80022f0 <main+0x530>)
 8002272:	f005 f9a9 	bl	80075c8 <siprintf>
        	  showzifustr(150, 140,light, BLACK, WHITE);
 8002276:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2300      	movs	r3, #0
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <main+0x530>)
 8002280:	218c      	movs	r1, #140	@ 0x8c
 8002282:	2096      	movs	r0, #150	@ 0x96
 8002284:	f7ff fb00 	bl	8001888 <showzifustr>
        	  sprintf(control, "%d", TIM1->CCR3);
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <main+0x514>)
 800228a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228c:	461a      	mov	r2, r3
 800228e:	4919      	ldr	r1, [pc, #100]	@ (80022f4 <main+0x534>)
 8002290:	4819      	ldr	r0, [pc, #100]	@ (80022f8 <main+0x538>)
 8002292:	f005 f999 	bl	80075c8 <siprintf>
        	  showzifustr(150, 155, control, BLACK, WHITE);
 8002296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2300      	movs	r3, #0
 800229e:	4a16      	ldr	r2, [pc, #88]	@ (80022f8 <main+0x538>)
 80022a0:	219b      	movs	r1, #155	@ 0x9b
 80022a2:	2096      	movs	r0, #150	@ 0x96
 80022a4:	f7ff faf0 	bl	8001888 <showzifustr>
        	  HAL_Delay(1000);
 80022a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022ac:	f000 fef6 	bl	800309c <HAL_Delay>
     	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80022b0:	e636      	b.n	8001f20 <main+0x160>
 80022b2:	bf00      	nop
 80022b4:	2000d768 	.word	0x2000d768
 80022b8:	2000d8a2 	.word	0x2000d8a2
 80022bc:	2000d8ac 	.word	0x2000d8ac
 80022c0:	0800aebc 	.word	0x0800aebc
 80022c4:	2000d898 	.word	0x2000d898
 80022c8:	0800aeb4 	.word	0x0800aeb4
 80022cc:	2000d8a0 	.word	0x2000d8a0
 80022d0:	2000d8ae 	.word	0x2000d8ae
 80022d4:	40010000 	.word	0x40010000
 80022d8:	2000d780 	.word	0x2000d780
 80022dc:	2000d3f4 	.word	0x2000d3f4
 80022e0:	0800aec4 	.word	0x0800aec4
 80022e4:	2000d890 	.word	0x2000d890
 80022e8:	2000d608 	.word	0x2000d608
 80022ec:	0800aecc 	.word	0x0800aecc
 80022f0:	2000d8b0 	.word	0x2000d8b0
 80022f4:	0800aed8 	.word	0x0800aed8
 80022f8:	2000d8bc 	.word	0x2000d8bc

080022fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b094      	sub	sp, #80	@ 0x50
 8002300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002302:	f107 0320 	add.w	r3, r7, #32
 8002306:	2230      	movs	r2, #48	@ 0x30
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f005 f9bf 	bl	800768e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <SystemClock_Config+0xd0>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	4a28      	ldr	r2, [pc, #160]	@ (80023cc <SystemClock_Config+0xd0>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800232e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002330:	4b26      	ldr	r3, [pc, #152]	@ (80023cc <SystemClock_Config+0xd0>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	4b23      	ldr	r3, [pc, #140]	@ (80023d0 <SystemClock_Config+0xd4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002348:	4a21      	ldr	r2, [pc, #132]	@ (80023d0 <SystemClock_Config+0xd4>)
 800234a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b1f      	ldr	r3, [pc, #124]	@ (80023d0 <SystemClock_Config+0xd4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800235c:	230a      	movs	r3, #10
 800235e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002360:	2301      	movs	r3, #1
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002364:	2310      	movs	r3, #16
 8002366:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002368:	2301      	movs	r3, #1
 800236a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236c:	2302      	movs	r3, #2
 800236e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002370:	2300      	movs	r3, #0
 8002372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002374:	2308      	movs	r3, #8
 8002376:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002378:	2354      	movs	r3, #84	@ 0x54
 800237a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800237c:	2302      	movs	r3, #2
 800237e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002380:	2304      	movs	r3, #4
 8002382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002384:	f107 0320 	add.w	r3, r7, #32
 8002388:	4618      	mov	r0, r3
 800238a:	f002 f891 	bl	80044b0 <HAL_RCC_OscConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002394:	f000 fad0 	bl	8002938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002398:	230f      	movs	r3, #15
 800239a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800239c:	2302      	movs	r3, #2
 800239e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 faf3 	bl	80049a0 <HAL_RCC_ClockConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80023c0:	f000 faba 	bl	8002938 <Error_Handler>
  }
}
 80023c4:	bf00      	nop
 80023c6:	3750      	adds	r7, #80	@ 0x50
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40007000 	.word	0x40007000

080023d4 <MX_ADC1_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023da:	463b      	mov	r3, r7
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023e6:	4b21      	ldr	r3, [pc, #132]	@ (800246c <MX_ADC1_Init+0x98>)
 80023e8:	4a21      	ldr	r2, [pc, #132]	@ (8002470 <MX_ADC1_Init+0x9c>)
 80023ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <MX_ADC1_Init+0x98>)
 80023ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <MX_ADC1_Init+0x98>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023fa:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <MX_ADC1_Init+0x98>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002400:	4b1a      	ldr	r3, [pc, #104]	@ (800246c <MX_ADC1_Init+0x98>)
 8002402:	2200      	movs	r2, #0
 8002404:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002406:	4b19      	ldr	r3, [pc, #100]	@ (800246c <MX_ADC1_Init+0x98>)
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800240e:	4b17      	ldr	r3, [pc, #92]	@ (800246c <MX_ADC1_Init+0x98>)
 8002410:	2200      	movs	r2, #0
 8002412:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002414:	4b15      	ldr	r3, [pc, #84]	@ (800246c <MX_ADC1_Init+0x98>)
 8002416:	4a17      	ldr	r2, [pc, #92]	@ (8002474 <MX_ADC1_Init+0xa0>)
 8002418:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800241a:	4b14      	ldr	r3, [pc, #80]	@ (800246c <MX_ADC1_Init+0x98>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <MX_ADC1_Init+0x98>)
 8002422:	2201      	movs	r2, #1
 8002424:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <MX_ADC1_Init+0x98>)
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800242e:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <MX_ADC1_Init+0x98>)
 8002430:	2201      	movs	r2, #1
 8002432:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002434:	480d      	ldr	r0, [pc, #52]	@ (800246c <MX_ADC1_Init+0x98>)
 8002436:	f000 fe55 	bl	80030e4 <HAL_ADC_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002440:	f000 fa7a 	bl	8002938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002444:	2300      	movs	r3, #0
 8002446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002448:	2301      	movs	r3, #1
 800244a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800244c:	2301      	movs	r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002450:	463b      	mov	r3, r7
 8002452:	4619      	mov	r1, r3
 8002454:	4805      	ldr	r0, [pc, #20]	@ (800246c <MX_ADC1_Init+0x98>)
 8002456:	f000 ffd5 	bl	8003404 <HAL_ADC_ConfigChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002460:	f000 fa6a 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	2000d608 	.word	0x2000d608
 8002470:	40012000 	.word	0x40012000
 8002474:	0f000001 	.word	0x0f000001

08002478 <usDelay>:
void usDelay(uint32_t uSec)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d801      	bhi.n	800248a <usDelay+0x12>
 8002486:	2302      	movs	r3, #2
 8002488:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 800248a:	4a13      	ldr	r2, [pc, #76]	@ (80024d8 <usDelay+0x60>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	62d3      	str	r3, [r2, #44]	@ 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8002492:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <usDelay+0x60>)
 8002494:	2201      	movs	r2, #1
 8002496:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8002498:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <usDelay+0x60>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4a0e      	ldr	r2, [pc, #56]	@ (80024d8 <usDelay+0x60>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <usDelay+0x60>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0b      	ldr	r2, [pc, #44]	@ (80024d8 <usDelay+0x60>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 80024b0:	bf00      	nop
 80024b2:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <usDelay+0x60>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d1f9      	bne.n	80024b2 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <usDelay+0x60>)
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <usDelay+0x60>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6113      	str	r3, [r2, #16]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40000800 	.word	0x40000800

080024dc <MX_RTC_Init>:
static void MX_RTC_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024f0:	2300      	movs	r3, #0
 80024f2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024f4:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <MX_RTC_Init+0xac>)
 80024f6:	4a25      	ldr	r2, [pc, #148]	@ (800258c <MX_RTC_Init+0xb0>)
 80024f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024fa:	4b23      	ldr	r3, [pc, #140]	@ (8002588 <MX_RTC_Init+0xac>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002500:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <MX_RTC_Init+0xac>)
 8002502:	227f      	movs	r2, #127	@ 0x7f
 8002504:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <MX_RTC_Init+0xac>)
 8002508:	22ff      	movs	r2, #255	@ 0xff
 800250a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800250c:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <MX_RTC_Init+0xac>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002512:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <MX_RTC_Init+0xac>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <MX_RTC_Init+0xac>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800251e:	481a      	ldr	r0, [pc, #104]	@ (8002588 <MX_RTC_Init+0xac>)
 8002520:	f002 fcd8 	bl	8004ed4 <HAL_RTC_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800252a:	f000 fa05 	bl	8002938 <Error_Handler>
//
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x4;
 800252e:	2304      	movs	r3, #4
 8002530:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x11;
 8002532:	2311      	movs	r3, #17
 8002534:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002536:	2300      	movs	r3, #0
 8002538:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2201      	movs	r2, #1
 8002546:	4619      	mov	r1, r3
 8002548:	480f      	ldr	r0, [pc, #60]	@ (8002588 <MX_RTC_Init+0xac>)
 800254a:	f002 fd46 	bl	8004fda <HAL_RTC_SetTime>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002554:	f000 f9f0 	bl	8002938 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002558:	2302      	movs	r3, #2
 800255a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 800255c:	2304      	movs	r3, #4
 800255e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x23;
 8002560:	2323      	movs	r3, #35	@ 0x23
 8002562:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8002564:	2324      	movs	r3, #36	@ 0x24
 8002566:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002568:	463b      	mov	r3, r7
 800256a:	2201      	movs	r2, #1
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	@ (8002588 <MX_RTC_Init+0xac>)
 8002570:	f002 fe2b 	bl	80051ca <HAL_RTC_SetDate>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800257a:	f000 f9dd 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
//
  /* USER CODE END RTC_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000d5e8 	.word	0x2000d5e8
 800258c:	40002800 	.word	0x40002800

08002590 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002594:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <MX_SPI1_Init+0x64>)
 8002596:	4a18      	ldr	r2, [pc, #96]	@ (80025f8 <MX_SPI1_Init+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <MX_SPI1_Init+0x64>)
 800259c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025a2:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025ae:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025b0:	2202      	movs	r2, #2
 80025b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c8:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d4:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025dc:	220a      	movs	r2, #10
 80025de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025e0:	4804      	ldr	r0, [pc, #16]	@ (80025f4 <MX_SPI1_Init+0x64>)
 80025e2:	f002 ff83 	bl	80054ec <HAL_SPI_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80025ec:	f000 f9a4 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000d650 	.word	0x2000d650
 80025f8:	40013000 	.word	0x40013000

080025fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b096      	sub	sp, #88	@ 0x58
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002602:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002610:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800261a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	615a      	str	r2, [r3, #20]
 800262c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2220      	movs	r2, #32
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f005 f82a 	bl	800768e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800263a:	4b3e      	ldr	r3, [pc, #248]	@ (8002734 <MX_TIM1_Init+0x138>)
 800263c:	4a3e      	ldr	r2, [pc, #248]	@ (8002738 <MX_TIM1_Init+0x13c>)
 800263e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002640:	4b3c      	ldr	r3, [pc, #240]	@ (8002734 <MX_TIM1_Init+0x138>)
 8002642:	2253      	movs	r2, #83	@ 0x53
 8002644:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002646:	4b3b      	ldr	r3, [pc, #236]	@ (8002734 <MX_TIM1_Init+0x138>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800264c:	4b39      	ldr	r3, [pc, #228]	@ (8002734 <MX_TIM1_Init+0x138>)
 800264e:	2263      	movs	r2, #99	@ 0x63
 8002650:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	4b38      	ldr	r3, [pc, #224]	@ (8002734 <MX_TIM1_Init+0x138>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002658:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <MX_TIM1_Init+0x138>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b35      	ldr	r3, [pc, #212]	@ (8002734 <MX_TIM1_Init+0x138>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002664:	4833      	ldr	r0, [pc, #204]	@ (8002734 <MX_TIM1_Init+0x138>)
 8002666:	f003 fa07 	bl	8005a78 <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002670:	f000 f962 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002678:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800267a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800267e:	4619      	mov	r1, r3
 8002680:	482c      	ldr	r0, [pc, #176]	@ (8002734 <MX_TIM1_Init+0x138>)
 8002682:	f003 fc13 	bl	8005eac <HAL_TIM_ConfigClockSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800268c:	f000 f954 	bl	8002938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002690:	4828      	ldr	r0, [pc, #160]	@ (8002734 <MX_TIM1_Init+0x138>)
 8002692:	f003 fa40 	bl	8005b16 <HAL_TIM_PWM_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800269c:	f000 f94c 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026ac:	4619      	mov	r1, r3
 80026ae:	4821      	ldr	r0, [pc, #132]	@ (8002734 <MX_TIM1_Init+0x138>)
 80026b0:	f003 ff9c 	bl	80065ec <HAL_TIMEx_MasterConfigSynchronization>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80026ba:	f000 f93d 	bl	8002938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026be:	2360      	movs	r3, #96	@ 0x60
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ca:	2300      	movs	r3, #0
 80026cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026de:	2208      	movs	r2, #8
 80026e0:	4619      	mov	r1, r3
 80026e2:	4814      	ldr	r0, [pc, #80]	@ (8002734 <MX_TIM1_Init+0x138>)
 80026e4:	f003 fb20 	bl	8005d28 <HAL_TIM_PWM_ConfigChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80026ee:	f000 f923 	bl	8002938 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002706:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800270a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4807      	ldr	r0, [pc, #28]	@ (8002734 <MX_TIM1_Init+0x138>)
 8002716:	f003 ffd7 	bl	80066c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002720:	f000 f90a 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002724:	4803      	ldr	r0, [pc, #12]	@ (8002734 <MX_TIM1_Init+0x138>)
 8002726:	f000 fabd 	bl	8002ca4 <HAL_TIM_MspPostInit>

}
 800272a:	bf00      	nop
 800272c:	3758      	adds	r7, #88	@ 0x58
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000d780 	.word	0x2000d780
 8002738:	40010000 	.word	0x40010000

0800273c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002750:	463b      	mov	r3, r7
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002758:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <MX_TIM4_Init+0x90>)
 800275a:	4a1d      	ldr	r2, [pc, #116]	@ (80027d0 <MX_TIM4_Init+0x94>)
 800275c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800275e:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <MX_TIM4_Init+0x90>)
 8002760:	2253      	movs	r2, #83	@ 0x53
 8002762:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002764:	4b19      	ldr	r3, [pc, #100]	@ (80027cc <MX_TIM4_Init+0x90>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800276a:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <MX_TIM4_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002770:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <MX_TIM4_Init+0x90>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <MX_TIM4_Init+0x90>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800277c:	4813      	ldr	r0, [pc, #76]	@ (80027cc <MX_TIM4_Init+0x90>)
 800277e:	f003 f97b 	bl	8005a78 <HAL_TIM_Base_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002788:	f000 f8d6 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002792:	f107 0308 	add.w	r3, r7, #8
 8002796:	4619      	mov	r1, r3
 8002798:	480c      	ldr	r0, [pc, #48]	@ (80027cc <MX_TIM4_Init+0x90>)
 800279a:	f003 fb87 	bl	8005eac <HAL_TIM_ConfigClockSource>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80027a4:	f000 f8c8 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a8:	2300      	movs	r3, #0
 80027aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027b0:	463b      	mov	r3, r7
 80027b2:	4619      	mov	r1, r3
 80027b4:	4805      	ldr	r0, [pc, #20]	@ (80027cc <MX_TIM4_Init+0x90>)
 80027b6:	f003 ff19 	bl	80065ec <HAL_TIMEx_MasterConfigSynchronization>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80027c0:	f000 f8ba 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027c4:	bf00      	nop
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2000d7c8 	.word	0x2000d7c8
 80027d0:	40000800 	.word	0x40000800

080027d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <MX_DMA_Init+0x5c>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a13      	ldr	r2, [pc, #76]	@ (8002830 <MX_DMA_Init+0x5c>)
 80027e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <MX_DMA_Init+0x5c>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2038      	movs	r0, #56	@ 0x38
 80027fc:	f001 f8fb 	bl	80039f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002800:	2038      	movs	r0, #56	@ 0x38
 8002802:	f001 f914 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	203b      	movs	r0, #59	@ 0x3b
 800280c:	f001 f8f3 	bl	80039f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002810:	203b      	movs	r0, #59	@ 0x3b
 8002812:	f001 f90c 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	2045      	movs	r0, #69	@ 0x45
 800281c:	f001 f8eb 	bl	80039f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002820:	2045      	movs	r0, #69	@ 0x45
 8002822:	f001 f904 	bl	8003a2e <HAL_NVIC_EnableIRQ>

}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800

08002834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b37      	ldr	r3, [pc, #220]	@ (800292c <MX_GPIO_Init+0xf8>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a36      	ldr	r2, [pc, #216]	@ (800292c <MX_GPIO_Init+0xf8>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b34      	ldr	r3, [pc, #208]	@ (800292c <MX_GPIO_Init+0xf8>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b30      	ldr	r3, [pc, #192]	@ (800292c <MX_GPIO_Init+0xf8>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a2f      	ldr	r2, [pc, #188]	@ (800292c <MX_GPIO_Init+0xf8>)
 8002870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <MX_GPIO_Init+0xf8>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b29      	ldr	r3, [pc, #164]	@ (800292c <MX_GPIO_Init+0xf8>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	4a28      	ldr	r2, [pc, #160]	@ (800292c <MX_GPIO_Init+0xf8>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6313      	str	r3, [r2, #48]	@ 0x30
 8002892:	4b26      	ldr	r3, [pc, #152]	@ (800292c <MX_GPIO_Init+0xf8>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	4b22      	ldr	r3, [pc, #136]	@ (800292c <MX_GPIO_Init+0xf8>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	4a21      	ldr	r2, [pc, #132]	@ (800292c <MX_GPIO_Init+0xf8>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ae:	4b1f      	ldr	r3, [pc, #124]	@ (800292c <MX_GPIO_Init+0xf8>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger_Pin, GPIO_PIN_RESET);
 80028ba:	2200      	movs	r2, #0
 80028bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028c0:	481b      	ldr	r0, [pc, #108]	@ (8002930 <MX_GPIO_Init+0xfc>)
 80028c2:	f001 fddb 	bl	800447c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2107      	movs	r1, #7
 80028ca:	481a      	ldr	r0, [pc, #104]	@ (8002934 <MX_GPIO_Init+0x100>)
 80028cc:	f001 fdd6 	bl	800447c <HAL_GPIO_WritePin>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin;
 80028d0:	2307      	movs	r3, #7
 80028d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4813      	ldr	r0, [pc, #76]	@ (8002934 <MX_GPIO_Init+0x100>)
 80028e8:	f001 fc2c 	bl	8004144 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 80028ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	480a      	ldr	r0, [pc, #40]	@ (8002930 <MX_GPIO_Init+0xfc>)
 8002906:	f001 fc1d 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 800290a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800290e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	4804      	ldr	r0, [pc, #16]	@ (8002930 <MX_GPIO_Init+0xfc>)
 8002920:	f001 fc10 	bl	8004144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002924:	bf00      	nop
 8002926:	3728      	adds	r7, #40	@ 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400

08002938 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800293c:	b672      	cpsid	i
}
 800293e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <Error_Handler+0x8>

08002944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <HAL_MspInit+0x4c>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	4a0f      	ldr	r2, [pc, #60]	@ (8002990 <HAL_MspInit+0x4c>)
 8002954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002958:	6453      	str	r3, [r2, #68]	@ 0x44
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_MspInit+0x4c>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_MspInit+0x4c>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a08      	ldr	r2, [pc, #32]	@ (8002990 <HAL_MspInit+0x4c>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_MspInit+0x4c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	@ 0x28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <HAL_ADC_MspInit+0x7c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d127      	bne.n	8002a06 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <HAL_ADC_MspInit+0x80>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	4a15      	ldr	r2, [pc, #84]	@ (8002a14 <HAL_ADC_MspInit+0x80>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029c6:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <HAL_ADC_MspInit+0x80>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <HAL_ADC_MspInit+0x80>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a0e      	ldr	r2, [pc, #56]	@ (8002a14 <HAL_ADC_MspInit+0x80>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <HAL_ADC_MspInit+0x80>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ee:	2301      	movs	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f2:	2303      	movs	r3, #3
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	4805      	ldr	r0, [pc, #20]	@ (8002a18 <HAL_ADC_MspInit+0x84>)
 8002a02:	f001 fb9f 	bl	8004144 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a06:	bf00      	nop
 8002a08:	3728      	adds	r7, #40	@ 0x28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40012000 	.word	0x40012000
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020000 	.word	0x40020000

08002a1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <HAL_RTC_MspInit+0x50>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a46:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a48:	f107 030c 	add.w	r3, r7, #12
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 f953 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002a58:	f7ff ff6e 	bl	8002938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <HAL_RTC_MspInit+0x54>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a62:	bf00      	nop
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40002800 	.word	0x40002800
 8002a70:	42470e3c 	.word	0x42470e3c

08002a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	@ 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a48      	ldr	r2, [pc, #288]	@ (8002bb4 <HAL_SPI_MspInit+0x140>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	f040 808a 	bne.w	8002bac <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	4b46      	ldr	r3, [pc, #280]	@ (8002bb8 <HAL_SPI_MspInit+0x144>)
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa0:	4a45      	ldr	r2, [pc, #276]	@ (8002bb8 <HAL_SPI_MspInit+0x144>)
 8002aa2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aa6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa8:	4b43      	ldr	r3, [pc, #268]	@ (8002bb8 <HAL_SPI_MspInit+0x144>)
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb8 <HAL_SPI_MspInit+0x144>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abc:	4a3e      	ldr	r2, [pc, #248]	@ (8002bb8 <HAL_SPI_MspInit+0x144>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8002bb8 <HAL_SPI_MspInit+0x144>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ad0:	23e0      	movs	r3, #224	@ 0xe0
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4834      	ldr	r0, [pc, #208]	@ (8002bbc <HAL_SPI_MspInit+0x148>)
 8002aec:	f001 fb2a 	bl	8004144 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002af0:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002af2:	4a34      	ldr	r2, [pc, #208]	@ (8002bc4 <HAL_SPI_MspInit+0x150>)
 8002af4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002af6:	4b32      	ldr	r3, [pc, #200]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002af8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002afc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002afe:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b00:	2240      	movs	r2, #64	@ 0x40
 8002b02:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b04:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b10:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b12:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b18:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002b1e:	4b28      	ldr	r3, [pc, #160]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b24:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b2a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b2c:	4b24      	ldr	r3, [pc, #144]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002b32:	4823      	ldr	r0, [pc, #140]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b34:	f000 ff96 	bl	8003a64 <HAL_DMA_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8002b3e:	f7ff fefb 	bl	8002938 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b46:	649a      	str	r2, [r3, #72]	@ 0x48
 8002b48:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <HAL_SPI_MspInit+0x14c>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b50:	4a1e      	ldr	r2, [pc, #120]	@ (8002bcc <HAL_SPI_MspInit+0x158>)
 8002b52:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b56:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002b5a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b62:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b68:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b6e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b70:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b76:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b82:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b88:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002b90:	480d      	ldr	r0, [pc, #52]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002b92:	f000 ff67 	bl	8003a64 <HAL_DMA_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8002b9c:	f7ff fecc 	bl	8002938 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a09      	ldr	r2, [pc, #36]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002ba4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002ba6:	4a08      	ldr	r2, [pc, #32]	@ (8002bc8 <HAL_SPI_MspInit+0x154>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	@ 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40013000 	.word	0x40013000
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	2000d6a8 	.word	0x2000d6a8
 8002bc4:	40026458 	.word	0x40026458
 8002bc8:	2000d708 	.word	0x2000d708
 8002bcc:	40026410 	.word	0x40026410

08002bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002c90 <HAL_TIM_Base_MspInit+0xc0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d13e      	bne.n	8002c60 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c94 <HAL_TIM_Base_MspInit+0xc4>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	4a2a      	ldr	r2, [pc, #168]	@ (8002c94 <HAL_TIM_Base_MspInit+0xc4>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf2:	4b28      	ldr	r3, [pc, #160]	@ (8002c94 <HAL_TIM_Base_MspInit+0xc4>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8002bfe:	4b26      	ldr	r3, [pc, #152]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c00:	4a26      	ldr	r2, [pc, #152]	@ (8002c9c <HAL_TIM_Base_MspInit+0xcc>)
 8002c02:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8002c04:	4b24      	ldr	r3, [pc, #144]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c06:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002c0a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c0c:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c0e:	2240      	movs	r2, #64	@ 0x40
 8002c10:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c12:	4b21      	ldr	r3, [pc, #132]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002c18:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c26:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c28:	4b1b      	ldr	r3, [pc, #108]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c2e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8002c30:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002c36:	4b18      	ldr	r3, [pc, #96]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c3c:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002c42:	4815      	ldr	r0, [pc, #84]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c44:	f000 ff0e 	bl	8003a64 <HAL_DMA_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002c4e:	f7ff fe73 	bl	8002938 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c56:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c58:	4a0f      	ldr	r2, [pc, #60]	@ (8002c98 <HAL_TIM_Base_MspInit+0xc8>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c5e:	e012      	b.n	8002c86 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca0 <HAL_TIM_Base_MspInit+0xd0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10d      	bne.n	8002c86 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_TIM_Base_MspInit+0xc4>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	4a08      	ldr	r2, [pc, #32]	@ (8002c94 <HAL_TIM_Base_MspInit+0xc4>)
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_TIM_Base_MspInit+0xc4>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40023800 	.word	0x40023800
 8002c98:	2000d810 	.word	0x2000d810
 8002c9c:	400264a0 	.word	0x400264a0
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a12      	ldr	r2, [pc, #72]	@ (8002d0c <HAL_TIM_MspPostInit+0x68>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d11e      	bne.n	8002d04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <HAL_TIM_MspPostInit+0x6c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	4a10      	ldr	r2, [pc, #64]	@ (8002d10 <HAL_TIM_MspPostInit+0x6c>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <HAL_TIM_MspPostInit+0x6c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ce6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4805      	ldr	r0, [pc, #20]	@ (8002d14 <HAL_TIM_MspPostInit+0x70>)
 8002d00:	f001 fa20 	bl	8004144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d04:	bf00      	nop
 8002d06:	3720      	adds	r7, #32
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020000 	.word	0x40020000

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <NMI_Handler+0x4>

08002d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <HardFault_Handler+0x4>

08002d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <MemManage_Handler+0x4>

08002d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <BusFault_Handler+0x4>

08002d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <UsageFault_Handler+0x4>

08002d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d6e:	f000 f975 	bl	800305c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002d7c:	4802      	ldr	r0, [pc, #8]	@ (8002d88 <DMA2_Stream0_IRQHandler+0x10>)
 8002d7e:	f000 ff77 	bl	8003c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000d708 	.word	0x2000d708

08002d8c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002d90:	4802      	ldr	r0, [pc, #8]	@ (8002d9c <DMA2_Stream3_IRQHandler+0x10>)
 8002d92:	f000 ff6d 	bl	8003c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000d6a8 	.word	0x2000d6a8

08002da0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8002da4:	4802      	ldr	r0, [pc, #8]	@ (8002db0 <DMA2_Stream6_IRQHandler+0x10>)
 8002da6:	f000 ff63 	bl	8003c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2000d810 	.word	0x2000d810

08002db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return 1;
 8002db8:	2301      	movs	r3, #1
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <_kill>:

int _kill(int pid, int sig)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dce:	f004 fcb1 	bl	8007734 <__errno>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2216      	movs	r2, #22
 8002dd6:	601a      	str	r2, [r3, #0]
  return -1;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <_exit>:

void _exit (int status)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ffe7 	bl	8002dc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002df6:	bf00      	nop
 8002df8:	e7fd      	b.n	8002df6 <_exit+0x12>

08002dfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e00a      	b.n	8002e22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e0c:	f3af 8000 	nop.w
 8002e10:	4601      	mov	r1, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	60ba      	str	r2, [r7, #8]
 8002e18:	b2ca      	uxtb	r2, r1
 8002e1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	dbf0      	blt.n	8002e0c <_read+0x12>
  }

  return len;
 8002e2a:	687b      	ldr	r3, [r7, #4]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e009      	b.n	8002e5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	60ba      	str	r2, [r7, #8]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3301      	adds	r3, #1
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	dbf1      	blt.n	8002e46 <_write+0x12>
  }
  return len;
 8002e62:	687b      	ldr	r3, [r7, #4]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <_close>:

int _close(int file)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e94:	605a      	str	r2, [r3, #4]
  return 0;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <_isatty>:

int _isatty(int file)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002edc:	4a14      	ldr	r2, [pc, #80]	@ (8002f30 <_sbrk+0x5c>)
 8002ede:	4b15      	ldr	r3, [pc, #84]	@ (8002f34 <_sbrk+0x60>)
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee8:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <_sbrk+0x64>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <_sbrk+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d207      	bcs.n	8002f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f04:	f004 fc16 	bl	8007734 <__errno>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e009      	b.n	8002f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f14:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	@ (8002f38 <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <_sbrk+0x64>)
 8002f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20018000 	.word	0x20018000
 8002f34:	00000400 	.word	0x00000400
 8002f38:	2000d8c4 	.word	0x2000d8c4
 8002f3c:	2000da18 	.word	0x2000da18

08002f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <SystemInit+0x20>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	4a05      	ldr	r2, [pc, #20]	@ (8002f60 <SystemInit+0x20>)
 8002f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f68:	f7ff ffea 	bl	8002f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f6c:	480c      	ldr	r0, [pc, #48]	@ (8002fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f6e:	490d      	ldr	r1, [pc, #52]	@ (8002fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f70:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f74:	e002      	b.n	8002f7c <LoopCopyDataInit>

08002f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f7a:	3304      	adds	r3, #4

08002f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f80:	d3f9      	bcc.n	8002f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f82:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f84:	4c0a      	ldr	r4, [pc, #40]	@ (8002fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f88:	e001      	b.n	8002f8e <LoopFillZerobss>

08002f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f8c:	3204      	adds	r2, #4

08002f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f90:	d3fb      	bcc.n	8002f8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002f92:	f004 fbd5 	bl	8007740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f96:	f7fe ff13 	bl	8001dc0 <main>
  bx  lr    
 8002f9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa4:	2000d5cc 	.word	0x2000d5cc
  ldr r2, =_sidata
 8002fa8:	0800b330 	.word	0x0800b330
  ldr r2, =_sbss
 8002fac:	2000d5cc 	.word	0x2000d5cc
  ldr r4, =_ebss
 8002fb0:	2000da18 	.word	0x2000da18

08002fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb4:	e7fe      	b.n	8002fb4 <ADC_IRQHandler>
	...

08002fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff8 <HAL_Init+0x40>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff8 <HAL_Init+0x40>)
 8002fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <HAL_Init+0x40>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <HAL_Init+0x40>)
 8002fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd4:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <HAL_Init+0x40>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a07      	ldr	r2, [pc, #28]	@ (8002ff8 <HAL_Init+0x40>)
 8002fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	f000 fcfd 	bl	80039e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fe6:	200f      	movs	r0, #15
 8002fe8:	f000 f808 	bl	8002ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fec:	f7ff fcaa 	bl	8002944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023c00 	.word	0x40023c00

08002ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003004:	4b12      	ldr	r3, [pc, #72]	@ (8003050 <HAL_InitTick+0x54>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <HAL_InitTick+0x58>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003012:	fbb3 f3f1 	udiv	r3, r3, r1
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fd15 	bl	8003a4a <HAL_SYSTICK_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e00e      	b.n	8003048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b0f      	cmp	r3, #15
 800302e:	d80a      	bhi.n	8003046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003030:	2200      	movs	r2, #0
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	f000 fcdd 	bl	80039f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800303c:	4a06      	ldr	r2, [pc, #24]	@ (8003058 <HAL_InitTick+0x5c>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	2000d3f8 	.word	0x2000d3f8
 8003054:	2000d400 	.word	0x2000d400
 8003058:	2000d3fc 	.word	0x2000d3fc

0800305c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003060:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_IncTick+0x20>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_IncTick+0x24>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4413      	add	r3, r2
 800306c:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <HAL_IncTick+0x24>)
 800306e:	6013      	str	r3, [r2, #0]
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	2000d400 	.word	0x2000d400
 8003080:	2000d8c8 	.word	0x2000d8c8

08003084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return uwTick;
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <HAL_GetTick+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	2000d8c8 	.word	0x2000d8c8

0800309c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7ff ffee 	bl	8003084 <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d005      	beq.n	80030c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030b6:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <HAL_Delay+0x44>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030c2:	bf00      	nop
 80030c4:	f7ff ffde 	bl	8003084 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d8f7      	bhi.n	80030c4 <HAL_Delay+0x28>
  {
  }
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	2000d400 	.word	0x2000d400

080030e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e033      	b.n	8003162 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fc46 	bl	8002994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800312a:	f023 0302 	bic.w	r3, r3, #2
 800312e:	f043 0202 	orr.w	r2, r3, #2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa86 	bl	8003648 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	@ 0x40
 8003152:	e001      	b.n	8003158 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_ADC_Start+0x1a>
 8003182:	2302      	movs	r3, #2
 8003184:	e097      	b.n	80032b6 <HAL_ADC_Start+0x14a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d018      	beq.n	80031ce <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031ac:	4b45      	ldr	r3, [pc, #276]	@ (80032c4 <HAL_ADC_Start+0x158>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a45      	ldr	r2, [pc, #276]	@ (80032c8 <HAL_ADC_Start+0x15c>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0c9a      	lsrs	r2, r3, #18
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80031c0:	e002      	b.n	80031c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f9      	bne.n	80031c2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d15f      	bne.n	800329c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003206:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800321a:	d106      	bne.n	800322a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003220:	f023 0206 	bic.w	r2, r3, #6
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	645a      	str	r2, [r3, #68]	@ 0x44
 8003228:	e002      	b.n	8003230 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003238:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <HAL_ADC_Start+0x160>)
 800323a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003244:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10f      	bne.n	8003272 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d129      	bne.n	80032b4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	e020      	b.n	80032b4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a16      	ldr	r2, [pc, #88]	@ (80032d0 <HAL_ADC_Start+0x164>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d11b      	bne.n	80032b4 <HAL_ADC_Start+0x148>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d114      	bne.n	80032b4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	e00b      	b.n	80032b4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	f043 0210 	orr.w	r2, r3, #16
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	2000d3f8 	.word	0x2000d3f8
 80032c8:	431bde83 	.word	0x431bde83
 80032cc:	40012300 	.word	0x40012300
 80032d0:	40012000 	.word	0x40012000

080032d4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f0:	d113      	bne.n	800331a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003300:	d10b      	bne.n	800331a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e063      	b.n	80033e2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800331a:	f7ff feb3 	bl	8003084 <HAL_GetTick>
 800331e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003320:	e021      	b.n	8003366 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d01d      	beq.n	8003366 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_ADC_PollForConversion+0x6c>
 8003330:	f7ff fea8 	bl	8003084 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d212      	bcs.n	8003366 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d00b      	beq.n	8003366 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	f043 0204 	orr.w	r2, r3, #4
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e03d      	b.n	80033e2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d1d6      	bne.n	8003322 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0212 	mvn.w	r2, #18
 800337c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d123      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11f      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x1c>
 800341c:	2302      	movs	r3, #2
 800341e:	e105      	b.n	800362c <HAL_ADC_ConfigChannel+0x228>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b09      	cmp	r3, #9
 800342e:	d925      	bls.n	800347c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68d9      	ldr	r1, [r3, #12]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	3b1e      	subs	r3, #30
 8003446:	2207      	movs	r2, #7
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43da      	mvns	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	400a      	ands	r2, r1
 8003454:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68d9      	ldr	r1, [r3, #12]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	4618      	mov	r0, r3
 8003468:	4603      	mov	r3, r0
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4403      	add	r3, r0
 800346e:	3b1e      	subs	r3, #30
 8003470:	409a      	lsls	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	e022      	b.n	80034c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6919      	ldr	r1, [r3, #16]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	2207      	movs	r2, #7
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	400a      	ands	r2, r1
 800349e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6919      	ldr	r1, [r3, #16]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4403      	add	r3, r0
 80034b8:	409a      	lsls	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d824      	bhi.n	8003514 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	3b05      	subs	r3, #5
 80034dc:	221f      	movs	r2, #31
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	400a      	ands	r2, r1
 80034ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3b05      	subs	r3, #5
 8003506:	fa00 f203 	lsl.w	r2, r0, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34
 8003512:	e04c      	b.n	80035ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d824      	bhi.n	8003566 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	3b23      	subs	r3, #35	@ 0x23
 800352e:	221f      	movs	r2, #31
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43da      	mvns	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	400a      	ands	r2, r1
 800353c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	4618      	mov	r0, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	3b23      	subs	r3, #35	@ 0x23
 8003558:	fa00 f203 	lsl.w	r2, r0, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
 8003564:	e023      	b.n	80035ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	3b41      	subs	r3, #65	@ 0x41
 8003578:	221f      	movs	r2, #31
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43da      	mvns	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	400a      	ands	r2, r1
 8003586:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	4618      	mov	r0, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	3b41      	subs	r3, #65	@ 0x41
 80035a2:	fa00 f203 	lsl.w	r2, r0, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ae:	4b22      	ldr	r3, [pc, #136]	@ (8003638 <HAL_ADC_ConfigChannel+0x234>)
 80035b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a21      	ldr	r2, [pc, #132]	@ (800363c <HAL_ADC_ConfigChannel+0x238>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d109      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1cc>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b12      	cmp	r3, #18
 80035c2:	d105      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a19      	ldr	r2, [pc, #100]	@ (800363c <HAL_ADC_ConfigChannel+0x238>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d123      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x21e>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d003      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x1e6>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b11      	cmp	r3, #17
 80035e8:	d11b      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d111      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035fe:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <HAL_ADC_ConfigChannel+0x23c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a10      	ldr	r2, [pc, #64]	@ (8003644 <HAL_ADC_ConfigChannel+0x240>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	0c9a      	lsrs	r2, r3, #18
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003614:	e002      	b.n	800361c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3b01      	subs	r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f9      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40012300 	.word	0x40012300
 800363c:	40012000 	.word	0x40012000
 8003640:	2000d3f8 	.word	0x2000d3f8
 8003644:	431bde83 	.word	0x431bde83

08003648 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003650:	4b79      	ldr	r3, [pc, #484]	@ (8003838 <ADC_Init+0x1f0>)
 8003652:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800367c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	021a      	lsls	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80036a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	4a58      	ldr	r2, [pc, #352]	@ (800383c <ADC_Init+0x1f4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6899      	ldr	r1, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e00f      	b.n	8003746 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0202 	bic.w	r2, r2, #2
 8003754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7e1b      	ldrb	r3, [r3, #24]
 8003760:	005a      	lsls	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01b      	beq.n	80037ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003782:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003792:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	3b01      	subs	r3, #1
 80037a0:	035a      	lsls	r2, r3, #13
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e007      	b.n	80037bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80037ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	051a      	lsls	r2, r3, #20
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6899      	ldr	r1, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037fe:	025a      	lsls	r2, r3, #9
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	029a      	lsls	r2, r3, #10
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40012300 	.word	0x40012300
 800383c:	0f000001 	.word	0x0f000001

08003840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003850:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800386c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003872:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	60d3      	str	r3, [r2, #12]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <__NVIC_GetPriorityGrouping+0x18>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 0307 	and.w	r3, r3, #7
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	db0b      	blt.n	80038ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	f003 021f 	and.w	r2, r3, #31
 80038bc:	4907      	ldr	r1, [pc, #28]	@ (80038dc <__NVIC_EnableIRQ+0x38>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2001      	movs	r0, #1
 80038c6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000e100 	.word	0xe000e100

080038e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	6039      	str	r1, [r7, #0]
 80038ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	db0a      	blt.n	800390a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	490c      	ldr	r1, [pc, #48]	@ (800392c <__NVIC_SetPriority+0x4c>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	0112      	lsls	r2, r2, #4
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	440b      	add	r3, r1
 8003904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003908:	e00a      	b.n	8003920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4908      	ldr	r1, [pc, #32]	@ (8003930 <__NVIC_SetPriority+0x50>)
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	3b04      	subs	r3, #4
 8003918:	0112      	lsls	r2, r2, #4
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	440b      	add	r3, r1
 800391e:	761a      	strb	r2, [r3, #24]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000e100 	.word	0xe000e100
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	@ 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f1c3 0307 	rsb	r3, r3, #7
 800394e:	2b04      	cmp	r3, #4
 8003950:	bf28      	it	cs
 8003952:	2304      	movcs	r3, #4
 8003954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3304      	adds	r3, #4
 800395a:	2b06      	cmp	r3, #6
 800395c:	d902      	bls.n	8003964 <NVIC_EncodePriority+0x30>
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3b03      	subs	r3, #3
 8003962:	e000      	b.n	8003966 <NVIC_EncodePriority+0x32>
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	f04f 32ff 	mov.w	r2, #4294967295
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	401a      	ands	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800397c:	f04f 31ff 	mov.w	r1, #4294967295
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43d9      	mvns	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	4313      	orrs	r3, r2
         );
}
 800398e:	4618      	mov	r0, r3
 8003990:	3724      	adds	r7, #36	@ 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039ac:	d301      	bcc.n	80039b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ae:	2301      	movs	r3, #1
 80039b0:	e00f      	b.n	80039d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b2:	4a0a      	ldr	r2, [pc, #40]	@ (80039dc <SysTick_Config+0x40>)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ba:	210f      	movs	r1, #15
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	f7ff ff8e 	bl	80038e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c4:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <SysTick_Config+0x40>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ca:	4b04      	ldr	r3, [pc, #16]	@ (80039dc <SysTick_Config+0x40>)
 80039cc:	2207      	movs	r2, #7
 80039ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	e000e010 	.word	0xe000e010

080039e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff29 	bl	8003840 <__NVIC_SetPriorityGrouping>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4603      	mov	r3, r0
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a08:	f7ff ff3e 	bl	8003888 <__NVIC_GetPriorityGrouping>
 8003a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	6978      	ldr	r0, [r7, #20]
 8003a14:	f7ff ff8e 	bl	8003934 <NVIC_EncodePriority>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff5d 	bl	80038e0 <__NVIC_SetPriority>
}
 8003a26:	bf00      	nop
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff31 	bl	80038a4 <__NVIC_EnableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ffa2 	bl	800399c <SysTick_Config>
 8003a58:	4603      	mov	r3, r0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff fb08 	bl	8003084 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e099      	b.n	8003bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa0:	e00f      	b.n	8003ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aa2:	f7ff faef 	bl	8003084 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d908      	bls.n	8003ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e078      	b.n	8003bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e8      	bne.n	8003aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4b38      	ldr	r3, [pc, #224]	@ (8003bbc <HAL_DMA_Init+0x158>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d107      	bne.n	8003b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b24:	4313      	orrs	r3, r2
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0307 	bic.w	r3, r3, #7
 8003b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d117      	bne.n	8003b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fa6f 	bl	800404c <DMA_CheckFifoParam>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2240      	movs	r2, #64	@ 0x40
 8003b78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b82:	2301      	movs	r3, #1
 8003b84:	e016      	b.n	8003bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fa26 	bl	8003fe0 <DMA_CalcBaseAndBitshift>
 8003b94:	4603      	mov	r3, r0
 8003b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	223f      	movs	r2, #63	@ 0x3f
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	f010803f 	.word	0xf010803f

08003bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_DMA_Start_IT+0x26>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e040      	b.n	8003c68 <HAL_DMA_Start_IT+0xa8>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d12f      	bne.n	8003c5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f9b8 	bl	8003f84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c18:	223f      	movs	r2, #63	@ 0x3f
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0216 	orr.w	r2, r2, #22
 8003c2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0208 	orr.w	r2, r2, #8
 8003c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e005      	b.n	8003c66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c7c:	4b8e      	ldr	r3, [pc, #568]	@ (8003eb8 <HAL_DMA_IRQHandler+0x248>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a8e      	ldr	r2, [pc, #568]	@ (8003ebc <HAL_DMA_IRQHandler+0x24c>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0a9b      	lsrs	r3, r3, #10
 8003c88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01a      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0204 	bic.w	r2, r2, #4
 8003cc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc8:	2208      	movs	r2, #8
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d012      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	2201      	movs	r2, #1
 8003d00:	409a      	lsls	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0a:	f043 0202 	orr.w	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	2204      	movs	r2, #4
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d012      	beq.n	8003d48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	2204      	movs	r2, #4
 8003d36:	409a      	lsls	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d40:	f043 0204 	orr.w	r2, r3, #4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d043      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d03c      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d018      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d108      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d024      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
 8003d9e:	e01f      	b.n	8003de0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01b      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
 8003db0:	e016      	b.n	8003de0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d107      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0208 	bic.w	r2, r2, #8
 8003dce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	2220      	movs	r2, #32
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 808f 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8087 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e06:	2220      	movs	r2, #32
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d136      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0216 	bic.w	r2, r2, #22
 8003e28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <HAL_DMA_IRQHandler+0x1da>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0208 	bic.w	r2, r2, #8
 8003e58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5e:	223f      	movs	r2, #63	@ 0x3f
 8003e60:	409a      	lsls	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d07e      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
        }
        return;
 8003e86:	e079      	b.n	8003f7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
 8003eb4:	e02c      	b.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
 8003eb6:	bf00      	nop
 8003eb8:	2000d3f8 	.word	0x2000d3f8
 8003ebc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d023      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
 8003ed0:	e01e      	b.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0210 	bic.w	r2, r2, #16
 8003eee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d032      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d022      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2205      	movs	r2, #5
 8003f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d307      	bcc.n	8003f58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f2      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x2cc>
 8003f56:	e000      	b.n	8003f5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
 8003f7a:	e000      	b.n	8003f7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f7c:	bf00      	nop
    }
  }
}
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d108      	bne.n	8003fc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fc2:	e007      	b.n	8003fd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	60da      	str	r2, [r3, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	3b10      	subs	r3, #16
 8003ff0:	4a14      	ldr	r2, [pc, #80]	@ (8004044 <DMA_CalcBaseAndBitshift+0x64>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ffa:	4a13      	ldr	r2, [pc, #76]	@ (8004048 <DMA_CalcBaseAndBitshift+0x68>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d909      	bls.n	8004022 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	1d1a      	adds	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004020:	e007      	b.n	8004032 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800402a:	f023 0303 	bic.w	r3, r3, #3
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	aaaaaaab 	.word	0xaaaaaaab
 8004048:	0800aeec 	.word	0x0800aeec

0800404c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d11f      	bne.n	80040a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d856      	bhi.n	800411a <DMA_CheckFifoParam+0xce>
 800406c:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <DMA_CheckFifoParam+0x28>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004085 	.word	0x08004085
 8004078:	08004097 	.word	0x08004097
 800407c:	08004085 	.word	0x08004085
 8004080:	0800411b 	.word	0x0800411b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004088:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d046      	beq.n	800411e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004094:	e043      	b.n	800411e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800409e:	d140      	bne.n	8004122 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a4:	e03d      	b.n	8004122 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ae:	d121      	bne.n	80040f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d837      	bhi.n	8004126 <DMA_CheckFifoParam+0xda>
 80040b6:	a201      	add	r2, pc, #4	@ (adr r2, 80040bc <DMA_CheckFifoParam+0x70>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040cd 	.word	0x080040cd
 80040c0:	080040d3 	.word	0x080040d3
 80040c4:	080040cd 	.word	0x080040cd
 80040c8:	080040e5 	.word	0x080040e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e030      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d025      	beq.n	800412a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e2:	e022      	b.n	800412a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040ec:	d11f      	bne.n	800412e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040f2:	e01c      	b.n	800412e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d903      	bls.n	8004102 <DMA_CheckFifoParam+0xb6>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d003      	beq.n	8004108 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004100:	e018      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
      break;
 8004106:	e015      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00e      	beq.n	8004132 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      break;
 8004118:	e00b      	b.n	8004132 <DMA_CheckFifoParam+0xe6>
      break;
 800411a:	bf00      	nop
 800411c:	e00a      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 800411e:	bf00      	nop
 8004120:	e008      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 8004122:	bf00      	nop
 8004124:	e006      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
 8004128:	e004      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e002      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;   
 800412e:	bf00      	nop
 8004130:	e000      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 8004132:	bf00      	nop
    }
  } 
  
  return status; 
 8004134:	7bfb      	ldrb	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	@ 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004156:	2300      	movs	r3, #0
 8004158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	e159      	b.n	8004414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004160:	2201      	movs	r2, #1
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4013      	ands	r3, r2
 8004172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	429a      	cmp	r2, r3
 800417a:	f040 8148 	bne.w	800440e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d005      	beq.n	8004196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004192:	2b02      	cmp	r3, #2
 8004194:	d130      	bne.n	80041f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	2203      	movs	r2, #3
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4013      	ands	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041cc:	2201      	movs	r2, #1
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4013      	ands	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	f003 0201 	and.w	r2, r3, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b03      	cmp	r3, #3
 8004202:	d017      	beq.n	8004234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	2203      	movs	r2, #3
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d123      	bne.n	8004288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	08da      	lsrs	r2, r3, #3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3208      	adds	r2, #8
 8004248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	220f      	movs	r2, #15
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	08da      	lsrs	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3208      	adds	r2, #8
 8004282:	69b9      	ldr	r1, [r7, #24]
 8004284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2203      	movs	r2, #3
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0203 	and.w	r2, r3, #3
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80a2 	beq.w	800440e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	4b57      	ldr	r3, [pc, #348]	@ (800442c <HAL_GPIO_Init+0x2e8>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	4a56      	ldr	r2, [pc, #344]	@ (800442c <HAL_GPIO_Init+0x2e8>)
 80042d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80042da:	4b54      	ldr	r3, [pc, #336]	@ (800442c <HAL_GPIO_Init+0x2e8>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042e6:	4a52      	ldr	r2, [pc, #328]	@ (8004430 <HAL_GPIO_Init+0x2ec>)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	3302      	adds	r3, #2
 80042ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	220f      	movs	r2, #15
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a49      	ldr	r2, [pc, #292]	@ (8004434 <HAL_GPIO_Init+0x2f0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d019      	beq.n	8004346 <HAL_GPIO_Init+0x202>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a48      	ldr	r2, [pc, #288]	@ (8004438 <HAL_GPIO_Init+0x2f4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <HAL_GPIO_Init+0x1fe>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a47      	ldr	r2, [pc, #284]	@ (800443c <HAL_GPIO_Init+0x2f8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00d      	beq.n	800433e <HAL_GPIO_Init+0x1fa>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a46      	ldr	r2, [pc, #280]	@ (8004440 <HAL_GPIO_Init+0x2fc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <HAL_GPIO_Init+0x1f6>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a45      	ldr	r2, [pc, #276]	@ (8004444 <HAL_GPIO_Init+0x300>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d101      	bne.n	8004336 <HAL_GPIO_Init+0x1f2>
 8004332:	2304      	movs	r3, #4
 8004334:	e008      	b.n	8004348 <HAL_GPIO_Init+0x204>
 8004336:	2307      	movs	r3, #7
 8004338:	e006      	b.n	8004348 <HAL_GPIO_Init+0x204>
 800433a:	2303      	movs	r3, #3
 800433c:	e004      	b.n	8004348 <HAL_GPIO_Init+0x204>
 800433e:	2302      	movs	r3, #2
 8004340:	e002      	b.n	8004348 <HAL_GPIO_Init+0x204>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <HAL_GPIO_Init+0x204>
 8004346:	2300      	movs	r3, #0
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	f002 0203 	and.w	r2, r2, #3
 800434e:	0092      	lsls	r2, r2, #2
 8004350:	4093      	lsls	r3, r2
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004358:	4935      	ldr	r1, [pc, #212]	@ (8004430 <HAL_GPIO_Init+0x2ec>)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	3302      	adds	r3, #2
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004366:	4b38      	ldr	r3, [pc, #224]	@ (8004448 <HAL_GPIO_Init+0x304>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800438a:	4a2f      	ldr	r2, [pc, #188]	@ (8004448 <HAL_GPIO_Init+0x304>)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004390:	4b2d      	ldr	r3, [pc, #180]	@ (8004448 <HAL_GPIO_Init+0x304>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043b4:	4a24      	ldr	r2, [pc, #144]	@ (8004448 <HAL_GPIO_Init+0x304>)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043ba:	4b23      	ldr	r3, [pc, #140]	@ (8004448 <HAL_GPIO_Init+0x304>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043de:	4a1a      	ldr	r2, [pc, #104]	@ (8004448 <HAL_GPIO_Init+0x304>)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e4:	4b18      	ldr	r3, [pc, #96]	@ (8004448 <HAL_GPIO_Init+0x304>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004408:	4a0f      	ldr	r2, [pc, #60]	@ (8004448 <HAL_GPIO_Init+0x304>)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3301      	adds	r3, #1
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b0f      	cmp	r3, #15
 8004418:	f67f aea2 	bls.w	8004160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800441c:	bf00      	nop
 800441e:	bf00      	nop
 8004420:	3724      	adds	r7, #36	@ 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800
 8004430:	40013800 	.word	0x40013800
 8004434:	40020000 	.word	0x40020000
 8004438:	40020400 	.word	0x40020400
 800443c:	40020800 	.word	0x40020800
 8004440:	40020c00 	.word	0x40020c00
 8004444:	40021000 	.word	0x40021000
 8004448:	40013c00 	.word	0x40013c00

0800444c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	e001      	b.n	800446e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	807b      	strh	r3, [r7, #2]
 8004488:	4613      	mov	r3, r2
 800448a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800448c:	787b      	ldrb	r3, [r7, #1]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004492:	887a      	ldrh	r2, [r7, #2]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004498:	e003      	b.n	80044a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800449a:	887b      	ldrh	r3, [r7, #2]
 800449c:	041a      	lsls	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	619a      	str	r2, [r3, #24]
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e267      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d075      	beq.n	80045ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ce:	4b88      	ldr	r3, [pc, #544]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d00c      	beq.n	80044f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044da:	4b85      	ldr	r3, [pc, #532]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d112      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e6:	4b82      	ldr	r3, [pc, #520]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f2:	d10b      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	4b7e      	ldr	r3, [pc, #504]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d05b      	beq.n	80045b8 <HAL_RCC_OscConfig+0x108>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d157      	bne.n	80045b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e242      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004514:	d106      	bne.n	8004524 <HAL_RCC_OscConfig+0x74>
 8004516:	4b76      	ldr	r3, [pc, #472]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a75      	ldr	r2, [pc, #468]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x98>
 800452e:	4b70      	ldr	r3, [pc, #448]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6f      	ldr	r2, [pc, #444]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b6d      	ldr	r3, [pc, #436]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a6c      	ldr	r2, [pc, #432]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004548:	4b69      	ldr	r3, [pc, #420]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a68      	ldr	r2, [pc, #416]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b66      	ldr	r3, [pc, #408]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a65      	ldr	r2, [pc, #404]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800455e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fe fd8c 	bl	8003084 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004570:	f7fe fd88 	bl	8003084 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e207      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b5b      	ldr	r3, [pc, #364]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0xc0>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fe fd78 	bl	8003084 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004598:	f7fe fd74 	bl	8003084 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	@ 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e1f3      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	4b51      	ldr	r3, [pc, #324]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0xe8>
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d063      	beq.n	800468e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045c6:	4b4a      	ldr	r3, [pc, #296]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d2:	4b47      	ldr	r3, [pc, #284]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d11c      	bne.n	8004618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045de:	4b44      	ldr	r3, [pc, #272]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	4b41      	ldr	r3, [pc, #260]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_OscConfig+0x152>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e1c7      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b3b      	ldr	r3, [pc, #236]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4937      	ldr	r1, [pc, #220]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	e03a      	b.n	800468e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004620:	4b34      	ldr	r3, [pc, #208]	@ (80046f4 <HAL_RCC_OscConfig+0x244>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7fe fd2d 	bl	8003084 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462e:	f7fe fd29 	bl	8003084 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e1a8      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	4b2b      	ldr	r3, [pc, #172]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4925      	ldr	r1, [pc, #148]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	e015      	b.n	800468e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004662:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <HAL_RCC_OscConfig+0x244>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fe fd0c 	bl	8003084 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004670:	f7fe fd08 	bl	8003084 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e187      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	4b1b      	ldr	r3, [pc, #108]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d036      	beq.n	8004708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a2:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <HAL_RCC_OscConfig+0x248>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fe fcec 	bl	8003084 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fe fce8 	bl	8003084 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e167      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80046c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x200>
 80046ce:	e01b      	b.n	8004708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d0:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <HAL_RCC_OscConfig+0x248>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d6:	f7fe fcd5 	bl	8003084 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046dc:	e00e      	b.n	80046fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046de:	f7fe fcd1 	bl	8003084 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d907      	bls.n	80046fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e150      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
 80046f0:	40023800 	.word	0x40023800
 80046f4:	42470000 	.word	0x42470000
 80046f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046fc:	4b88      	ldr	r3, [pc, #544]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1ea      	bne.n	80046de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8097 	beq.w	8004844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471a:	4b81      	ldr	r3, [pc, #516]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10f      	bne.n	8004746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	4b7d      	ldr	r3, [pc, #500]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	4a7c      	ldr	r2, [pc, #496]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004734:	6413      	str	r3, [r2, #64]	@ 0x40
 8004736:	4b7a      	ldr	r3, [pc, #488]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004746:	4b77      	ldr	r3, [pc, #476]	@ (8004924 <HAL_RCC_OscConfig+0x474>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d118      	bne.n	8004784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004752:	4b74      	ldr	r3, [pc, #464]	@ (8004924 <HAL_RCC_OscConfig+0x474>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a73      	ldr	r2, [pc, #460]	@ (8004924 <HAL_RCC_OscConfig+0x474>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800475c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475e:	f7fe fc91 	bl	8003084 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fe fc8d 	bl	8003084 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e10c      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	4b6a      	ldr	r3, [pc, #424]	@ (8004924 <HAL_RCC_OscConfig+0x474>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x2ea>
 800478c:	4b64      	ldr	r3, [pc, #400]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004790:	4a63      	ldr	r2, [pc, #396]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6713      	str	r3, [r2, #112]	@ 0x70
 8004798:	e01c      	b.n	80047d4 <HAL_RCC_OscConfig+0x324>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0x30c>
 80047a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ba:	e00b      	b.n	80047d4 <HAL_RCC_OscConfig+0x324>
 80047bc:	4b58      	ldr	r3, [pc, #352]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c0:	4a57      	ldr	r2, [pc, #348]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c8:	4b55      	ldr	r3, [pc, #340]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047cc:	4a54      	ldr	r2, [pc, #336]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047ce:	f023 0304 	bic.w	r3, r3, #4
 80047d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d015      	beq.n	8004808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fe fc52 	bl	8003084 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fe fc4e 	bl	8003084 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e0cb      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fa:	4b49      	ldr	r3, [pc, #292]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ee      	beq.n	80047e4 <HAL_RCC_OscConfig+0x334>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004808:	f7fe fc3c 	bl	8003084 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fe fc38 	bl	8003084 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e0b5      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004826:	4b3e      	ldr	r3, [pc, #248]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ee      	bne.n	8004810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004838:	4b39      	ldr	r3, [pc, #228]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	4a38      	ldr	r2, [pc, #224]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800483e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004842:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a1 	beq.w	8004990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800484e:	4b34      	ldr	r3, [pc, #208]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b08      	cmp	r3, #8
 8004858:	d05c      	beq.n	8004914 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d141      	bne.n	80048e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004862:	4b31      	ldr	r3, [pc, #196]	@ (8004928 <HAL_RCC_OscConfig+0x478>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fe fc0c 	bl	8003084 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004870:	f7fe fc08 	bl	8003084 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e087      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004882:	4b27      	ldr	r3, [pc, #156]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69da      	ldr	r2, [r3, #28]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	019b      	lsls	r3, r3, #6
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	3b01      	subs	r3, #1
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	061b      	lsls	r3, r3, #24
 80048b2:	491b      	ldr	r1, [pc, #108]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_RCC_OscConfig+0x478>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fe fbe1 	bl	8003084 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fe fbdd 	bl	8003084 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e05c      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d8:	4b11      	ldr	r3, [pc, #68]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x416>
 80048e4:	e054      	b.n	8004990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e6:	4b10      	ldr	r3, [pc, #64]	@ (8004928 <HAL_RCC_OscConfig+0x478>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fe fbca 	bl	8003084 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f4:	f7fe fbc6 	bl	8003084 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e045      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004906:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x444>
 8004912:	e03d      	b.n	8004990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d107      	bne.n	800492c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e038      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
 8004920:	40023800 	.word	0x40023800
 8004924:	40007000 	.word	0x40007000
 8004928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800492c:	4b1b      	ldr	r3, [pc, #108]	@ (800499c <HAL_RCC_OscConfig+0x4ec>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d028      	beq.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d121      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d11a      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800495c:	4013      	ands	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004964:	4293      	cmp	r3, r2
 8004966:	d111      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	3b01      	subs	r3, #1
 8004976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d107      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800

080049a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0cc      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049b4:	4b68      	ldr	r3, [pc, #416]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d90c      	bls.n	80049dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b65      	ldr	r3, [pc, #404]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b63      	ldr	r3, [pc, #396]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b8      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f4:	4b59      	ldr	r3, [pc, #356]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a58      	ldr	r2, [pc, #352]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a0c:	4b53      	ldr	r3, [pc, #332]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a52      	ldr	r2, [pc, #328]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a18:	4b50      	ldr	r3, [pc, #320]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	494d      	ldr	r1, [pc, #308]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d044      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	4b47      	ldr	r3, [pc, #284]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d119      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e06f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e067      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a7e:	4b37      	ldr	r3, [pc, #220]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f023 0203 	bic.w	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4934      	ldr	r1, [pc, #208]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a90:	f7fe faf8 	bl	8003084 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fe faf4 	bl	8003084 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e04f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	4b2b      	ldr	r3, [pc, #172]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 020c 	and.w	r2, r3, #12
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d1eb      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b25      	ldr	r3, [pc, #148]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d20c      	bcs.n	8004ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b22      	ldr	r3, [pc, #136]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b20      	ldr	r3, [pc, #128]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e032      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af4:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4916      	ldr	r1, [pc, #88]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b12:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	490e      	ldr	r1, [pc, #56]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b26:	f000 f821 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	490a      	ldr	r1, [pc, #40]	@ (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fa58 	bl	8002ffc <HAL_InitTick>

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023c00 	.word	0x40023c00
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	0800aedc 	.word	0x0800aedc
 8004b64:	2000d3f8 	.word	0x2000d3f8
 8004b68:	2000d3fc 	.word	0x2000d3fc

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b090      	sub	sp, #64	@ 0x40
 8004b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b78:	2300      	movs	r3, #0
 8004b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b84:	4b59      	ldr	r3, [pc, #356]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x180>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x40>
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	f200 80a1 	bhi.w	8004cd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b9e:	e09b      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b53      	ldr	r3, [pc, #332]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004ba4:	e09b      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba6:	4b53      	ldr	r3, [pc, #332]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004baa:	e098      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bac:	4b4f      	ldr	r3, [pc, #316]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x180>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d028      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x180>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	623b      	str	r3, [r7, #32]
 8004bcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4b47      	ldr	r3, [pc, #284]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bd8:	fb03 f201 	mul.w	r2, r3, r1
 8004bdc:	2300      	movs	r3, #0
 8004bde:	fb00 f303 	mul.w	r3, r0, r3
 8004be2:	4413      	add	r3, r2
 8004be4:	4a43      	ldr	r2, [pc, #268]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004be6:	fba0 1202 	umull	r1, r2, r0, r2
 8004bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bec:	460a      	mov	r2, r1
 8004bee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf2:	4413      	add	r3, r2
 8004bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	61fa      	str	r2, [r7, #28]
 8004bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c06:	f7fc f847 	bl	8000c98 <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4613      	mov	r3, r2
 8004c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c12:	e053      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c14:	4b35      	ldr	r3, [pc, #212]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x180>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	099b      	lsrs	r3, r3, #6
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	617a      	str	r2, [r7, #20]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c26:	f04f 0b00 	mov.w	fp, #0
 8004c2a:	4652      	mov	r2, sl
 8004c2c:	465b      	mov	r3, fp
 8004c2e:	f04f 0000 	mov.w	r0, #0
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	0159      	lsls	r1, r3, #5
 8004c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c3c:	0150      	lsls	r0, r2, #5
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	ebb2 080a 	subs.w	r8, r2, sl
 8004c46:	eb63 090b 	sbc.w	r9, r3, fp
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c5e:	ebb2 0408 	subs.w	r4, r2, r8
 8004c62:	eb63 0509 	sbc.w	r5, r3, r9
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	00eb      	lsls	r3, r5, #3
 8004c70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c74:	00e2      	lsls	r2, r4, #3
 8004c76:	4614      	mov	r4, r2
 8004c78:	461d      	mov	r5, r3
 8004c7a:	eb14 030a 	adds.w	r3, r4, sl
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	eb45 030b 	adc.w	r3, r5, fp
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c92:	4629      	mov	r1, r5
 8004c94:	028b      	lsls	r3, r1, #10
 8004c96:	4621      	mov	r1, r4
 8004c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	028a      	lsls	r2, r1, #10
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	60fa      	str	r2, [r7, #12]
 8004cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb0:	f7fb fff2 	bl	8000c98 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4613      	mov	r3, r2
 8004cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x180>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004ccc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cd6:	e002      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cd8:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3740      	adds	r7, #64	@ 0x40
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	00f42400 	.word	0x00f42400
 8004cf4:	017d7840 	.word	0x017d7840

08004cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d105      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d035      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d20:	4b67      	ldr	r3, [pc, #412]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d26:	f7fe f9ad 	bl	8003084 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d2e:	f7fe f9a9 	bl	8003084 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0ba      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d40:	4b60      	ldr	r3, [pc, #384]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	019a      	lsls	r2, r3, #6
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	071b      	lsls	r3, r3, #28
 8004d58:	495a      	ldr	r1, [pc, #360]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d60:	4b57      	ldr	r3, [pc, #348]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d66:	f7fe f98d 	bl	8003084 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d6e:	f7fe f989 	bl	8003084 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e09a      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d80:	4b50      	ldr	r3, [pc, #320]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8083 	beq.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	4b49      	ldr	r3, [pc, #292]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	4a48      	ldr	r2, [pc, #288]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004daa:	4b46      	ldr	r3, [pc, #280]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004db6:	4b44      	ldr	r3, [pc, #272]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a43      	ldr	r2, [pc, #268]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dc2:	f7fe f95f 	bl	8003084 <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dca:	f7fe f95b 	bl	8003084 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e06c      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004de8:	4b36      	ldr	r3, [pc, #216]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d02f      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d028      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e06:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e10:	4b2e      	ldr	r3, [pc, #184]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e16:	4b2d      	ldr	r3, [pc, #180]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e1c:	4a29      	ldr	r2, [pc, #164]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e22:	4b28      	ldr	r3, [pc, #160]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d114      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e2e:	f7fe f929 	bl	8003084 <HAL_GetTick>
 8004e32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e34:	e00a      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7fe f925 	bl	8003084 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e034      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0ee      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e64:	d10d      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e66:	4b17      	ldr	r3, [pc, #92]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e7a:	4912      	ldr	r1, [pc, #72]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	608b      	str	r3, [r1, #8]
 8004e80:	e005      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e88:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e8c:	6093      	str	r3, [r2, #8]
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9a:	490a      	ldr	r1, [pc, #40]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	7c1a      	ldrb	r2, [r3, #16]
 8004eb0:	4b07      	ldr	r3, [pc, #28]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eb2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	42470068 	.word	0x42470068
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40007000 	.word	0x40007000
 8004ecc:	42470e40 	.word	0x42470e40
 8004ed0:	424711e0 	.word	0x424711e0

08004ed4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e073      	b.n	8004fd2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	7f5b      	ldrb	r3, [r3, #29]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fd fd8e 	bl	8002a1c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d055      	beq.n	8004fc0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	22ca      	movs	r2, #202	@ 0xca
 8004f1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2253      	movs	r2, #83	@ 0x53
 8004f22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fa49 	bl	80053bc <RTC_EnterInitMode>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d12c      	bne.n	8004f8e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6899      	ldr	r1, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68d2      	ldr	r2, [r2, #12]
 8004f6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6919      	ldr	r1, [r3, #16]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	041a      	lsls	r2, r3, #16
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fa50 	bl	800542a <RTC_ExitInitMode>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d110      	bne.n	8004fb6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fa2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	22ff      	movs	r2, #255	@ 0xff
 8004fbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fbe:	e001      	b.n	8004fc4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fda:	b590      	push	{r4, r7, lr}
 8004fdc:	b087      	sub	sp, #28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	7f1b      	ldrb	r3, [r3, #28]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RTC_SetTime+0x1c>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e087      	b.n	8005106 <HAL_RTC_SetTime+0x12c>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2202      	movs	r2, #2
 8005000:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d126      	bne.n	8005056 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2200      	movs	r2, #0
 800501a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fa27 	bl	8005474 <RTC_ByteToBcd2>
 8005026:	4603      	mov	r3, r0
 8005028:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	785b      	ldrb	r3, [r3, #1]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fa20 	bl	8005474 <RTC_ByteToBcd2>
 8005034:	4603      	mov	r3, r0
 8005036:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005038:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	789b      	ldrb	r3, [r3, #2]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fa18 	bl	8005474 <RTC_ByteToBcd2>
 8005044:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005046:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	78db      	ldrb	r3, [r3, #3]
 800504e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e018      	b.n	8005088 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2200      	movs	r2, #0
 8005068:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005076:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800507c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	78db      	ldrb	r3, [r3, #3]
 8005082:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	22ca      	movs	r2, #202	@ 0xca
 800508e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2253      	movs	r2, #83	@ 0x53
 8005096:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f98f 	bl	80053bc <RTC_EnterInitMode>
 800509e:	4603      	mov	r3, r0
 80050a0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80050a2:	7cfb      	ldrb	r3, [r7, #19]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d120      	bne.n	80050ea <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80050b2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80050b6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6899      	ldr	r1, [r3, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f9a2 	bl	800542a <RTC_ExitInitMode>
 80050e6:	4603      	mov	r3, r0
 80050e8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	22ff      	movs	r2, #255	@ 0xff
 80050fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]

  return status;
 8005104:	7cfb      	ldrb	r3, [r7, #19]
}
 8005106:	4618      	mov	r0, r3
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd90      	pop	{r4, r7, pc}

0800510e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b086      	sub	sp, #24
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005140:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005144:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	0c1b      	lsrs	r3, r3, #16
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005150:	b2da      	uxtb	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800516e:	b2da      	uxtb	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	0d9b      	lsrs	r3, r3, #22
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	b2da      	uxtb	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d11a      	bne.n	80051c0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f98e 	bl	80054b0 <RTC_Bcd2ToByte>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 f985 	bl	80054b0 <RTC_Bcd2ToByte>
 80051a6:	4603      	mov	r3, r0
 80051a8:	461a      	mov	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	789b      	ldrb	r3, [r3, #2]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f97c 	bl	80054b0 <RTC_Bcd2ToByte>
 80051b8:	4603      	mov	r3, r0
 80051ba:	461a      	mov	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051ca:	b590      	push	{r4, r7, lr}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	7f1b      	ldrb	r3, [r3, #28]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_RTC_SetDate+0x1c>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e071      	b.n	80052ca <HAL_RTC_SetDate+0x100>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2202      	movs	r2, #2
 80051f0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10e      	bne.n	8005216 <HAL_RTC_SetDate+0x4c>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	f023 0310 	bic.w	r3, r3, #16
 800520c:	b2db      	uxtb	r3, r3
 800520e:	330a      	adds	r3, #10
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d11c      	bne.n	8005256 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	78db      	ldrb	r3, [r3, #3]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f927 	bl	8005474 <RTC_ByteToBcd2>
 8005226:	4603      	mov	r3, r0
 8005228:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f920 	bl	8005474 <RTC_ByteToBcd2>
 8005234:	4603      	mov	r3, r0
 8005236:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005238:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	789b      	ldrb	r3, [r3, #2]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f918 	bl	8005474 <RTC_ByteToBcd2>
 8005244:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005246:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e00e      	b.n	8005274 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	78db      	ldrb	r3, [r3, #3]
 800525a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005262:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005268:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	22ca      	movs	r2, #202	@ 0xca
 800527a:	625a      	str	r2, [r3, #36]	@ 0x24
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2253      	movs	r2, #83	@ 0x53
 8005282:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f899 	bl	80053bc <RTC_EnterInitMode>
 800528a:	4603      	mov	r3, r0
 800528c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800528e:	7cfb      	ldrb	r3, [r7, #19]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10c      	bne.n	80052ae <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800529e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80052a2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f8c0 	bl	800542a <RTC_ExitInitMode>
 80052aa:	4603      	mov	r3, r0
 80052ac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80052ae:	7cfb      	ldrb	r3, [r7, #19]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	22ff      	movs	r2, #255	@ 0xff
 80052c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]

  return status;
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd90      	pop	{r4, r7, pc}

080052d2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b086      	sub	sp, #24
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80052ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80052f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	b2da      	uxtb	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005314:	b2da      	uxtb	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	0b5b      	lsrs	r3, r3, #13
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d11a      	bne.n	8005366 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	78db      	ldrb	r3, [r3, #3]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 f8bb 	bl	80054b0 <RTC_Bcd2ToByte>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f8b2 	bl	80054b0 <RTC_Bcd2ToByte>
 800534c:	4603      	mov	r3, r0
 800534e:	461a      	mov	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	789b      	ldrb	r3, [r3, #2]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 f8a9 	bl	80054b0 <RTC_Bcd2ToByte>
 800535e:	4603      	mov	r3, r0
 8005360:	461a      	mov	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0d      	ldr	r2, [pc, #52]	@ (80053b8 <HAL_RTC_WaitForSynchro+0x48>)
 8005382:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005384:	f7fd fe7e 	bl	8003084 <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800538a:	e009      	b.n	80053a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800538c:	f7fd fe7a 	bl	8003084 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800539a:	d901      	bls.n	80053a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e007      	b.n	80053b0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0ee      	beq.n	800538c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	00013f5f 	.word	0x00013f5f

080053bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d122      	bne.n	8005420 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053ea:	f7fd fe4b 	bl	8003084 <HAL_GetTick>
 80053ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80053f0:	e00c      	b.n	800540c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053f2:	f7fd fe47 	bl	8003084 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005400:	d904      	bls.n	800540c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2204      	movs	r2, #4
 8005406:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <RTC_EnterInitMode+0x64>
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d1e8      	bne.n	80053f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005444:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff8b 	bl	8005370 <HAL_RTC_WaitForSynchro>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2204      	movs	r2, #4
 8005464:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800546a:	7bfb      	ldrb	r3, [r7, #15]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005482:	e005      	b.n	8005490 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	3b0a      	subs	r3, #10
 800548e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b09      	cmp	r3, #9
 8005494:	d8f6      	bhi.n	8005484 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	b2da      	uxtb	r2, r3
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	b2db      	uxtb	r3, r3
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	4413      	add	r3, r2
 80054de:	b2db      	uxtb	r3, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e07b      	b.n	80055f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	2b00      	cmp	r3, #0
 8005504:	d108      	bne.n	8005518 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800550e:	d009      	beq.n	8005524 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	61da      	str	r2, [r3, #28]
 8005516:	e005      	b.n	8005524 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fd fa98 	bl	8002a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800555a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a8:	ea42 0103 	orr.w	r1, r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	0c1b      	lsrs	r3, r3, #16
 80055c2:	f003 0104 	and.w	r1, r3, #4
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	f003 0210 	and.w	r2, r3, #16
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_SPI_Transmit_DMA+0x20>
 800561c:	2302      	movs	r3, #2
 800561e:	e097      	b.n	8005750 <HAL_SPI_Transmit_DMA+0x150>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	d002      	beq.n	800563a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005634:	2302      	movs	r3, #2
 8005636:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005638:	e085      	b.n	8005746 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_SPI_Transmit_DMA+0x46>
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	75fb      	strb	r3, [r7, #23]
    goto error;
 800564a:	e07c      	b.n	8005746 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2203      	movs	r2, #3
 8005650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	88fa      	ldrh	r2, [r7, #6]
 800566a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005692:	d10f      	bne.n	80056b4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b8:	4a27      	ldr	r2, [pc, #156]	@ (8005758 <HAL_SPI_Transmit_DMA+0x158>)
 80056ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056c0:	4a26      	ldr	r2, [pc, #152]	@ (800575c <HAL_SPI_Transmit_DMA+0x15c>)
 80056c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056c8:	4a25      	ldr	r2, [pc, #148]	@ (8005760 <HAL_SPI_Transmit_DMA+0x160>)
 80056ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d0:	2200      	movs	r2, #0
 80056d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	4619      	mov	r1, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80056ec:	f7fe fa68 	bl	8003bc0 <HAL_DMA_Start_IT>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fa:	f043 0210 	orr.w	r2, r3, #16
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005706:	e01e      	b.n	8005746 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005712:	2b40      	cmp	r3, #64	@ 0x40
 8005714:	d007      	beq.n	8005726 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005724:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0220 	orr.w	r2, r2, #32
 8005734:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0202 	orr.w	r2, r2, #2
 8005744:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800574e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	08005865 	.word	0x08005865
 800575c:	080057bd 	.word	0x080057bd
 8005760:	08005881 	.word	0x08005881

08005764 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057ae:	b2db      	uxtb	r3, r3
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ca:	f7fd fc5b 	bl	8003084 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057de:	d03b      	beq.n	8005858 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0220 	bic.w	r2, r2, #32
 80057ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0202 	bic.w	r2, r2, #2
 80057fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	2164      	movs	r1, #100	@ 0x64
 8005804:	6978      	ldr	r0, [r7, #20]
 8005806:	f000 f8e3 	bl	80059d0 <SPI_EndRxTxTransaction>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005814:	f043 0220 	orr.w	r2, r3, #32
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005850:	6978      	ldr	r0, [r7, #20]
 8005852:	f7ff ff9b 	bl	800578c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005856:	e002      	b.n	800585e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005858:	6978      	ldr	r0, [r7, #20]
 800585a:	f7ff ff83 	bl	8005764 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff ff80 	bl	8005778 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0203 	bic.w	r2, r2, #3
 800589c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a2:	f043 0210 	orr.w	r2, r3, #16
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7ff ff6a 	bl	800578c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058d0:	f7fd fbd8 	bl	8003084 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	4413      	add	r3, r2
 80058de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058e0:	f7fd fbd0 	bl	8003084 <HAL_GetTick>
 80058e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058e6:	4b39      	ldr	r3, [pc, #228]	@ (80059cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	015b      	lsls	r3, r3, #5
 80058ec:	0d1b      	lsrs	r3, r3, #20
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	fb02 f303 	mul.w	r3, r2, r3
 80058f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058f6:	e054      	b.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d050      	beq.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005900:	f7fd fbc0 	bl	8003084 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	429a      	cmp	r2, r3
 800590e:	d902      	bls.n	8005916 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d13d      	bne.n	8005992 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800592e:	d111      	bne.n	8005954 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005938:	d004      	beq.n	8005944 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005942:	d107      	bne.n	8005954 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800595c:	d10f      	bne.n	800597e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800597c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e017      	b.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	3b01      	subs	r3, #1
 80059a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4013      	ands	r3, r2
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	bf0c      	ite	eq
 80059b2:	2301      	moveq	r3, #1
 80059b4:	2300      	movne	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d19b      	bne.n	80058f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	2000d3f8 	.word	0x2000d3f8

080059d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2201      	movs	r2, #1
 80059e4:	2102      	movs	r1, #2
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff ff6a 	bl	80058c0 <SPI_WaitFlagStateUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e032      	b.n	8005a68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a02:	4b1b      	ldr	r3, [pc, #108]	@ (8005a70 <SPI_EndRxTxTransaction+0xa0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <SPI_EndRxTxTransaction+0xa4>)
 8005a08:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0c:	0d5b      	lsrs	r3, r3, #21
 8005a0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a12:	fb02 f303 	mul.w	r3, r2, r3
 8005a16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a20:	d112      	bne.n	8005a48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2180      	movs	r1, #128	@ 0x80
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff ff47 	bl	80058c0 <SPI_WaitFlagStateUntilTimeout>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d016      	beq.n	8005a66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e00f      	b.n	8005a68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5e:	2b80      	cmp	r3, #128	@ 0x80
 8005a60:	d0f2      	beq.n	8005a48 <SPI_EndRxTxTransaction+0x78>
 8005a62:	e000      	b.n	8005a66 <SPI_EndRxTxTransaction+0x96>
        break;
 8005a64:	bf00      	nop
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	2000d3f8 	.word	0x2000d3f8
 8005a74:	165e9f81 	.word	0x165e9f81

08005a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e041      	b.n	8005b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fd f896 	bl	8002bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f000 fac0 	bl	800603c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e041      	b.n	8005bac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f839 	bl	8005bb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f000 fa71 	bl	800603c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <HAL_TIM_PWM_Start+0x24>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	bf14      	ite	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	2300      	moveq	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	e022      	b.n	8005c32 <HAL_TIM_PWM_Start+0x6a>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d109      	bne.n	8005c06 <HAL_TIM_PWM_Start+0x3e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	bf14      	ite	ne
 8005bfe:	2301      	movne	r3, #1
 8005c00:	2300      	moveq	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	e015      	b.n	8005c32 <HAL_TIM_PWM_Start+0x6a>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d109      	bne.n	8005c20 <HAL_TIM_PWM_Start+0x58>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	bf14      	ite	ne
 8005c18:	2301      	movne	r3, #1
 8005c1a:	2300      	moveq	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e008      	b.n	8005c32 <HAL_TIM_PWM_Start+0x6a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	bf14      	ite	ne
 8005c2c:	2301      	movne	r3, #1
 8005c2e:	2300      	moveq	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e068      	b.n	8005d0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x82>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c48:	e013      	b.n	8005c72 <HAL_TIM_PWM_Start+0xaa>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0x92>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c58:	e00b      	b.n	8005c72 <HAL_TIM_PWM_Start+0xaa>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Start+0xa2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c68:	e003      	b.n	8005c72 <HAL_TIM_PWM_Start+0xaa>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2201      	movs	r2, #1
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fc90 	bl	80065a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a23      	ldr	r2, [pc, #140]	@ (8005d14 <HAL_TIM_PWM_Start+0x14c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d107      	bne.n	8005c9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8005d14 <HAL_TIM_PWM_Start+0x14c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d018      	beq.n	8005cd6 <HAL_TIM_PWM_Start+0x10e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cac:	d013      	beq.n	8005cd6 <HAL_TIM_PWM_Start+0x10e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a19      	ldr	r2, [pc, #100]	@ (8005d18 <HAL_TIM_PWM_Start+0x150>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00e      	beq.n	8005cd6 <HAL_TIM_PWM_Start+0x10e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a17      	ldr	r2, [pc, #92]	@ (8005d1c <HAL_TIM_PWM_Start+0x154>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d009      	beq.n	8005cd6 <HAL_TIM_PWM_Start+0x10e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a16      	ldr	r2, [pc, #88]	@ (8005d20 <HAL_TIM_PWM_Start+0x158>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d004      	beq.n	8005cd6 <HAL_TIM_PWM_Start+0x10e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a14      	ldr	r2, [pc, #80]	@ (8005d24 <HAL_TIM_PWM_Start+0x15c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d111      	bne.n	8005cfa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b06      	cmp	r3, #6
 8005ce6:	d010      	beq.n	8005d0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf8:	e007      	b.n	8005d0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40000c00 	.word	0x40000c00
 8005d24:	40014000 	.word	0x40014000

08005d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e0ae      	b.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	f200 809f 	bhi.w	8005e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d56:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005e95 	.word	0x08005e95
 8005d64:	08005e95 	.word	0x08005e95
 8005d68:	08005e95 	.word	0x08005e95
 8005d6c:	08005dd1 	.word	0x08005dd1
 8005d70:	08005e95 	.word	0x08005e95
 8005d74:	08005e95 	.word	0x08005e95
 8005d78:	08005e95 	.word	0x08005e95
 8005d7c:	08005e13 	.word	0x08005e13
 8005d80:	08005e95 	.word	0x08005e95
 8005d84:	08005e95 	.word	0x08005e95
 8005d88:	08005e95 	.word	0x08005e95
 8005d8c:	08005e53 	.word	0x08005e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f9dc 	bl	8006154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0204 	bic.w	r2, r2, #4
 8005dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	619a      	str	r2, [r3, #24]
      break;
 8005dce:	e064      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fa22 	bl	8006220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6999      	ldr	r1, [r3, #24]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	021a      	lsls	r2, r3, #8
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	619a      	str	r2, [r3, #24]
      break;
 8005e10:	e043      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fa6d 	bl	80062f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0208 	orr.w	r2, r2, #8
 8005e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0204 	bic.w	r2, r2, #4
 8005e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69d9      	ldr	r1, [r3, #28]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	61da      	str	r2, [r3, #28]
      break;
 8005e50:	e023      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fab7 	bl	80063cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69d9      	ldr	r1, [r3, #28]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	021a      	lsls	r2, r3, #8
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	61da      	str	r2, [r3, #28]
      break;
 8005e92:	e002      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
      break;
 8005e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e0b4      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x186>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f00:	d03e      	beq.n	8005f80 <HAL_TIM_ConfigClockSource+0xd4>
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f06:	f200 8087 	bhi.w	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f0e:	f000 8086 	beq.w	800601e <HAL_TIM_ConfigClockSource+0x172>
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f16:	d87f      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f18:	2b70      	cmp	r3, #112	@ 0x70
 8005f1a:	d01a      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0xa6>
 8005f1c:	2b70      	cmp	r3, #112	@ 0x70
 8005f1e:	d87b      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b60      	cmp	r3, #96	@ 0x60
 8005f22:	d050      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8005f24:	2b60      	cmp	r3, #96	@ 0x60
 8005f26:	d877      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b50      	cmp	r3, #80	@ 0x50
 8005f2a:	d03c      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8005f2c:	2b50      	cmp	r3, #80	@ 0x50
 8005f2e:	d873      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f30:	2b40      	cmp	r3, #64	@ 0x40
 8005f32:	d058      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8005f34:	2b40      	cmp	r3, #64	@ 0x40
 8005f36:	d86f      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f38:	2b30      	cmp	r3, #48	@ 0x30
 8005f3a:	d064      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f3c:	2b30      	cmp	r3, #48	@ 0x30
 8005f3e:	d86b      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d060      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d867      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d05c      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d05a      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f50:	e062      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f62:	f000 fafd 	bl	8006560 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	609a      	str	r2, [r3, #8]
      break;
 8005f7e:	e04f      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f90:	f000 fae6 	bl	8006560 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fa2:	609a      	str	r2, [r3, #8]
      break;
 8005fa4:	e03c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f000 fa5a 	bl	800646c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2150      	movs	r1, #80	@ 0x50
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fab3 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8005fc4:	e02c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f000 fa79 	bl	80064ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2160      	movs	r1, #96	@ 0x60
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 faa3 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8005fe4:	e01c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f000 fa3a 	bl	800646c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2140      	movs	r1, #64	@ 0x40
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fa93 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8006004:	e00c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f000 fa8a 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8006016:	e003      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
      break;
 800601c:	e000      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800601e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a3a      	ldr	r2, [pc, #232]	@ (8006138 <TIM_Base_SetConfig+0xfc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00f      	beq.n	8006074 <TIM_Base_SetConfig+0x38>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605a:	d00b      	beq.n	8006074 <TIM_Base_SetConfig+0x38>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a37      	ldr	r2, [pc, #220]	@ (800613c <TIM_Base_SetConfig+0x100>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_Base_SetConfig+0x38>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a36      	ldr	r2, [pc, #216]	@ (8006140 <TIM_Base_SetConfig+0x104>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_Base_SetConfig+0x38>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a35      	ldr	r2, [pc, #212]	@ (8006144 <TIM_Base_SetConfig+0x108>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d108      	bne.n	8006086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2b      	ldr	r2, [pc, #172]	@ (8006138 <TIM_Base_SetConfig+0xfc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01b      	beq.n	80060c6 <TIM_Base_SetConfig+0x8a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006094:	d017      	beq.n	80060c6 <TIM_Base_SetConfig+0x8a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a28      	ldr	r2, [pc, #160]	@ (800613c <TIM_Base_SetConfig+0x100>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d013      	beq.n	80060c6 <TIM_Base_SetConfig+0x8a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a27      	ldr	r2, [pc, #156]	@ (8006140 <TIM_Base_SetConfig+0x104>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00f      	beq.n	80060c6 <TIM_Base_SetConfig+0x8a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a26      	ldr	r2, [pc, #152]	@ (8006144 <TIM_Base_SetConfig+0x108>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_Base_SetConfig+0x8a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a25      	ldr	r2, [pc, #148]	@ (8006148 <TIM_Base_SetConfig+0x10c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_Base_SetConfig+0x8a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a24      	ldr	r2, [pc, #144]	@ (800614c <TIM_Base_SetConfig+0x110>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_Base_SetConfig+0x8a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a23      	ldr	r2, [pc, #140]	@ (8006150 <TIM_Base_SetConfig+0x114>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d108      	bne.n	80060d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006138 <TIM_Base_SetConfig+0xfc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d103      	bne.n	800610c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b01      	cmp	r3, #1
 800611c:	d105      	bne.n	800612a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f023 0201 	bic.w	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]
  }
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40014000 	.word	0x40014000
 800614c:	40014400 	.word	0x40014400
 8006150:	40014800 	.word	0x40014800

08006154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f023 0201 	bic.w	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f023 0302 	bic.w	r3, r3, #2
 800619c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a1c      	ldr	r2, [pc, #112]	@ (800621c <TIM_OC1_SetConfig+0xc8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10c      	bne.n	80061ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f023 0308 	bic.w	r3, r3, #8
 80061b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f023 0304 	bic.w	r3, r3, #4
 80061c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a13      	ldr	r2, [pc, #76]	@ (800621c <TIM_OC1_SetConfig+0xc8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d111      	bne.n	80061f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	621a      	str	r2, [r3, #32]
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	40010000 	.word	0x40010000

08006220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f023 0210 	bic.w	r2, r3, #16
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0320 	bic.w	r3, r3, #32
 800626a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a1e      	ldr	r2, [pc, #120]	@ (80062f4 <TIM_OC2_SetConfig+0xd4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10d      	bne.n	800629c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800629a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a15      	ldr	r2, [pc, #84]	@ (80062f4 <TIM_OC2_SetConfig+0xd4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d113      	bne.n	80062cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000

080062f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	021b      	lsls	r3, r3, #8
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a1d      	ldr	r2, [pc, #116]	@ (80063c8 <TIM_OC3_SetConfig+0xd0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10d      	bne.n	8006372 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800635c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a14      	ldr	r2, [pc, #80]	@ (80063c8 <TIM_OC3_SetConfig+0xd0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d113      	bne.n	80063a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	621a      	str	r2, [r3, #32]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40010000 	.word	0x40010000

080063cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	031b      	lsls	r3, r3, #12
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a10      	ldr	r2, [pc, #64]	@ (8006468 <TIM_OC4_SetConfig+0x9c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d109      	bne.n	8006440 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000

0800646c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f023 0201 	bic.w	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 030a 	bic.w	r3, r3, #10
 80064a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	621a      	str	r2, [r3, #32]
}
 80064be:	bf00      	nop
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b087      	sub	sp, #28
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f023 0210 	bic.w	r2, r3, #16
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	031b      	lsls	r3, r3, #12
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006506:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	621a      	str	r2, [r3, #32]
}
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	f043 0307 	orr.w	r3, r3, #7
 800654c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	609a      	str	r2, [r3, #8]
}
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800657a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	021a      	lsls	r2, r3, #8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	431a      	orrs	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4313      	orrs	r3, r2
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	609a      	str	r2, [r3, #8]
}
 8006594:	bf00      	nop
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 031f 	and.w	r3, r3, #31
 80065b2:	2201      	movs	r2, #1
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	401a      	ands	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	fa01 f303 	lsl.w	r3, r1, r3
 80065d8:	431a      	orrs	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006600:	2302      	movs	r3, #2
 8006602:	e050      	b.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1c      	ldr	r2, [pc, #112]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d018      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006650:	d013      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a18      	ldr	r2, [pc, #96]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00e      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a16      	ldr	r2, [pc, #88]	@ (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a15      	ldr	r2, [pc, #84]	@ (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d004      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a13      	ldr	r2, [pc, #76]	@ (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d10c      	bne.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4313      	orrs	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40014000 	.word	0x40014000

080066c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e03d      	b.n	8006760 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <__cvt>:
 800676c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	ec57 6b10 	vmov	r6, r7, d0
 8006774:	2f00      	cmp	r7, #0
 8006776:	460c      	mov	r4, r1
 8006778:	4619      	mov	r1, r3
 800677a:	463b      	mov	r3, r7
 800677c:	bfbb      	ittet	lt
 800677e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006782:	461f      	movlt	r7, r3
 8006784:	2300      	movge	r3, #0
 8006786:	232d      	movlt	r3, #45	@ 0x2d
 8006788:	700b      	strb	r3, [r1, #0]
 800678a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800678c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006790:	4691      	mov	r9, r2
 8006792:	f023 0820 	bic.w	r8, r3, #32
 8006796:	bfbc      	itt	lt
 8006798:	4632      	movlt	r2, r6
 800679a:	4616      	movlt	r6, r2
 800679c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067a0:	d005      	beq.n	80067ae <__cvt+0x42>
 80067a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067a6:	d100      	bne.n	80067aa <__cvt+0x3e>
 80067a8:	3401      	adds	r4, #1
 80067aa:	2102      	movs	r1, #2
 80067ac:	e000      	b.n	80067b0 <__cvt+0x44>
 80067ae:	2103      	movs	r1, #3
 80067b0:	ab03      	add	r3, sp, #12
 80067b2:	9301      	str	r3, [sp, #4]
 80067b4:	ab02      	add	r3, sp, #8
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	ec47 6b10 	vmov	d0, r6, r7
 80067bc:	4653      	mov	r3, sl
 80067be:	4622      	mov	r2, r4
 80067c0:	f001 f876 	bl	80078b0 <_dtoa_r>
 80067c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80067c8:	4605      	mov	r5, r0
 80067ca:	d119      	bne.n	8006800 <__cvt+0x94>
 80067cc:	f019 0f01 	tst.w	r9, #1
 80067d0:	d00e      	beq.n	80067f0 <__cvt+0x84>
 80067d2:	eb00 0904 	add.w	r9, r0, r4
 80067d6:	2200      	movs	r2, #0
 80067d8:	2300      	movs	r3, #0
 80067da:	4630      	mov	r0, r6
 80067dc:	4639      	mov	r1, r7
 80067de:	f7fa f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 80067e2:	b108      	cbz	r0, 80067e8 <__cvt+0x7c>
 80067e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80067e8:	2230      	movs	r2, #48	@ 0x30
 80067ea:	9b03      	ldr	r3, [sp, #12]
 80067ec:	454b      	cmp	r3, r9
 80067ee:	d31e      	bcc.n	800682e <__cvt+0xc2>
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067f4:	1b5b      	subs	r3, r3, r5
 80067f6:	4628      	mov	r0, r5
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	b004      	add	sp, #16
 80067fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006800:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006804:	eb00 0904 	add.w	r9, r0, r4
 8006808:	d1e5      	bne.n	80067d6 <__cvt+0x6a>
 800680a:	7803      	ldrb	r3, [r0, #0]
 800680c:	2b30      	cmp	r3, #48	@ 0x30
 800680e:	d10a      	bne.n	8006826 <__cvt+0xba>
 8006810:	2200      	movs	r2, #0
 8006812:	2300      	movs	r3, #0
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	f7fa f95e 	bl	8000ad8 <__aeabi_dcmpeq>
 800681c:	b918      	cbnz	r0, 8006826 <__cvt+0xba>
 800681e:	f1c4 0401 	rsb	r4, r4, #1
 8006822:	f8ca 4000 	str.w	r4, [sl]
 8006826:	f8da 3000 	ldr.w	r3, [sl]
 800682a:	4499      	add	r9, r3
 800682c:	e7d3      	b.n	80067d6 <__cvt+0x6a>
 800682e:	1c59      	adds	r1, r3, #1
 8006830:	9103      	str	r1, [sp, #12]
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	e7d9      	b.n	80067ea <__cvt+0x7e>

08006836 <__exponent>:
 8006836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006838:	2900      	cmp	r1, #0
 800683a:	bfba      	itte	lt
 800683c:	4249      	neglt	r1, r1
 800683e:	232d      	movlt	r3, #45	@ 0x2d
 8006840:	232b      	movge	r3, #43	@ 0x2b
 8006842:	2909      	cmp	r1, #9
 8006844:	7002      	strb	r2, [r0, #0]
 8006846:	7043      	strb	r3, [r0, #1]
 8006848:	dd29      	ble.n	800689e <__exponent+0x68>
 800684a:	f10d 0307 	add.w	r3, sp, #7
 800684e:	461d      	mov	r5, r3
 8006850:	270a      	movs	r7, #10
 8006852:	461a      	mov	r2, r3
 8006854:	fbb1 f6f7 	udiv	r6, r1, r7
 8006858:	fb07 1416 	mls	r4, r7, r6, r1
 800685c:	3430      	adds	r4, #48	@ 0x30
 800685e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006862:	460c      	mov	r4, r1
 8006864:	2c63      	cmp	r4, #99	@ 0x63
 8006866:	f103 33ff 	add.w	r3, r3, #4294967295
 800686a:	4631      	mov	r1, r6
 800686c:	dcf1      	bgt.n	8006852 <__exponent+0x1c>
 800686e:	3130      	adds	r1, #48	@ 0x30
 8006870:	1e94      	subs	r4, r2, #2
 8006872:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006876:	1c41      	adds	r1, r0, #1
 8006878:	4623      	mov	r3, r4
 800687a:	42ab      	cmp	r3, r5
 800687c:	d30a      	bcc.n	8006894 <__exponent+0x5e>
 800687e:	f10d 0309 	add.w	r3, sp, #9
 8006882:	1a9b      	subs	r3, r3, r2
 8006884:	42ac      	cmp	r4, r5
 8006886:	bf88      	it	hi
 8006888:	2300      	movhi	r3, #0
 800688a:	3302      	adds	r3, #2
 800688c:	4403      	add	r3, r0
 800688e:	1a18      	subs	r0, r3, r0
 8006890:	b003      	add	sp, #12
 8006892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006894:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006898:	f801 6f01 	strb.w	r6, [r1, #1]!
 800689c:	e7ed      	b.n	800687a <__exponent+0x44>
 800689e:	2330      	movs	r3, #48	@ 0x30
 80068a0:	3130      	adds	r1, #48	@ 0x30
 80068a2:	7083      	strb	r3, [r0, #2]
 80068a4:	70c1      	strb	r1, [r0, #3]
 80068a6:	1d03      	adds	r3, r0, #4
 80068a8:	e7f1      	b.n	800688e <__exponent+0x58>
	...

080068ac <_printf_float>:
 80068ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	b08d      	sub	sp, #52	@ 0x34
 80068b2:	460c      	mov	r4, r1
 80068b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80068b8:	4616      	mov	r6, r2
 80068ba:	461f      	mov	r7, r3
 80068bc:	4605      	mov	r5, r0
 80068be:	f000 feef 	bl	80076a0 <_localeconv_r>
 80068c2:	6803      	ldr	r3, [r0, #0]
 80068c4:	9304      	str	r3, [sp, #16]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7f9 fcda 	bl	8000280 <strlen>
 80068cc:	2300      	movs	r3, #0
 80068ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80068d0:	f8d8 3000 	ldr.w	r3, [r8]
 80068d4:	9005      	str	r0, [sp, #20]
 80068d6:	3307      	adds	r3, #7
 80068d8:	f023 0307 	bic.w	r3, r3, #7
 80068dc:	f103 0208 	add.w	r2, r3, #8
 80068e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068e4:	f8d4 b000 	ldr.w	fp, [r4]
 80068e8:	f8c8 2000 	str.w	r2, [r8]
 80068ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068f4:	9307      	str	r3, [sp, #28]
 80068f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80068fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006902:	4b9c      	ldr	r3, [pc, #624]	@ (8006b74 <_printf_float+0x2c8>)
 8006904:	f04f 32ff 	mov.w	r2, #4294967295
 8006908:	f7fa f918 	bl	8000b3c <__aeabi_dcmpun>
 800690c:	bb70      	cbnz	r0, 800696c <_printf_float+0xc0>
 800690e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006912:	4b98      	ldr	r3, [pc, #608]	@ (8006b74 <_printf_float+0x2c8>)
 8006914:	f04f 32ff 	mov.w	r2, #4294967295
 8006918:	f7fa f8f2 	bl	8000b00 <__aeabi_dcmple>
 800691c:	bb30      	cbnz	r0, 800696c <_printf_float+0xc0>
 800691e:	2200      	movs	r2, #0
 8006920:	2300      	movs	r3, #0
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f7fa f8e1 	bl	8000aec <__aeabi_dcmplt>
 800692a:	b110      	cbz	r0, 8006932 <_printf_float+0x86>
 800692c:	232d      	movs	r3, #45	@ 0x2d
 800692e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006932:	4a91      	ldr	r2, [pc, #580]	@ (8006b78 <_printf_float+0x2cc>)
 8006934:	4b91      	ldr	r3, [pc, #580]	@ (8006b7c <_printf_float+0x2d0>)
 8006936:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800693a:	bf94      	ite	ls
 800693c:	4690      	movls	r8, r2
 800693e:	4698      	movhi	r8, r3
 8006940:	2303      	movs	r3, #3
 8006942:	6123      	str	r3, [r4, #16]
 8006944:	f02b 0304 	bic.w	r3, fp, #4
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	f04f 0900 	mov.w	r9, #0
 800694e:	9700      	str	r7, [sp, #0]
 8006950:	4633      	mov	r3, r6
 8006952:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006954:	4621      	mov	r1, r4
 8006956:	4628      	mov	r0, r5
 8006958:	f000 f9d2 	bl	8006d00 <_printf_common>
 800695c:	3001      	adds	r0, #1
 800695e:	f040 808d 	bne.w	8006a7c <_printf_float+0x1d0>
 8006962:	f04f 30ff 	mov.w	r0, #4294967295
 8006966:	b00d      	add	sp, #52	@ 0x34
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	4640      	mov	r0, r8
 8006972:	4649      	mov	r1, r9
 8006974:	f7fa f8e2 	bl	8000b3c <__aeabi_dcmpun>
 8006978:	b140      	cbz	r0, 800698c <_printf_float+0xe0>
 800697a:	464b      	mov	r3, r9
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfbc      	itt	lt
 8006980:	232d      	movlt	r3, #45	@ 0x2d
 8006982:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006986:	4a7e      	ldr	r2, [pc, #504]	@ (8006b80 <_printf_float+0x2d4>)
 8006988:	4b7e      	ldr	r3, [pc, #504]	@ (8006b84 <_printf_float+0x2d8>)
 800698a:	e7d4      	b.n	8006936 <_printf_float+0x8a>
 800698c:	6863      	ldr	r3, [r4, #4]
 800698e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006992:	9206      	str	r2, [sp, #24]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	d13b      	bne.n	8006a10 <_printf_float+0x164>
 8006998:	2306      	movs	r3, #6
 800699a:	6063      	str	r3, [r4, #4]
 800699c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069a0:	2300      	movs	r3, #0
 80069a2:	6022      	str	r2, [r4, #0]
 80069a4:	9303      	str	r3, [sp, #12]
 80069a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80069a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069ac:	ab09      	add	r3, sp, #36	@ 0x24
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	6861      	ldr	r1, [r4, #4]
 80069b2:	ec49 8b10 	vmov	d0, r8, r9
 80069b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80069ba:	4628      	mov	r0, r5
 80069bc:	f7ff fed6 	bl	800676c <__cvt>
 80069c0:	9b06      	ldr	r3, [sp, #24]
 80069c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069c4:	2b47      	cmp	r3, #71	@ 0x47
 80069c6:	4680      	mov	r8, r0
 80069c8:	d129      	bne.n	8006a1e <_printf_float+0x172>
 80069ca:	1cc8      	adds	r0, r1, #3
 80069cc:	db02      	blt.n	80069d4 <_printf_float+0x128>
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	4299      	cmp	r1, r3
 80069d2:	dd41      	ble.n	8006a58 <_printf_float+0x1ac>
 80069d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80069d8:	fa5f fa8a 	uxtb.w	sl, sl
 80069dc:	3901      	subs	r1, #1
 80069de:	4652      	mov	r2, sl
 80069e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80069e6:	f7ff ff26 	bl	8006836 <__exponent>
 80069ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069ec:	1813      	adds	r3, r2, r0
 80069ee:	2a01      	cmp	r2, #1
 80069f0:	4681      	mov	r9, r0
 80069f2:	6123      	str	r3, [r4, #16]
 80069f4:	dc02      	bgt.n	80069fc <_printf_float+0x150>
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	07d2      	lsls	r2, r2, #31
 80069fa:	d501      	bpl.n	8006a00 <_printf_float+0x154>
 80069fc:	3301      	adds	r3, #1
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0a2      	beq.n	800694e <_printf_float+0xa2>
 8006a08:	232d      	movs	r3, #45	@ 0x2d
 8006a0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a0e:	e79e      	b.n	800694e <_printf_float+0xa2>
 8006a10:	9a06      	ldr	r2, [sp, #24]
 8006a12:	2a47      	cmp	r2, #71	@ 0x47
 8006a14:	d1c2      	bne.n	800699c <_printf_float+0xf0>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1c0      	bne.n	800699c <_printf_float+0xf0>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e7bd      	b.n	800699a <_printf_float+0xee>
 8006a1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a22:	d9db      	bls.n	80069dc <_printf_float+0x130>
 8006a24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a28:	d118      	bne.n	8006a5c <_printf_float+0x1b0>
 8006a2a:	2900      	cmp	r1, #0
 8006a2c:	6863      	ldr	r3, [r4, #4]
 8006a2e:	dd0b      	ble.n	8006a48 <_printf_float+0x19c>
 8006a30:	6121      	str	r1, [r4, #16]
 8006a32:	b913      	cbnz	r3, 8006a3a <_printf_float+0x18e>
 8006a34:	6822      	ldr	r2, [r4, #0]
 8006a36:	07d0      	lsls	r0, r2, #31
 8006a38:	d502      	bpl.n	8006a40 <_printf_float+0x194>
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	440b      	add	r3, r1
 8006a3e:	6123      	str	r3, [r4, #16]
 8006a40:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a42:	f04f 0900 	mov.w	r9, #0
 8006a46:	e7db      	b.n	8006a00 <_printf_float+0x154>
 8006a48:	b913      	cbnz	r3, 8006a50 <_printf_float+0x1a4>
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	07d2      	lsls	r2, r2, #31
 8006a4e:	d501      	bpl.n	8006a54 <_printf_float+0x1a8>
 8006a50:	3302      	adds	r3, #2
 8006a52:	e7f4      	b.n	8006a3e <_printf_float+0x192>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e7f2      	b.n	8006a3e <_printf_float+0x192>
 8006a58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	db05      	blt.n	8006a6e <_printf_float+0x1c2>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	6121      	str	r1, [r4, #16]
 8006a66:	07d8      	lsls	r0, r3, #31
 8006a68:	d5ea      	bpl.n	8006a40 <_printf_float+0x194>
 8006a6a:	1c4b      	adds	r3, r1, #1
 8006a6c:	e7e7      	b.n	8006a3e <_printf_float+0x192>
 8006a6e:	2900      	cmp	r1, #0
 8006a70:	bfd4      	ite	le
 8006a72:	f1c1 0202 	rsble	r2, r1, #2
 8006a76:	2201      	movgt	r2, #1
 8006a78:	4413      	add	r3, r2
 8006a7a:	e7e0      	b.n	8006a3e <_printf_float+0x192>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	055a      	lsls	r2, r3, #21
 8006a80:	d407      	bmi.n	8006a92 <_printf_float+0x1e6>
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	4642      	mov	r2, r8
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d12b      	bne.n	8006ae8 <_printf_float+0x23c>
 8006a90:	e767      	b.n	8006962 <_printf_float+0xb6>
 8006a92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a96:	f240 80dd 	bls.w	8006c54 <_printf_float+0x3a8>
 8006a9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f7fa f819 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d033      	beq.n	8006b12 <_printf_float+0x266>
 8006aaa:	4a37      	ldr	r2, [pc, #220]	@ (8006b88 <_printf_float+0x2dc>)
 8006aac:	2301      	movs	r3, #1
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f af54 	beq.w	8006962 <_printf_float+0xb6>
 8006aba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006abe:	4543      	cmp	r3, r8
 8006ac0:	db02      	blt.n	8006ac8 <_printf_float+0x21c>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	07d8      	lsls	r0, r3, #31
 8006ac6:	d50f      	bpl.n	8006ae8 <_printf_float+0x23c>
 8006ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006acc:	4631      	mov	r1, r6
 8006ace:	4628      	mov	r0, r5
 8006ad0:	47b8      	blx	r7
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	f43f af45 	beq.w	8006962 <_printf_float+0xb6>
 8006ad8:	f04f 0900 	mov.w	r9, #0
 8006adc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ae0:	f104 0a1a 	add.w	sl, r4, #26
 8006ae4:	45c8      	cmp	r8, r9
 8006ae6:	dc09      	bgt.n	8006afc <_printf_float+0x250>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	079b      	lsls	r3, r3, #30
 8006aec:	f100 8103 	bmi.w	8006cf6 <_printf_float+0x44a>
 8006af0:	68e0      	ldr	r0, [r4, #12]
 8006af2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006af4:	4298      	cmp	r0, r3
 8006af6:	bfb8      	it	lt
 8006af8:	4618      	movlt	r0, r3
 8006afa:	e734      	b.n	8006966 <_printf_float+0xba>
 8006afc:	2301      	movs	r3, #1
 8006afe:	4652      	mov	r2, sl
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	f43f af2b 	beq.w	8006962 <_printf_float+0xb6>
 8006b0c:	f109 0901 	add.w	r9, r9, #1
 8006b10:	e7e8      	b.n	8006ae4 <_printf_float+0x238>
 8006b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dc39      	bgt.n	8006b8c <_printf_float+0x2e0>
 8006b18:	4a1b      	ldr	r2, [pc, #108]	@ (8006b88 <_printf_float+0x2dc>)
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4628      	mov	r0, r5
 8006b20:	47b8      	blx	r7
 8006b22:	3001      	adds	r0, #1
 8006b24:	f43f af1d 	beq.w	8006962 <_printf_float+0xb6>
 8006b28:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b2c:	ea59 0303 	orrs.w	r3, r9, r3
 8006b30:	d102      	bne.n	8006b38 <_printf_float+0x28c>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	07d9      	lsls	r1, r3, #31
 8006b36:	d5d7      	bpl.n	8006ae8 <_printf_float+0x23c>
 8006b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	f43f af0d 	beq.w	8006962 <_printf_float+0xb6>
 8006b48:	f04f 0a00 	mov.w	sl, #0
 8006b4c:	f104 0b1a 	add.w	fp, r4, #26
 8006b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b52:	425b      	negs	r3, r3
 8006b54:	4553      	cmp	r3, sl
 8006b56:	dc01      	bgt.n	8006b5c <_printf_float+0x2b0>
 8006b58:	464b      	mov	r3, r9
 8006b5a:	e793      	b.n	8006a84 <_printf_float+0x1d8>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	465a      	mov	r2, fp
 8006b60:	4631      	mov	r1, r6
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b8      	blx	r7
 8006b66:	3001      	adds	r0, #1
 8006b68:	f43f aefb 	beq.w	8006962 <_printf_float+0xb6>
 8006b6c:	f10a 0a01 	add.w	sl, sl, #1
 8006b70:	e7ee      	b.n	8006b50 <_printf_float+0x2a4>
 8006b72:	bf00      	nop
 8006b74:	7fefffff 	.word	0x7fefffff
 8006b78:	0800aef4 	.word	0x0800aef4
 8006b7c:	0800aef8 	.word	0x0800aef8
 8006b80:	0800aefc 	.word	0x0800aefc
 8006b84:	0800af00 	.word	0x0800af00
 8006b88:	0800af04 	.word	0x0800af04
 8006b8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b92:	4553      	cmp	r3, sl
 8006b94:	bfa8      	it	ge
 8006b96:	4653      	movge	r3, sl
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	4699      	mov	r9, r3
 8006b9c:	dc36      	bgt.n	8006c0c <_printf_float+0x360>
 8006b9e:	f04f 0b00 	mov.w	fp, #0
 8006ba2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ba6:	f104 021a 	add.w	r2, r4, #26
 8006baa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bac:	9306      	str	r3, [sp, #24]
 8006bae:	eba3 0309 	sub.w	r3, r3, r9
 8006bb2:	455b      	cmp	r3, fp
 8006bb4:	dc31      	bgt.n	8006c1a <_printf_float+0x36e>
 8006bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb8:	459a      	cmp	sl, r3
 8006bba:	dc3a      	bgt.n	8006c32 <_printf_float+0x386>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	07da      	lsls	r2, r3, #31
 8006bc0:	d437      	bmi.n	8006c32 <_printf_float+0x386>
 8006bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc4:	ebaa 0903 	sub.w	r9, sl, r3
 8006bc8:	9b06      	ldr	r3, [sp, #24]
 8006bca:	ebaa 0303 	sub.w	r3, sl, r3
 8006bce:	4599      	cmp	r9, r3
 8006bd0:	bfa8      	it	ge
 8006bd2:	4699      	movge	r9, r3
 8006bd4:	f1b9 0f00 	cmp.w	r9, #0
 8006bd8:	dc33      	bgt.n	8006c42 <_printf_float+0x396>
 8006bda:	f04f 0800 	mov.w	r8, #0
 8006bde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006be2:	f104 0b1a 	add.w	fp, r4, #26
 8006be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be8:	ebaa 0303 	sub.w	r3, sl, r3
 8006bec:	eba3 0309 	sub.w	r3, r3, r9
 8006bf0:	4543      	cmp	r3, r8
 8006bf2:	f77f af79 	ble.w	8006ae8 <_printf_float+0x23c>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	465a      	mov	r2, fp
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	f43f aeae 	beq.w	8006962 <_printf_float+0xb6>
 8006c06:	f108 0801 	add.w	r8, r8, #1
 8006c0a:	e7ec      	b.n	8006be6 <_printf_float+0x33a>
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	d1c2      	bne.n	8006b9e <_printf_float+0x2f2>
 8006c18:	e6a3      	b.n	8006962 <_printf_float+0xb6>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4628      	mov	r0, r5
 8006c20:	9206      	str	r2, [sp, #24]
 8006c22:	47b8      	blx	r7
 8006c24:	3001      	adds	r0, #1
 8006c26:	f43f ae9c 	beq.w	8006962 <_printf_float+0xb6>
 8006c2a:	9a06      	ldr	r2, [sp, #24]
 8006c2c:	f10b 0b01 	add.w	fp, fp, #1
 8006c30:	e7bb      	b.n	8006baa <_printf_float+0x2fe>
 8006c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d1c0      	bne.n	8006bc2 <_printf_float+0x316>
 8006c40:	e68f      	b.n	8006962 <_printf_float+0xb6>
 8006c42:	9a06      	ldr	r2, [sp, #24]
 8006c44:	464b      	mov	r3, r9
 8006c46:	4442      	add	r2, r8
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d1c3      	bne.n	8006bda <_printf_float+0x32e>
 8006c52:	e686      	b.n	8006962 <_printf_float+0xb6>
 8006c54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c58:	f1ba 0f01 	cmp.w	sl, #1
 8006c5c:	dc01      	bgt.n	8006c62 <_printf_float+0x3b6>
 8006c5e:	07db      	lsls	r3, r3, #31
 8006c60:	d536      	bpl.n	8006cd0 <_printf_float+0x424>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4642      	mov	r2, r8
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae78 	beq.w	8006962 <_printf_float+0xb6>
 8006c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f43f ae70 	beq.w	8006962 <_printf_float+0xb6>
 8006c82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c86:	2200      	movs	r2, #0
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c8e:	f7f9 ff23 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c92:	b9c0      	cbnz	r0, 8006cc6 <_printf_float+0x41a>
 8006c94:	4653      	mov	r3, sl
 8006c96:	f108 0201 	add.w	r2, r8, #1
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	47b8      	blx	r7
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d10c      	bne.n	8006cbe <_printf_float+0x412>
 8006ca4:	e65d      	b.n	8006962 <_printf_float+0xb6>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	465a      	mov	r2, fp
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	47b8      	blx	r7
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	f43f ae56 	beq.w	8006962 <_printf_float+0xb6>
 8006cb6:	f108 0801 	add.w	r8, r8, #1
 8006cba:	45d0      	cmp	r8, sl
 8006cbc:	dbf3      	blt.n	8006ca6 <_printf_float+0x3fa>
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006cc4:	e6df      	b.n	8006a86 <_printf_float+0x1da>
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	f104 0b1a 	add.w	fp, r4, #26
 8006cce:	e7f4      	b.n	8006cba <_printf_float+0x40e>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	e7e1      	b.n	8006c9a <_printf_float+0x3ee>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	464a      	mov	r2, r9
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f43f ae3e 	beq.w	8006962 <_printf_float+0xb6>
 8006ce6:	f108 0801 	add.w	r8, r8, #1
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cee:	1a5b      	subs	r3, r3, r1
 8006cf0:	4543      	cmp	r3, r8
 8006cf2:	dcf0      	bgt.n	8006cd6 <_printf_float+0x42a>
 8006cf4:	e6fc      	b.n	8006af0 <_printf_float+0x244>
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	f104 0919 	add.w	r9, r4, #25
 8006cfe:	e7f4      	b.n	8006cea <_printf_float+0x43e>

08006d00 <_printf_common>:
 8006d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d04:	4616      	mov	r6, r2
 8006d06:	4698      	mov	r8, r3
 8006d08:	688a      	ldr	r2, [r1, #8]
 8006d0a:	690b      	ldr	r3, [r1, #16]
 8006d0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bfb8      	it	lt
 8006d14:	4613      	movlt	r3, r2
 8006d16:	6033      	str	r3, [r6, #0]
 8006d18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	b10a      	cbz	r2, 8006d26 <_printf_common+0x26>
 8006d22:	3301      	adds	r3, #1
 8006d24:	6033      	str	r3, [r6, #0]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	0699      	lsls	r1, r3, #26
 8006d2a:	bf42      	ittt	mi
 8006d2c:	6833      	ldrmi	r3, [r6, #0]
 8006d2e:	3302      	addmi	r3, #2
 8006d30:	6033      	strmi	r3, [r6, #0]
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	f015 0506 	ands.w	r5, r5, #6
 8006d38:	d106      	bne.n	8006d48 <_printf_common+0x48>
 8006d3a:	f104 0a19 	add.w	sl, r4, #25
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	6832      	ldr	r2, [r6, #0]
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dc26      	bgt.n	8006d96 <_printf_common+0x96>
 8006d48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d4c:	6822      	ldr	r2, [r4, #0]
 8006d4e:	3b00      	subs	r3, #0
 8006d50:	bf18      	it	ne
 8006d52:	2301      	movne	r3, #1
 8006d54:	0692      	lsls	r2, r2, #26
 8006d56:	d42b      	bmi.n	8006db0 <_printf_common+0xb0>
 8006d58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	4638      	mov	r0, r7
 8006d60:	47c8      	blx	r9
 8006d62:	3001      	adds	r0, #1
 8006d64:	d01e      	beq.n	8006da4 <_printf_common+0xa4>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	6922      	ldr	r2, [r4, #16]
 8006d6a:	f003 0306 	and.w	r3, r3, #6
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	bf02      	ittt	eq
 8006d72:	68e5      	ldreq	r5, [r4, #12]
 8006d74:	6833      	ldreq	r3, [r6, #0]
 8006d76:	1aed      	subeq	r5, r5, r3
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	bf0c      	ite	eq
 8006d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d80:	2500      	movne	r5, #0
 8006d82:	4293      	cmp	r3, r2
 8006d84:	bfc4      	itt	gt
 8006d86:	1a9b      	subgt	r3, r3, r2
 8006d88:	18ed      	addgt	r5, r5, r3
 8006d8a:	2600      	movs	r6, #0
 8006d8c:	341a      	adds	r4, #26
 8006d8e:	42b5      	cmp	r5, r6
 8006d90:	d11a      	bne.n	8006dc8 <_printf_common+0xc8>
 8006d92:	2000      	movs	r0, #0
 8006d94:	e008      	b.n	8006da8 <_printf_common+0xa8>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4652      	mov	r2, sl
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	47c8      	blx	r9
 8006da0:	3001      	adds	r0, #1
 8006da2:	d103      	bne.n	8006dac <_printf_common+0xac>
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dac:	3501      	adds	r5, #1
 8006dae:	e7c6      	b.n	8006d3e <_printf_common+0x3e>
 8006db0:	18e1      	adds	r1, r4, r3
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	2030      	movs	r0, #48	@ 0x30
 8006db6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dba:	4422      	add	r2, r4
 8006dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	e7c7      	b.n	8006d58 <_printf_common+0x58>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4622      	mov	r2, r4
 8006dcc:	4641      	mov	r1, r8
 8006dce:	4638      	mov	r0, r7
 8006dd0:	47c8      	blx	r9
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	d0e6      	beq.n	8006da4 <_printf_common+0xa4>
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	e7d9      	b.n	8006d8e <_printf_common+0x8e>
	...

08006ddc <_printf_i>:
 8006ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	7e0f      	ldrb	r7, [r1, #24]
 8006de2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006de4:	2f78      	cmp	r7, #120	@ 0x78
 8006de6:	4691      	mov	r9, r2
 8006de8:	4680      	mov	r8, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	469a      	mov	sl, r3
 8006dee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006df2:	d807      	bhi.n	8006e04 <_printf_i+0x28>
 8006df4:	2f62      	cmp	r7, #98	@ 0x62
 8006df6:	d80a      	bhi.n	8006e0e <_printf_i+0x32>
 8006df8:	2f00      	cmp	r7, #0
 8006dfa:	f000 80d2 	beq.w	8006fa2 <_printf_i+0x1c6>
 8006dfe:	2f58      	cmp	r7, #88	@ 0x58
 8006e00:	f000 80b9 	beq.w	8006f76 <_printf_i+0x19a>
 8006e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e0c:	e03a      	b.n	8006e84 <_printf_i+0xa8>
 8006e0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e12:	2b15      	cmp	r3, #21
 8006e14:	d8f6      	bhi.n	8006e04 <_printf_i+0x28>
 8006e16:	a101      	add	r1, pc, #4	@ (adr r1, 8006e1c <_printf_i+0x40>)
 8006e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e1c:	08006e75 	.word	0x08006e75
 8006e20:	08006e89 	.word	0x08006e89
 8006e24:	08006e05 	.word	0x08006e05
 8006e28:	08006e05 	.word	0x08006e05
 8006e2c:	08006e05 	.word	0x08006e05
 8006e30:	08006e05 	.word	0x08006e05
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006e05 	.word	0x08006e05
 8006e3c:	08006e05 	.word	0x08006e05
 8006e40:	08006e05 	.word	0x08006e05
 8006e44:	08006e05 	.word	0x08006e05
 8006e48:	08006f89 	.word	0x08006f89
 8006e4c:	08006eb3 	.word	0x08006eb3
 8006e50:	08006f43 	.word	0x08006f43
 8006e54:	08006e05 	.word	0x08006e05
 8006e58:	08006e05 	.word	0x08006e05
 8006e5c:	08006fab 	.word	0x08006fab
 8006e60:	08006e05 	.word	0x08006e05
 8006e64:	08006eb3 	.word	0x08006eb3
 8006e68:	08006e05 	.word	0x08006e05
 8006e6c:	08006e05 	.word	0x08006e05
 8006e70:	08006f4b 	.word	0x08006f4b
 8006e74:	6833      	ldr	r3, [r6, #0]
 8006e76:	1d1a      	adds	r2, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6032      	str	r2, [r6, #0]
 8006e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e84:	2301      	movs	r3, #1
 8006e86:	e09d      	b.n	8006fc4 <_printf_i+0x1e8>
 8006e88:	6833      	ldr	r3, [r6, #0]
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	1d19      	adds	r1, r3, #4
 8006e8e:	6031      	str	r1, [r6, #0]
 8006e90:	0606      	lsls	r6, r0, #24
 8006e92:	d501      	bpl.n	8006e98 <_printf_i+0xbc>
 8006e94:	681d      	ldr	r5, [r3, #0]
 8006e96:	e003      	b.n	8006ea0 <_printf_i+0xc4>
 8006e98:	0645      	lsls	r5, r0, #25
 8006e9a:	d5fb      	bpl.n	8006e94 <_printf_i+0xb8>
 8006e9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ea0:	2d00      	cmp	r5, #0
 8006ea2:	da03      	bge.n	8006eac <_printf_i+0xd0>
 8006ea4:	232d      	movs	r3, #45	@ 0x2d
 8006ea6:	426d      	negs	r5, r5
 8006ea8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eac:	4859      	ldr	r0, [pc, #356]	@ (8007014 <_printf_i+0x238>)
 8006eae:	230a      	movs	r3, #10
 8006eb0:	e011      	b.n	8006ed6 <_printf_i+0xfa>
 8006eb2:	6821      	ldr	r1, [r4, #0]
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	0608      	lsls	r0, r1, #24
 8006eb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ebc:	d402      	bmi.n	8006ec4 <_printf_i+0xe8>
 8006ebe:	0649      	lsls	r1, r1, #25
 8006ec0:	bf48      	it	mi
 8006ec2:	b2ad      	uxthmi	r5, r5
 8006ec4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ec6:	4853      	ldr	r0, [pc, #332]	@ (8007014 <_printf_i+0x238>)
 8006ec8:	6033      	str	r3, [r6, #0]
 8006eca:	bf14      	ite	ne
 8006ecc:	230a      	movne	r3, #10
 8006ece:	2308      	moveq	r3, #8
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ed6:	6866      	ldr	r6, [r4, #4]
 8006ed8:	60a6      	str	r6, [r4, #8]
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	bfa2      	ittt	ge
 8006ede:	6821      	ldrge	r1, [r4, #0]
 8006ee0:	f021 0104 	bicge.w	r1, r1, #4
 8006ee4:	6021      	strge	r1, [r4, #0]
 8006ee6:	b90d      	cbnz	r5, 8006eec <_printf_i+0x110>
 8006ee8:	2e00      	cmp	r6, #0
 8006eea:	d04b      	beq.n	8006f84 <_printf_i+0x1a8>
 8006eec:	4616      	mov	r6, r2
 8006eee:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ef2:	fb03 5711 	mls	r7, r3, r1, r5
 8006ef6:	5dc7      	ldrb	r7, [r0, r7]
 8006ef8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006efc:	462f      	mov	r7, r5
 8006efe:	42bb      	cmp	r3, r7
 8006f00:	460d      	mov	r5, r1
 8006f02:	d9f4      	bls.n	8006eee <_printf_i+0x112>
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d10b      	bne.n	8006f20 <_printf_i+0x144>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	07df      	lsls	r7, r3, #31
 8006f0c:	d508      	bpl.n	8006f20 <_printf_i+0x144>
 8006f0e:	6923      	ldr	r3, [r4, #16]
 8006f10:	6861      	ldr	r1, [r4, #4]
 8006f12:	4299      	cmp	r1, r3
 8006f14:	bfde      	ittt	le
 8006f16:	2330      	movle	r3, #48	@ 0x30
 8006f18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f20:	1b92      	subs	r2, r2, r6
 8006f22:	6122      	str	r2, [r4, #16]
 8006f24:	f8cd a000 	str.w	sl, [sp]
 8006f28:	464b      	mov	r3, r9
 8006f2a:	aa03      	add	r2, sp, #12
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	4640      	mov	r0, r8
 8006f30:	f7ff fee6 	bl	8006d00 <_printf_common>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d14a      	bne.n	8006fce <_printf_i+0x1f2>
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	b004      	add	sp, #16
 8006f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	f043 0320 	orr.w	r3, r3, #32
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	4833      	ldr	r0, [pc, #204]	@ (8007018 <_printf_i+0x23c>)
 8006f4c:	2778      	movs	r7, #120	@ 0x78
 8006f4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	6831      	ldr	r1, [r6, #0]
 8006f56:	061f      	lsls	r7, r3, #24
 8006f58:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f5c:	d402      	bmi.n	8006f64 <_printf_i+0x188>
 8006f5e:	065f      	lsls	r7, r3, #25
 8006f60:	bf48      	it	mi
 8006f62:	b2ad      	uxthmi	r5, r5
 8006f64:	6031      	str	r1, [r6, #0]
 8006f66:	07d9      	lsls	r1, r3, #31
 8006f68:	bf44      	itt	mi
 8006f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f6e:	6023      	strmi	r3, [r4, #0]
 8006f70:	b11d      	cbz	r5, 8006f7a <_printf_i+0x19e>
 8006f72:	2310      	movs	r3, #16
 8006f74:	e7ac      	b.n	8006ed0 <_printf_i+0xf4>
 8006f76:	4827      	ldr	r0, [pc, #156]	@ (8007014 <_printf_i+0x238>)
 8006f78:	e7e9      	b.n	8006f4e <_printf_i+0x172>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	f023 0320 	bic.w	r3, r3, #32
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	e7f6      	b.n	8006f72 <_printf_i+0x196>
 8006f84:	4616      	mov	r6, r2
 8006f86:	e7bd      	b.n	8006f04 <_printf_i+0x128>
 8006f88:	6833      	ldr	r3, [r6, #0]
 8006f8a:	6825      	ldr	r5, [r4, #0]
 8006f8c:	6961      	ldr	r1, [r4, #20]
 8006f8e:	1d18      	adds	r0, r3, #4
 8006f90:	6030      	str	r0, [r6, #0]
 8006f92:	062e      	lsls	r6, r5, #24
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	d501      	bpl.n	8006f9c <_printf_i+0x1c0>
 8006f98:	6019      	str	r1, [r3, #0]
 8006f9a:	e002      	b.n	8006fa2 <_printf_i+0x1c6>
 8006f9c:	0668      	lsls	r0, r5, #25
 8006f9e:	d5fb      	bpl.n	8006f98 <_printf_i+0x1bc>
 8006fa0:	8019      	strh	r1, [r3, #0]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6123      	str	r3, [r4, #16]
 8006fa6:	4616      	mov	r6, r2
 8006fa8:	e7bc      	b.n	8006f24 <_printf_i+0x148>
 8006faa:	6833      	ldr	r3, [r6, #0]
 8006fac:	1d1a      	adds	r2, r3, #4
 8006fae:	6032      	str	r2, [r6, #0]
 8006fb0:	681e      	ldr	r6, [r3, #0]
 8006fb2:	6862      	ldr	r2, [r4, #4]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7f9 f912 	bl	80001e0 <memchr>
 8006fbc:	b108      	cbz	r0, 8006fc2 <_printf_i+0x1e6>
 8006fbe:	1b80      	subs	r0, r0, r6
 8006fc0:	6060      	str	r0, [r4, #4]
 8006fc2:	6863      	ldr	r3, [r4, #4]
 8006fc4:	6123      	str	r3, [r4, #16]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fcc:	e7aa      	b.n	8006f24 <_printf_i+0x148>
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	4632      	mov	r2, r6
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	47d0      	blx	sl
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d0ad      	beq.n	8006f38 <_printf_i+0x15c>
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	079b      	lsls	r3, r3, #30
 8006fe0:	d413      	bmi.n	800700a <_printf_i+0x22e>
 8006fe2:	68e0      	ldr	r0, [r4, #12]
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	4298      	cmp	r0, r3
 8006fe8:	bfb8      	it	lt
 8006fea:	4618      	movlt	r0, r3
 8006fec:	e7a6      	b.n	8006f3c <_printf_i+0x160>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	47d0      	blx	sl
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d09d      	beq.n	8006f38 <_printf_i+0x15c>
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	68e3      	ldr	r3, [r4, #12]
 8007000:	9903      	ldr	r1, [sp, #12]
 8007002:	1a5b      	subs	r3, r3, r1
 8007004:	42ab      	cmp	r3, r5
 8007006:	dcf2      	bgt.n	8006fee <_printf_i+0x212>
 8007008:	e7eb      	b.n	8006fe2 <_printf_i+0x206>
 800700a:	2500      	movs	r5, #0
 800700c:	f104 0619 	add.w	r6, r4, #25
 8007010:	e7f5      	b.n	8006ffe <_printf_i+0x222>
 8007012:	bf00      	nop
 8007014:	0800af06 	.word	0x0800af06
 8007018:	0800af17 	.word	0x0800af17

0800701c <_scanf_float>:
 800701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007020:	b087      	sub	sp, #28
 8007022:	4617      	mov	r7, r2
 8007024:	9303      	str	r3, [sp, #12]
 8007026:	688b      	ldr	r3, [r1, #8]
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800702e:	bf81      	itttt	hi
 8007030:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007034:	eb03 0b05 	addhi.w	fp, r3, r5
 8007038:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800703c:	608b      	strhi	r3, [r1, #8]
 800703e:	680b      	ldr	r3, [r1, #0]
 8007040:	460a      	mov	r2, r1
 8007042:	f04f 0500 	mov.w	r5, #0
 8007046:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800704a:	f842 3b1c 	str.w	r3, [r2], #28
 800704e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007052:	4680      	mov	r8, r0
 8007054:	460c      	mov	r4, r1
 8007056:	bf98      	it	ls
 8007058:	f04f 0b00 	movls.w	fp, #0
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	4616      	mov	r6, r2
 8007060:	46aa      	mov	sl, r5
 8007062:	46a9      	mov	r9, r5
 8007064:	9502      	str	r5, [sp, #8]
 8007066:	68a2      	ldr	r2, [r4, #8]
 8007068:	b152      	cbz	r2, 8007080 <_scanf_float+0x64>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007070:	d864      	bhi.n	800713c <_scanf_float+0x120>
 8007072:	2b40      	cmp	r3, #64	@ 0x40
 8007074:	d83c      	bhi.n	80070f0 <_scanf_float+0xd4>
 8007076:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800707a:	b2c8      	uxtb	r0, r1
 800707c:	280e      	cmp	r0, #14
 800707e:	d93a      	bls.n	80070f6 <_scanf_float+0xda>
 8007080:	f1b9 0f00 	cmp.w	r9, #0
 8007084:	d003      	beq.n	800708e <_scanf_float+0x72>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007092:	f1ba 0f01 	cmp.w	sl, #1
 8007096:	f200 8117 	bhi.w	80072c8 <_scanf_float+0x2ac>
 800709a:	9b01      	ldr	r3, [sp, #4]
 800709c:	429e      	cmp	r6, r3
 800709e:	f200 8108 	bhi.w	80072b2 <_scanf_float+0x296>
 80070a2:	2001      	movs	r0, #1
 80070a4:	b007      	add	sp, #28
 80070a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80070ae:	2a0d      	cmp	r2, #13
 80070b0:	d8e6      	bhi.n	8007080 <_scanf_float+0x64>
 80070b2:	a101      	add	r1, pc, #4	@ (adr r1, 80070b8 <_scanf_float+0x9c>)
 80070b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070b8:	080071ff 	.word	0x080071ff
 80070bc:	08007081 	.word	0x08007081
 80070c0:	08007081 	.word	0x08007081
 80070c4:	08007081 	.word	0x08007081
 80070c8:	0800725f 	.word	0x0800725f
 80070cc:	08007237 	.word	0x08007237
 80070d0:	08007081 	.word	0x08007081
 80070d4:	08007081 	.word	0x08007081
 80070d8:	0800720d 	.word	0x0800720d
 80070dc:	08007081 	.word	0x08007081
 80070e0:	08007081 	.word	0x08007081
 80070e4:	08007081 	.word	0x08007081
 80070e8:	08007081 	.word	0x08007081
 80070ec:	080071c5 	.word	0x080071c5
 80070f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80070f4:	e7db      	b.n	80070ae <_scanf_float+0x92>
 80070f6:	290e      	cmp	r1, #14
 80070f8:	d8c2      	bhi.n	8007080 <_scanf_float+0x64>
 80070fa:	a001      	add	r0, pc, #4	@ (adr r0, 8007100 <_scanf_float+0xe4>)
 80070fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007100:	080071b5 	.word	0x080071b5
 8007104:	08007081 	.word	0x08007081
 8007108:	080071b5 	.word	0x080071b5
 800710c:	0800724b 	.word	0x0800724b
 8007110:	08007081 	.word	0x08007081
 8007114:	0800715d 	.word	0x0800715d
 8007118:	0800719b 	.word	0x0800719b
 800711c:	0800719b 	.word	0x0800719b
 8007120:	0800719b 	.word	0x0800719b
 8007124:	0800719b 	.word	0x0800719b
 8007128:	0800719b 	.word	0x0800719b
 800712c:	0800719b 	.word	0x0800719b
 8007130:	0800719b 	.word	0x0800719b
 8007134:	0800719b 	.word	0x0800719b
 8007138:	0800719b 	.word	0x0800719b
 800713c:	2b6e      	cmp	r3, #110	@ 0x6e
 800713e:	d809      	bhi.n	8007154 <_scanf_float+0x138>
 8007140:	2b60      	cmp	r3, #96	@ 0x60
 8007142:	d8b2      	bhi.n	80070aa <_scanf_float+0x8e>
 8007144:	2b54      	cmp	r3, #84	@ 0x54
 8007146:	d07b      	beq.n	8007240 <_scanf_float+0x224>
 8007148:	2b59      	cmp	r3, #89	@ 0x59
 800714a:	d199      	bne.n	8007080 <_scanf_float+0x64>
 800714c:	2d07      	cmp	r5, #7
 800714e:	d197      	bne.n	8007080 <_scanf_float+0x64>
 8007150:	2508      	movs	r5, #8
 8007152:	e02c      	b.n	80071ae <_scanf_float+0x192>
 8007154:	2b74      	cmp	r3, #116	@ 0x74
 8007156:	d073      	beq.n	8007240 <_scanf_float+0x224>
 8007158:	2b79      	cmp	r3, #121	@ 0x79
 800715a:	e7f6      	b.n	800714a <_scanf_float+0x12e>
 800715c:	6821      	ldr	r1, [r4, #0]
 800715e:	05c8      	lsls	r0, r1, #23
 8007160:	d51b      	bpl.n	800719a <_scanf_float+0x17e>
 8007162:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007166:	6021      	str	r1, [r4, #0]
 8007168:	f109 0901 	add.w	r9, r9, #1
 800716c:	f1bb 0f00 	cmp.w	fp, #0
 8007170:	d003      	beq.n	800717a <_scanf_float+0x15e>
 8007172:	3201      	adds	r2, #1
 8007174:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007178:	60a2      	str	r2, [r4, #8]
 800717a:	68a3      	ldr	r3, [r4, #8]
 800717c:	3b01      	subs	r3, #1
 800717e:	60a3      	str	r3, [r4, #8]
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	3301      	adds	r3, #1
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3b01      	subs	r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	f340 8087 	ble.w	80072a0 <_scanf_float+0x284>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	3301      	adds	r3, #1
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	e765      	b.n	8007066 <_scanf_float+0x4a>
 800719a:	eb1a 0105 	adds.w	r1, sl, r5
 800719e:	f47f af6f 	bne.w	8007080 <_scanf_float+0x64>
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80071a8:	6022      	str	r2, [r4, #0]
 80071aa:	460d      	mov	r5, r1
 80071ac:	468a      	mov	sl, r1
 80071ae:	f806 3b01 	strb.w	r3, [r6], #1
 80071b2:	e7e2      	b.n	800717a <_scanf_float+0x15e>
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	0610      	lsls	r0, r2, #24
 80071b8:	f57f af62 	bpl.w	8007080 <_scanf_float+0x64>
 80071bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071c0:	6022      	str	r2, [r4, #0]
 80071c2:	e7f4      	b.n	80071ae <_scanf_float+0x192>
 80071c4:	f1ba 0f00 	cmp.w	sl, #0
 80071c8:	d10e      	bne.n	80071e8 <_scanf_float+0x1cc>
 80071ca:	f1b9 0f00 	cmp.w	r9, #0
 80071ce:	d10e      	bne.n	80071ee <_scanf_float+0x1d2>
 80071d0:	6822      	ldr	r2, [r4, #0]
 80071d2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80071d6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071da:	d108      	bne.n	80071ee <_scanf_float+0x1d2>
 80071dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071e0:	6022      	str	r2, [r4, #0]
 80071e2:	f04f 0a01 	mov.w	sl, #1
 80071e6:	e7e2      	b.n	80071ae <_scanf_float+0x192>
 80071e8:	f1ba 0f02 	cmp.w	sl, #2
 80071ec:	d055      	beq.n	800729a <_scanf_float+0x27e>
 80071ee:	2d01      	cmp	r5, #1
 80071f0:	d002      	beq.n	80071f8 <_scanf_float+0x1dc>
 80071f2:	2d04      	cmp	r5, #4
 80071f4:	f47f af44 	bne.w	8007080 <_scanf_float+0x64>
 80071f8:	3501      	adds	r5, #1
 80071fa:	b2ed      	uxtb	r5, r5
 80071fc:	e7d7      	b.n	80071ae <_scanf_float+0x192>
 80071fe:	f1ba 0f01 	cmp.w	sl, #1
 8007202:	f47f af3d 	bne.w	8007080 <_scanf_float+0x64>
 8007206:	f04f 0a02 	mov.w	sl, #2
 800720a:	e7d0      	b.n	80071ae <_scanf_float+0x192>
 800720c:	b97d      	cbnz	r5, 800722e <_scanf_float+0x212>
 800720e:	f1b9 0f00 	cmp.w	r9, #0
 8007212:	f47f af38 	bne.w	8007086 <_scanf_float+0x6a>
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800721c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007220:	f040 8108 	bne.w	8007434 <_scanf_float+0x418>
 8007224:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007228:	6022      	str	r2, [r4, #0]
 800722a:	2501      	movs	r5, #1
 800722c:	e7bf      	b.n	80071ae <_scanf_float+0x192>
 800722e:	2d03      	cmp	r5, #3
 8007230:	d0e2      	beq.n	80071f8 <_scanf_float+0x1dc>
 8007232:	2d05      	cmp	r5, #5
 8007234:	e7de      	b.n	80071f4 <_scanf_float+0x1d8>
 8007236:	2d02      	cmp	r5, #2
 8007238:	f47f af22 	bne.w	8007080 <_scanf_float+0x64>
 800723c:	2503      	movs	r5, #3
 800723e:	e7b6      	b.n	80071ae <_scanf_float+0x192>
 8007240:	2d06      	cmp	r5, #6
 8007242:	f47f af1d 	bne.w	8007080 <_scanf_float+0x64>
 8007246:	2507      	movs	r5, #7
 8007248:	e7b1      	b.n	80071ae <_scanf_float+0x192>
 800724a:	6822      	ldr	r2, [r4, #0]
 800724c:	0591      	lsls	r1, r2, #22
 800724e:	f57f af17 	bpl.w	8007080 <_scanf_float+0x64>
 8007252:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007256:	6022      	str	r2, [r4, #0]
 8007258:	f8cd 9008 	str.w	r9, [sp, #8]
 800725c:	e7a7      	b.n	80071ae <_scanf_float+0x192>
 800725e:	6822      	ldr	r2, [r4, #0]
 8007260:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007264:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007268:	d006      	beq.n	8007278 <_scanf_float+0x25c>
 800726a:	0550      	lsls	r0, r2, #21
 800726c:	f57f af08 	bpl.w	8007080 <_scanf_float+0x64>
 8007270:	f1b9 0f00 	cmp.w	r9, #0
 8007274:	f000 80de 	beq.w	8007434 <_scanf_float+0x418>
 8007278:	0591      	lsls	r1, r2, #22
 800727a:	bf58      	it	pl
 800727c:	9902      	ldrpl	r1, [sp, #8]
 800727e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007282:	bf58      	it	pl
 8007284:	eba9 0101 	subpl.w	r1, r9, r1
 8007288:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800728c:	bf58      	it	pl
 800728e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007292:	6022      	str	r2, [r4, #0]
 8007294:	f04f 0900 	mov.w	r9, #0
 8007298:	e789      	b.n	80071ae <_scanf_float+0x192>
 800729a:	f04f 0a03 	mov.w	sl, #3
 800729e:	e786      	b.n	80071ae <_scanf_float+0x192>
 80072a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80072a4:	4639      	mov	r1, r7
 80072a6:	4640      	mov	r0, r8
 80072a8:	4798      	blx	r3
 80072aa:	2800      	cmp	r0, #0
 80072ac:	f43f aedb 	beq.w	8007066 <_scanf_float+0x4a>
 80072b0:	e6e6      	b.n	8007080 <_scanf_float+0x64>
 80072b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072ba:	463a      	mov	r2, r7
 80072bc:	4640      	mov	r0, r8
 80072be:	4798      	blx	r3
 80072c0:	6923      	ldr	r3, [r4, #16]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	6123      	str	r3, [r4, #16]
 80072c6:	e6e8      	b.n	800709a <_scanf_float+0x7e>
 80072c8:	1e6b      	subs	r3, r5, #1
 80072ca:	2b06      	cmp	r3, #6
 80072cc:	d824      	bhi.n	8007318 <_scanf_float+0x2fc>
 80072ce:	2d02      	cmp	r5, #2
 80072d0:	d836      	bhi.n	8007340 <_scanf_float+0x324>
 80072d2:	9b01      	ldr	r3, [sp, #4]
 80072d4:	429e      	cmp	r6, r3
 80072d6:	f67f aee4 	bls.w	80070a2 <_scanf_float+0x86>
 80072da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072e2:	463a      	mov	r2, r7
 80072e4:	4640      	mov	r0, r8
 80072e6:	4798      	blx	r3
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	6123      	str	r3, [r4, #16]
 80072ee:	e7f0      	b.n	80072d2 <_scanf_float+0x2b6>
 80072f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072f4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80072f8:	463a      	mov	r2, r7
 80072fa:	4640      	mov	r0, r8
 80072fc:	4798      	blx	r3
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	3b01      	subs	r3, #1
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007308:	fa5f fa8a 	uxtb.w	sl, sl
 800730c:	f1ba 0f02 	cmp.w	sl, #2
 8007310:	d1ee      	bne.n	80072f0 <_scanf_float+0x2d4>
 8007312:	3d03      	subs	r5, #3
 8007314:	b2ed      	uxtb	r5, r5
 8007316:	1b76      	subs	r6, r6, r5
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	05da      	lsls	r2, r3, #23
 800731c:	d530      	bpl.n	8007380 <_scanf_float+0x364>
 800731e:	055b      	lsls	r3, r3, #21
 8007320:	d511      	bpl.n	8007346 <_scanf_float+0x32a>
 8007322:	9b01      	ldr	r3, [sp, #4]
 8007324:	429e      	cmp	r6, r3
 8007326:	f67f aebc 	bls.w	80070a2 <_scanf_float+0x86>
 800732a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800732e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007332:	463a      	mov	r2, r7
 8007334:	4640      	mov	r0, r8
 8007336:	4798      	blx	r3
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	3b01      	subs	r3, #1
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	e7f0      	b.n	8007322 <_scanf_float+0x306>
 8007340:	46aa      	mov	sl, r5
 8007342:	46b3      	mov	fp, r6
 8007344:	e7de      	b.n	8007304 <_scanf_float+0x2e8>
 8007346:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	2965      	cmp	r1, #101	@ 0x65
 800734e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007352:	f106 35ff 	add.w	r5, r6, #4294967295
 8007356:	6123      	str	r3, [r4, #16]
 8007358:	d00c      	beq.n	8007374 <_scanf_float+0x358>
 800735a:	2945      	cmp	r1, #69	@ 0x45
 800735c:	d00a      	beq.n	8007374 <_scanf_float+0x358>
 800735e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007362:	463a      	mov	r2, r7
 8007364:	4640      	mov	r0, r8
 8007366:	4798      	blx	r3
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800736e:	3b01      	subs	r3, #1
 8007370:	1eb5      	subs	r5, r6, #2
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007378:	463a      	mov	r2, r7
 800737a:	4640      	mov	r0, r8
 800737c:	4798      	blx	r3
 800737e:	462e      	mov	r6, r5
 8007380:	6822      	ldr	r2, [r4, #0]
 8007382:	f012 0210 	ands.w	r2, r2, #16
 8007386:	d001      	beq.n	800738c <_scanf_float+0x370>
 8007388:	2000      	movs	r0, #0
 800738a:	e68b      	b.n	80070a4 <_scanf_float+0x88>
 800738c:	7032      	strb	r2, [r6, #0]
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007398:	d11c      	bne.n	80073d4 <_scanf_float+0x3b8>
 800739a:	9b02      	ldr	r3, [sp, #8]
 800739c:	454b      	cmp	r3, r9
 800739e:	eba3 0209 	sub.w	r2, r3, r9
 80073a2:	d123      	bne.n	80073ec <_scanf_float+0x3d0>
 80073a4:	9901      	ldr	r1, [sp, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	4640      	mov	r0, r8
 80073aa:	f002 fbf9 	bl	8009ba0 <_strtod_r>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	6821      	ldr	r1, [r4, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f011 0f02 	tst.w	r1, #2
 80073b8:	ec57 6b10 	vmov	r6, r7, d0
 80073bc:	f103 0204 	add.w	r2, r3, #4
 80073c0:	d01f      	beq.n	8007402 <_scanf_float+0x3e6>
 80073c2:	9903      	ldr	r1, [sp, #12]
 80073c4:	600a      	str	r2, [r1, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	e9c3 6700 	strd	r6, r7, [r3]
 80073cc:	68e3      	ldr	r3, [r4, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60e3      	str	r3, [r4, #12]
 80073d2:	e7d9      	b.n	8007388 <_scanf_float+0x36c>
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0e4      	beq.n	80073a4 <_scanf_float+0x388>
 80073da:	9905      	ldr	r1, [sp, #20]
 80073dc:	230a      	movs	r3, #10
 80073de:	3101      	adds	r1, #1
 80073e0:	4640      	mov	r0, r8
 80073e2:	f002 fc5d 	bl	8009ca0 <_strtol_r>
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	9e05      	ldr	r6, [sp, #20]
 80073ea:	1ac2      	subs	r2, r0, r3
 80073ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80073f0:	429e      	cmp	r6, r3
 80073f2:	bf28      	it	cs
 80073f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80073f8:	4910      	ldr	r1, [pc, #64]	@ (800743c <_scanf_float+0x420>)
 80073fa:	4630      	mov	r0, r6
 80073fc:	f000 f8e4 	bl	80075c8 <siprintf>
 8007400:	e7d0      	b.n	80073a4 <_scanf_float+0x388>
 8007402:	f011 0f04 	tst.w	r1, #4
 8007406:	9903      	ldr	r1, [sp, #12]
 8007408:	600a      	str	r2, [r1, #0]
 800740a:	d1dc      	bne.n	80073c6 <_scanf_float+0x3aa>
 800740c:	681d      	ldr	r5, [r3, #0]
 800740e:	4632      	mov	r2, r6
 8007410:	463b      	mov	r3, r7
 8007412:	4630      	mov	r0, r6
 8007414:	4639      	mov	r1, r7
 8007416:	f7f9 fb91 	bl	8000b3c <__aeabi_dcmpun>
 800741a:	b128      	cbz	r0, 8007428 <_scanf_float+0x40c>
 800741c:	4808      	ldr	r0, [pc, #32]	@ (8007440 <_scanf_float+0x424>)
 800741e:	f000 f9b7 	bl	8007790 <nanf>
 8007422:	ed85 0a00 	vstr	s0, [r5]
 8007426:	e7d1      	b.n	80073cc <_scanf_float+0x3b0>
 8007428:	4630      	mov	r0, r6
 800742a:	4639      	mov	r1, r7
 800742c:	f7f9 fbe4 	bl	8000bf8 <__aeabi_d2f>
 8007430:	6028      	str	r0, [r5, #0]
 8007432:	e7cb      	b.n	80073cc <_scanf_float+0x3b0>
 8007434:	f04f 0900 	mov.w	r9, #0
 8007438:	e629      	b.n	800708e <_scanf_float+0x72>
 800743a:	bf00      	nop
 800743c:	0800af28 	.word	0x0800af28
 8007440:	0800b2bd 	.word	0x0800b2bd

08007444 <std>:
 8007444:	2300      	movs	r3, #0
 8007446:	b510      	push	{r4, lr}
 8007448:	4604      	mov	r4, r0
 800744a:	e9c0 3300 	strd	r3, r3, [r0]
 800744e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007452:	6083      	str	r3, [r0, #8]
 8007454:	8181      	strh	r1, [r0, #12]
 8007456:	6643      	str	r3, [r0, #100]	@ 0x64
 8007458:	81c2      	strh	r2, [r0, #14]
 800745a:	6183      	str	r3, [r0, #24]
 800745c:	4619      	mov	r1, r3
 800745e:	2208      	movs	r2, #8
 8007460:	305c      	adds	r0, #92	@ 0x5c
 8007462:	f000 f914 	bl	800768e <memset>
 8007466:	4b0d      	ldr	r3, [pc, #52]	@ (800749c <std+0x58>)
 8007468:	6263      	str	r3, [r4, #36]	@ 0x24
 800746a:	4b0d      	ldr	r3, [pc, #52]	@ (80074a0 <std+0x5c>)
 800746c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800746e:	4b0d      	ldr	r3, [pc, #52]	@ (80074a4 <std+0x60>)
 8007470:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007472:	4b0d      	ldr	r3, [pc, #52]	@ (80074a8 <std+0x64>)
 8007474:	6323      	str	r3, [r4, #48]	@ 0x30
 8007476:	4b0d      	ldr	r3, [pc, #52]	@ (80074ac <std+0x68>)
 8007478:	6224      	str	r4, [r4, #32]
 800747a:	429c      	cmp	r4, r3
 800747c:	d006      	beq.n	800748c <std+0x48>
 800747e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007482:	4294      	cmp	r4, r2
 8007484:	d002      	beq.n	800748c <std+0x48>
 8007486:	33d0      	adds	r3, #208	@ 0xd0
 8007488:	429c      	cmp	r4, r3
 800748a:	d105      	bne.n	8007498 <std+0x54>
 800748c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007494:	f000 b978 	b.w	8007788 <__retarget_lock_init_recursive>
 8007498:	bd10      	pop	{r4, pc}
 800749a:	bf00      	nop
 800749c:	08007609 	.word	0x08007609
 80074a0:	0800762b 	.word	0x0800762b
 80074a4:	08007663 	.word	0x08007663
 80074a8:	08007687 	.word	0x08007687
 80074ac:	2000d8cc 	.word	0x2000d8cc

080074b0 <stdio_exit_handler>:
 80074b0:	4a02      	ldr	r2, [pc, #8]	@ (80074bc <stdio_exit_handler+0xc>)
 80074b2:	4903      	ldr	r1, [pc, #12]	@ (80074c0 <stdio_exit_handler+0x10>)
 80074b4:	4803      	ldr	r0, [pc, #12]	@ (80074c4 <stdio_exit_handler+0x14>)
 80074b6:	f000 b869 	b.w	800758c <_fwalk_sglue>
 80074ba:	bf00      	nop
 80074bc:	2000d404 	.word	0x2000d404
 80074c0:	0800a05d 	.word	0x0800a05d
 80074c4:	2000d414 	.word	0x2000d414

080074c8 <cleanup_stdio>:
 80074c8:	6841      	ldr	r1, [r0, #4]
 80074ca:	4b0c      	ldr	r3, [pc, #48]	@ (80074fc <cleanup_stdio+0x34>)
 80074cc:	4299      	cmp	r1, r3
 80074ce:	b510      	push	{r4, lr}
 80074d0:	4604      	mov	r4, r0
 80074d2:	d001      	beq.n	80074d8 <cleanup_stdio+0x10>
 80074d4:	f002 fdc2 	bl	800a05c <_fflush_r>
 80074d8:	68a1      	ldr	r1, [r4, #8]
 80074da:	4b09      	ldr	r3, [pc, #36]	@ (8007500 <cleanup_stdio+0x38>)
 80074dc:	4299      	cmp	r1, r3
 80074de:	d002      	beq.n	80074e6 <cleanup_stdio+0x1e>
 80074e0:	4620      	mov	r0, r4
 80074e2:	f002 fdbb 	bl	800a05c <_fflush_r>
 80074e6:	68e1      	ldr	r1, [r4, #12]
 80074e8:	4b06      	ldr	r3, [pc, #24]	@ (8007504 <cleanup_stdio+0x3c>)
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d004      	beq.n	80074f8 <cleanup_stdio+0x30>
 80074ee:	4620      	mov	r0, r4
 80074f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f4:	f002 bdb2 	b.w	800a05c <_fflush_r>
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	bf00      	nop
 80074fc:	2000d8cc 	.word	0x2000d8cc
 8007500:	2000d934 	.word	0x2000d934
 8007504:	2000d99c 	.word	0x2000d99c

08007508 <global_stdio_init.part.0>:
 8007508:	b510      	push	{r4, lr}
 800750a:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <global_stdio_init.part.0+0x30>)
 800750c:	4c0b      	ldr	r4, [pc, #44]	@ (800753c <global_stdio_init.part.0+0x34>)
 800750e:	4a0c      	ldr	r2, [pc, #48]	@ (8007540 <global_stdio_init.part.0+0x38>)
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	4620      	mov	r0, r4
 8007514:	2200      	movs	r2, #0
 8007516:	2104      	movs	r1, #4
 8007518:	f7ff ff94 	bl	8007444 <std>
 800751c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007520:	2201      	movs	r2, #1
 8007522:	2109      	movs	r1, #9
 8007524:	f7ff ff8e 	bl	8007444 <std>
 8007528:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800752c:	2202      	movs	r2, #2
 800752e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007532:	2112      	movs	r1, #18
 8007534:	f7ff bf86 	b.w	8007444 <std>
 8007538:	2000da04 	.word	0x2000da04
 800753c:	2000d8cc 	.word	0x2000d8cc
 8007540:	080074b1 	.word	0x080074b1

08007544 <__sfp_lock_acquire>:
 8007544:	4801      	ldr	r0, [pc, #4]	@ (800754c <__sfp_lock_acquire+0x8>)
 8007546:	f000 b920 	b.w	800778a <__retarget_lock_acquire_recursive>
 800754a:	bf00      	nop
 800754c:	2000da0d 	.word	0x2000da0d

08007550 <__sfp_lock_release>:
 8007550:	4801      	ldr	r0, [pc, #4]	@ (8007558 <__sfp_lock_release+0x8>)
 8007552:	f000 b91b 	b.w	800778c <__retarget_lock_release_recursive>
 8007556:	bf00      	nop
 8007558:	2000da0d 	.word	0x2000da0d

0800755c <__sinit>:
 800755c:	b510      	push	{r4, lr}
 800755e:	4604      	mov	r4, r0
 8007560:	f7ff fff0 	bl	8007544 <__sfp_lock_acquire>
 8007564:	6a23      	ldr	r3, [r4, #32]
 8007566:	b11b      	cbz	r3, 8007570 <__sinit+0x14>
 8007568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756c:	f7ff bff0 	b.w	8007550 <__sfp_lock_release>
 8007570:	4b04      	ldr	r3, [pc, #16]	@ (8007584 <__sinit+0x28>)
 8007572:	6223      	str	r3, [r4, #32]
 8007574:	4b04      	ldr	r3, [pc, #16]	@ (8007588 <__sinit+0x2c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1f5      	bne.n	8007568 <__sinit+0xc>
 800757c:	f7ff ffc4 	bl	8007508 <global_stdio_init.part.0>
 8007580:	e7f2      	b.n	8007568 <__sinit+0xc>
 8007582:	bf00      	nop
 8007584:	080074c9 	.word	0x080074c9
 8007588:	2000da04 	.word	0x2000da04

0800758c <_fwalk_sglue>:
 800758c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007590:	4607      	mov	r7, r0
 8007592:	4688      	mov	r8, r1
 8007594:	4614      	mov	r4, r2
 8007596:	2600      	movs	r6, #0
 8007598:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800759c:	f1b9 0901 	subs.w	r9, r9, #1
 80075a0:	d505      	bpl.n	80075ae <_fwalk_sglue+0x22>
 80075a2:	6824      	ldr	r4, [r4, #0]
 80075a4:	2c00      	cmp	r4, #0
 80075a6:	d1f7      	bne.n	8007598 <_fwalk_sglue+0xc>
 80075a8:	4630      	mov	r0, r6
 80075aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ae:	89ab      	ldrh	r3, [r5, #12]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d907      	bls.n	80075c4 <_fwalk_sglue+0x38>
 80075b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075b8:	3301      	adds	r3, #1
 80075ba:	d003      	beq.n	80075c4 <_fwalk_sglue+0x38>
 80075bc:	4629      	mov	r1, r5
 80075be:	4638      	mov	r0, r7
 80075c0:	47c0      	blx	r8
 80075c2:	4306      	orrs	r6, r0
 80075c4:	3568      	adds	r5, #104	@ 0x68
 80075c6:	e7e9      	b.n	800759c <_fwalk_sglue+0x10>

080075c8 <siprintf>:
 80075c8:	b40e      	push	{r1, r2, r3}
 80075ca:	b500      	push	{lr}
 80075cc:	b09c      	sub	sp, #112	@ 0x70
 80075ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80075d0:	9002      	str	r0, [sp, #8]
 80075d2:	9006      	str	r0, [sp, #24]
 80075d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80075d8:	4809      	ldr	r0, [pc, #36]	@ (8007600 <siprintf+0x38>)
 80075da:	9107      	str	r1, [sp, #28]
 80075dc:	9104      	str	r1, [sp, #16]
 80075de:	4909      	ldr	r1, [pc, #36]	@ (8007604 <siprintf+0x3c>)
 80075e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e4:	9105      	str	r1, [sp, #20]
 80075e6:	6800      	ldr	r0, [r0, #0]
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	a902      	add	r1, sp, #8
 80075ec:	f002 fbb6 	bl	8009d5c <_svfiprintf_r>
 80075f0:	9b02      	ldr	r3, [sp, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]
 80075f6:	b01c      	add	sp, #112	@ 0x70
 80075f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075fc:	b003      	add	sp, #12
 80075fe:	4770      	bx	lr
 8007600:	2000d410 	.word	0x2000d410
 8007604:	ffff0208 	.word	0xffff0208

08007608 <__sread>:
 8007608:	b510      	push	{r4, lr}
 800760a:	460c      	mov	r4, r1
 800760c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007610:	f000 f86c 	bl	80076ec <_read_r>
 8007614:	2800      	cmp	r0, #0
 8007616:	bfab      	itete	ge
 8007618:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800761a:	89a3      	ldrhlt	r3, [r4, #12]
 800761c:	181b      	addge	r3, r3, r0
 800761e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007622:	bfac      	ite	ge
 8007624:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007626:	81a3      	strhlt	r3, [r4, #12]
 8007628:	bd10      	pop	{r4, pc}

0800762a <__swrite>:
 800762a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762e:	461f      	mov	r7, r3
 8007630:	898b      	ldrh	r3, [r1, #12]
 8007632:	05db      	lsls	r3, r3, #23
 8007634:	4605      	mov	r5, r0
 8007636:	460c      	mov	r4, r1
 8007638:	4616      	mov	r6, r2
 800763a:	d505      	bpl.n	8007648 <__swrite+0x1e>
 800763c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007640:	2302      	movs	r3, #2
 8007642:	2200      	movs	r2, #0
 8007644:	f000 f840 	bl	80076c8 <_lseek_r>
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800764e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	4632      	mov	r2, r6
 8007656:	463b      	mov	r3, r7
 8007658:	4628      	mov	r0, r5
 800765a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800765e:	f000 b857 	b.w	8007710 <_write_r>

08007662 <__sseek>:
 8007662:	b510      	push	{r4, lr}
 8007664:	460c      	mov	r4, r1
 8007666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766a:	f000 f82d 	bl	80076c8 <_lseek_r>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	bf15      	itete	ne
 8007674:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007676:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800767a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800767e:	81a3      	strheq	r3, [r4, #12]
 8007680:	bf18      	it	ne
 8007682:	81a3      	strhne	r3, [r4, #12]
 8007684:	bd10      	pop	{r4, pc}

08007686 <__sclose>:
 8007686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768a:	f000 b80d 	b.w	80076a8 <_close_r>

0800768e <memset>:
 800768e:	4402      	add	r2, r0
 8007690:	4603      	mov	r3, r0
 8007692:	4293      	cmp	r3, r2
 8007694:	d100      	bne.n	8007698 <memset+0xa>
 8007696:	4770      	bx	lr
 8007698:	f803 1b01 	strb.w	r1, [r3], #1
 800769c:	e7f9      	b.n	8007692 <memset+0x4>
	...

080076a0 <_localeconv_r>:
 80076a0:	4800      	ldr	r0, [pc, #0]	@ (80076a4 <_localeconv_r+0x4>)
 80076a2:	4770      	bx	lr
 80076a4:	2000d550 	.word	0x2000d550

080076a8 <_close_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d06      	ldr	r5, [pc, #24]	@ (80076c4 <_close_r+0x1c>)
 80076ac:	2300      	movs	r3, #0
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	602b      	str	r3, [r5, #0]
 80076b4:	f7fb fbda 	bl	8002e6c <_close>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d102      	bne.n	80076c2 <_close_r+0x1a>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b103      	cbz	r3, 80076c2 <_close_r+0x1a>
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
 80076c4:	2000da08 	.word	0x2000da08

080076c8 <_lseek_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4d07      	ldr	r5, [pc, #28]	@ (80076e8 <_lseek_r+0x20>)
 80076cc:	4604      	mov	r4, r0
 80076ce:	4608      	mov	r0, r1
 80076d0:	4611      	mov	r1, r2
 80076d2:	2200      	movs	r2, #0
 80076d4:	602a      	str	r2, [r5, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	f7fb fbef 	bl	8002eba <_lseek>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_lseek_r+0x1e>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_lseek_r+0x1e>
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	2000da08 	.word	0x2000da08

080076ec <_read_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4d07      	ldr	r5, [pc, #28]	@ (800770c <_read_r+0x20>)
 80076f0:	4604      	mov	r4, r0
 80076f2:	4608      	mov	r0, r1
 80076f4:	4611      	mov	r1, r2
 80076f6:	2200      	movs	r2, #0
 80076f8:	602a      	str	r2, [r5, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	f7fb fb7d 	bl	8002dfa <_read>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_read_r+0x1e>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	b103      	cbz	r3, 800770a <_read_r+0x1e>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	2000da08 	.word	0x2000da08

08007710 <_write_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d07      	ldr	r5, [pc, #28]	@ (8007730 <_write_r+0x20>)
 8007714:	4604      	mov	r4, r0
 8007716:	4608      	mov	r0, r1
 8007718:	4611      	mov	r1, r2
 800771a:	2200      	movs	r2, #0
 800771c:	602a      	str	r2, [r5, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	f7fb fb88 	bl	8002e34 <_write>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_write_r+0x1e>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_write_r+0x1e>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	2000da08 	.word	0x2000da08

08007734 <__errno>:
 8007734:	4b01      	ldr	r3, [pc, #4]	@ (800773c <__errno+0x8>)
 8007736:	6818      	ldr	r0, [r3, #0]
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	2000d410 	.word	0x2000d410

08007740 <__libc_init_array>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	4d0d      	ldr	r5, [pc, #52]	@ (8007778 <__libc_init_array+0x38>)
 8007744:	4c0d      	ldr	r4, [pc, #52]	@ (800777c <__libc_init_array+0x3c>)
 8007746:	1b64      	subs	r4, r4, r5
 8007748:	10a4      	asrs	r4, r4, #2
 800774a:	2600      	movs	r6, #0
 800774c:	42a6      	cmp	r6, r4
 800774e:	d109      	bne.n	8007764 <__libc_init_array+0x24>
 8007750:	4d0b      	ldr	r5, [pc, #44]	@ (8007780 <__libc_init_array+0x40>)
 8007752:	4c0c      	ldr	r4, [pc, #48]	@ (8007784 <__libc_init_array+0x44>)
 8007754:	f003 fb72 	bl	800ae3c <_init>
 8007758:	1b64      	subs	r4, r4, r5
 800775a:	10a4      	asrs	r4, r4, #2
 800775c:	2600      	movs	r6, #0
 800775e:	42a6      	cmp	r6, r4
 8007760:	d105      	bne.n	800776e <__libc_init_array+0x2e>
 8007762:	bd70      	pop	{r4, r5, r6, pc}
 8007764:	f855 3b04 	ldr.w	r3, [r5], #4
 8007768:	4798      	blx	r3
 800776a:	3601      	adds	r6, #1
 800776c:	e7ee      	b.n	800774c <__libc_init_array+0xc>
 800776e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007772:	4798      	blx	r3
 8007774:	3601      	adds	r6, #1
 8007776:	e7f2      	b.n	800775e <__libc_init_array+0x1e>
 8007778:	0800b328 	.word	0x0800b328
 800777c:	0800b328 	.word	0x0800b328
 8007780:	0800b328 	.word	0x0800b328
 8007784:	0800b32c 	.word	0x0800b32c

08007788 <__retarget_lock_init_recursive>:
 8007788:	4770      	bx	lr

0800778a <__retarget_lock_acquire_recursive>:
 800778a:	4770      	bx	lr

0800778c <__retarget_lock_release_recursive>:
 800778c:	4770      	bx	lr
	...

08007790 <nanf>:
 8007790:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007798 <nanf+0x8>
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	7fc00000 	.word	0x7fc00000

0800779c <quorem>:
 800779c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	6903      	ldr	r3, [r0, #16]
 80077a2:	690c      	ldr	r4, [r1, #16]
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	4607      	mov	r7, r0
 80077a8:	db7e      	blt.n	80078a8 <quorem+0x10c>
 80077aa:	3c01      	subs	r4, #1
 80077ac:	f101 0814 	add.w	r8, r1, #20
 80077b0:	00a3      	lsls	r3, r4, #2
 80077b2:	f100 0514 	add.w	r5, r0, #20
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077c6:	3301      	adds	r3, #1
 80077c8:	429a      	cmp	r2, r3
 80077ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80077d2:	d32e      	bcc.n	8007832 <quorem+0x96>
 80077d4:	f04f 0a00 	mov.w	sl, #0
 80077d8:	46c4      	mov	ip, r8
 80077da:	46ae      	mov	lr, r5
 80077dc:	46d3      	mov	fp, sl
 80077de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077e2:	b298      	uxth	r0, r3
 80077e4:	fb06 a000 	mla	r0, r6, r0, sl
 80077e8:	0c02      	lsrs	r2, r0, #16
 80077ea:	0c1b      	lsrs	r3, r3, #16
 80077ec:	fb06 2303 	mla	r3, r6, r3, r2
 80077f0:	f8de 2000 	ldr.w	r2, [lr]
 80077f4:	b280      	uxth	r0, r0
 80077f6:	b292      	uxth	r2, r2
 80077f8:	1a12      	subs	r2, r2, r0
 80077fa:	445a      	add	r2, fp
 80077fc:	f8de 0000 	ldr.w	r0, [lr]
 8007800:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007804:	b29b      	uxth	r3, r3
 8007806:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800780a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800780e:	b292      	uxth	r2, r2
 8007810:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007814:	45e1      	cmp	r9, ip
 8007816:	f84e 2b04 	str.w	r2, [lr], #4
 800781a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800781e:	d2de      	bcs.n	80077de <quorem+0x42>
 8007820:	9b00      	ldr	r3, [sp, #0]
 8007822:	58eb      	ldr	r3, [r5, r3]
 8007824:	b92b      	cbnz	r3, 8007832 <quorem+0x96>
 8007826:	9b01      	ldr	r3, [sp, #4]
 8007828:	3b04      	subs	r3, #4
 800782a:	429d      	cmp	r5, r3
 800782c:	461a      	mov	r2, r3
 800782e:	d32f      	bcc.n	8007890 <quorem+0xf4>
 8007830:	613c      	str	r4, [r7, #16]
 8007832:	4638      	mov	r0, r7
 8007834:	f001 f9c4 	bl	8008bc0 <__mcmp>
 8007838:	2800      	cmp	r0, #0
 800783a:	db25      	blt.n	8007888 <quorem+0xec>
 800783c:	4629      	mov	r1, r5
 800783e:	2000      	movs	r0, #0
 8007840:	f858 2b04 	ldr.w	r2, [r8], #4
 8007844:	f8d1 c000 	ldr.w	ip, [r1]
 8007848:	fa1f fe82 	uxth.w	lr, r2
 800784c:	fa1f f38c 	uxth.w	r3, ip
 8007850:	eba3 030e 	sub.w	r3, r3, lr
 8007854:	4403      	add	r3, r0
 8007856:	0c12      	lsrs	r2, r2, #16
 8007858:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800785c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007866:	45c1      	cmp	r9, r8
 8007868:	f841 3b04 	str.w	r3, [r1], #4
 800786c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007870:	d2e6      	bcs.n	8007840 <quorem+0xa4>
 8007872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800787a:	b922      	cbnz	r2, 8007886 <quorem+0xea>
 800787c:	3b04      	subs	r3, #4
 800787e:	429d      	cmp	r5, r3
 8007880:	461a      	mov	r2, r3
 8007882:	d30b      	bcc.n	800789c <quorem+0x100>
 8007884:	613c      	str	r4, [r7, #16]
 8007886:	3601      	adds	r6, #1
 8007888:	4630      	mov	r0, r6
 800788a:	b003      	add	sp, #12
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	3b04      	subs	r3, #4
 8007894:	2a00      	cmp	r2, #0
 8007896:	d1cb      	bne.n	8007830 <quorem+0x94>
 8007898:	3c01      	subs	r4, #1
 800789a:	e7c6      	b.n	800782a <quorem+0x8e>
 800789c:	6812      	ldr	r2, [r2, #0]
 800789e:	3b04      	subs	r3, #4
 80078a0:	2a00      	cmp	r2, #0
 80078a2:	d1ef      	bne.n	8007884 <quorem+0xe8>
 80078a4:	3c01      	subs	r4, #1
 80078a6:	e7ea      	b.n	800787e <quorem+0xe2>
 80078a8:	2000      	movs	r0, #0
 80078aa:	e7ee      	b.n	800788a <quorem+0xee>
 80078ac:	0000      	movs	r0, r0
	...

080078b0 <_dtoa_r>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	69c7      	ldr	r7, [r0, #28]
 80078b6:	b099      	sub	sp, #100	@ 0x64
 80078b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078bc:	ec55 4b10 	vmov	r4, r5, d0
 80078c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80078c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80078c4:	4683      	mov	fp, r0
 80078c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80078c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078ca:	b97f      	cbnz	r7, 80078ec <_dtoa_r+0x3c>
 80078cc:	2010      	movs	r0, #16
 80078ce:	f000 fdfd 	bl	80084cc <malloc>
 80078d2:	4602      	mov	r2, r0
 80078d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80078d8:	b920      	cbnz	r0, 80078e4 <_dtoa_r+0x34>
 80078da:	4ba7      	ldr	r3, [pc, #668]	@ (8007b78 <_dtoa_r+0x2c8>)
 80078dc:	21ef      	movs	r1, #239	@ 0xef
 80078de:	48a7      	ldr	r0, [pc, #668]	@ (8007b7c <_dtoa_r+0x2cc>)
 80078e0:	f002 fc36 	bl	800a150 <__assert_func>
 80078e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078e8:	6007      	str	r7, [r0, #0]
 80078ea:	60c7      	str	r7, [r0, #12]
 80078ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	b159      	cbz	r1, 800790c <_dtoa_r+0x5c>
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	604a      	str	r2, [r1, #4]
 80078f8:	2301      	movs	r3, #1
 80078fa:	4093      	lsls	r3, r2
 80078fc:	608b      	str	r3, [r1, #8]
 80078fe:	4658      	mov	r0, fp
 8007900:	f000 feda 	bl	80086b8 <_Bfree>
 8007904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	1e2b      	subs	r3, r5, #0
 800790e:	bfb9      	ittee	lt
 8007910:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007914:	9303      	strlt	r3, [sp, #12]
 8007916:	2300      	movge	r3, #0
 8007918:	6033      	strge	r3, [r6, #0]
 800791a:	9f03      	ldr	r7, [sp, #12]
 800791c:	4b98      	ldr	r3, [pc, #608]	@ (8007b80 <_dtoa_r+0x2d0>)
 800791e:	bfbc      	itt	lt
 8007920:	2201      	movlt	r2, #1
 8007922:	6032      	strlt	r2, [r6, #0]
 8007924:	43bb      	bics	r3, r7
 8007926:	d112      	bne.n	800794e <_dtoa_r+0x9e>
 8007928:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800792a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007934:	4323      	orrs	r3, r4
 8007936:	f000 854d 	beq.w	80083d4 <_dtoa_r+0xb24>
 800793a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800793c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007b94 <_dtoa_r+0x2e4>
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 854f 	beq.w	80083e4 <_dtoa_r+0xb34>
 8007946:	f10a 0303 	add.w	r3, sl, #3
 800794a:	f000 bd49 	b.w	80083e0 <_dtoa_r+0xb30>
 800794e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007952:	2200      	movs	r2, #0
 8007954:	ec51 0b17 	vmov	r0, r1, d7
 8007958:	2300      	movs	r3, #0
 800795a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800795e:	f7f9 f8bb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007962:	4680      	mov	r8, r0
 8007964:	b158      	cbz	r0, 800797e <_dtoa_r+0xce>
 8007966:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007968:	2301      	movs	r3, #1
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800796e:	b113      	cbz	r3, 8007976 <_dtoa_r+0xc6>
 8007970:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007972:	4b84      	ldr	r3, [pc, #528]	@ (8007b84 <_dtoa_r+0x2d4>)
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007b98 <_dtoa_r+0x2e8>
 800797a:	f000 bd33 	b.w	80083e4 <_dtoa_r+0xb34>
 800797e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007982:	aa16      	add	r2, sp, #88	@ 0x58
 8007984:	a917      	add	r1, sp, #92	@ 0x5c
 8007986:	4658      	mov	r0, fp
 8007988:	f001 fa3a 	bl	8008e00 <__d2b>
 800798c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007990:	4681      	mov	r9, r0
 8007992:	2e00      	cmp	r6, #0
 8007994:	d077      	beq.n	8007a86 <_dtoa_r+0x1d6>
 8007996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007998:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800799c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80079a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80079ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079b0:	4619      	mov	r1, r3
 80079b2:	2200      	movs	r2, #0
 80079b4:	4b74      	ldr	r3, [pc, #464]	@ (8007b88 <_dtoa_r+0x2d8>)
 80079b6:	f7f8 fc6f 	bl	8000298 <__aeabi_dsub>
 80079ba:	a369      	add	r3, pc, #420	@ (adr r3, 8007b60 <_dtoa_r+0x2b0>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fe22 	bl	8000608 <__aeabi_dmul>
 80079c4:	a368      	add	r3, pc, #416	@ (adr r3, 8007b68 <_dtoa_r+0x2b8>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f7f8 fc67 	bl	800029c <__adddf3>
 80079ce:	4604      	mov	r4, r0
 80079d0:	4630      	mov	r0, r6
 80079d2:	460d      	mov	r5, r1
 80079d4:	f7f8 fdae 	bl	8000534 <__aeabi_i2d>
 80079d8:	a365      	add	r3, pc, #404	@ (adr r3, 8007b70 <_dtoa_r+0x2c0>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 fe13 	bl	8000608 <__aeabi_dmul>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7f8 fc57 	bl	800029c <__adddf3>
 80079ee:	4604      	mov	r4, r0
 80079f0:	460d      	mov	r5, r1
 80079f2:	f7f9 f8b9 	bl	8000b68 <__aeabi_d2iz>
 80079f6:	2200      	movs	r2, #0
 80079f8:	4607      	mov	r7, r0
 80079fa:	2300      	movs	r3, #0
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f9 f874 	bl	8000aec <__aeabi_dcmplt>
 8007a04:	b140      	cbz	r0, 8007a18 <_dtoa_r+0x168>
 8007a06:	4638      	mov	r0, r7
 8007a08:	f7f8 fd94 	bl	8000534 <__aeabi_i2d>
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	462b      	mov	r3, r5
 8007a10:	f7f9 f862 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a14:	b900      	cbnz	r0, 8007a18 <_dtoa_r+0x168>
 8007a16:	3f01      	subs	r7, #1
 8007a18:	2f16      	cmp	r7, #22
 8007a1a:	d851      	bhi.n	8007ac0 <_dtoa_r+0x210>
 8007a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8007b8c <_dtoa_r+0x2dc>)
 8007a1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a2a:	f7f9 f85f 	bl	8000aec <__aeabi_dcmplt>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d048      	beq.n	8007ac4 <_dtoa_r+0x214>
 8007a32:	3f01      	subs	r7, #1
 8007a34:	2300      	movs	r3, #0
 8007a36:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a3a:	1b9b      	subs	r3, r3, r6
 8007a3c:	1e5a      	subs	r2, r3, #1
 8007a3e:	bf44      	itt	mi
 8007a40:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a44:	2300      	movmi	r3, #0
 8007a46:	9208      	str	r2, [sp, #32]
 8007a48:	bf54      	ite	pl
 8007a4a:	f04f 0800 	movpl.w	r8, #0
 8007a4e:	9308      	strmi	r3, [sp, #32]
 8007a50:	2f00      	cmp	r7, #0
 8007a52:	db39      	blt.n	8007ac8 <_dtoa_r+0x218>
 8007a54:	9b08      	ldr	r3, [sp, #32]
 8007a56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007a58:	443b      	add	r3, r7
 8007a5a:	9308      	str	r3, [sp, #32]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a62:	2b09      	cmp	r3, #9
 8007a64:	d864      	bhi.n	8007b30 <_dtoa_r+0x280>
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	bfc4      	itt	gt
 8007a6a:	3b04      	subgt	r3, #4
 8007a6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a70:	f1a3 0302 	sub.w	r3, r3, #2
 8007a74:	bfcc      	ite	gt
 8007a76:	2400      	movgt	r4, #0
 8007a78:	2401      	movle	r4, #1
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d863      	bhi.n	8007b46 <_dtoa_r+0x296>
 8007a7e:	e8df f003 	tbb	[pc, r3]
 8007a82:	372a      	.short	0x372a
 8007a84:	5535      	.short	0x5535
 8007a86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007a8a:	441e      	add	r6, r3
 8007a8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	bfc1      	itttt	gt
 8007a94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a98:	409f      	lslgt	r7, r3
 8007a9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007aa2:	bfd6      	itet	le
 8007aa4:	f1c3 0320 	rsble	r3, r3, #32
 8007aa8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007aac:	fa04 f003 	lslle.w	r0, r4, r3
 8007ab0:	f7f8 fd30 	bl	8000514 <__aeabi_ui2d>
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007aba:	3e01      	subs	r6, #1
 8007abc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007abe:	e777      	b.n	80079b0 <_dtoa_r+0x100>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7b8      	b.n	8007a36 <_dtoa_r+0x186>
 8007ac4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ac6:	e7b7      	b.n	8007a38 <_dtoa_r+0x188>
 8007ac8:	427b      	negs	r3, r7
 8007aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8007acc:	2300      	movs	r3, #0
 8007ace:	eba8 0807 	sub.w	r8, r8, r7
 8007ad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ad4:	e7c4      	b.n	8007a60 <_dtoa_r+0x1b0>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dc35      	bgt.n	8007b4c <_dtoa_r+0x29c>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	9307      	str	r3, [sp, #28]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aea:	e00b      	b.n	8007b04 <_dtoa_r+0x254>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7f3      	b.n	8007ad8 <_dtoa_r+0x228>
 8007af0:	2300      	movs	r3, #0
 8007af2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007af4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007af6:	18fb      	adds	r3, r7, r3
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	9307      	str	r3, [sp, #28]
 8007b00:	bfb8      	it	lt
 8007b02:	2301      	movlt	r3, #1
 8007b04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b08:	2100      	movs	r1, #0
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	f102 0514 	add.w	r5, r2, #20
 8007b10:	429d      	cmp	r5, r3
 8007b12:	d91f      	bls.n	8007b54 <_dtoa_r+0x2a4>
 8007b14:	6041      	str	r1, [r0, #4]
 8007b16:	4658      	mov	r0, fp
 8007b18:	f000 fd8e 	bl	8008638 <_Balloc>
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d13c      	bne.n	8007b9c <_dtoa_r+0x2ec>
 8007b22:	4b1b      	ldr	r3, [pc, #108]	@ (8007b90 <_dtoa_r+0x2e0>)
 8007b24:	4602      	mov	r2, r0
 8007b26:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b2a:	e6d8      	b.n	80078de <_dtoa_r+0x2e>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e7e0      	b.n	8007af2 <_dtoa_r+0x242>
 8007b30:	2401      	movs	r4, #1
 8007b32:	2300      	movs	r3, #0
 8007b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b38:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	2200      	movs	r2, #0
 8007b42:	2312      	movs	r3, #18
 8007b44:	e7d0      	b.n	8007ae8 <_dtoa_r+0x238>
 8007b46:	2301      	movs	r3, #1
 8007b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b4a:	e7f5      	b.n	8007b38 <_dtoa_r+0x288>
 8007b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	9307      	str	r3, [sp, #28]
 8007b52:	e7d7      	b.n	8007b04 <_dtoa_r+0x254>
 8007b54:	3101      	adds	r1, #1
 8007b56:	0052      	lsls	r2, r2, #1
 8007b58:	e7d8      	b.n	8007b0c <_dtoa_r+0x25c>
 8007b5a:	bf00      	nop
 8007b5c:	f3af 8000 	nop.w
 8007b60:	636f4361 	.word	0x636f4361
 8007b64:	3fd287a7 	.word	0x3fd287a7
 8007b68:	8b60c8b3 	.word	0x8b60c8b3
 8007b6c:	3fc68a28 	.word	0x3fc68a28
 8007b70:	509f79fb 	.word	0x509f79fb
 8007b74:	3fd34413 	.word	0x3fd34413
 8007b78:	0800af3a 	.word	0x0800af3a
 8007b7c:	0800af51 	.word	0x0800af51
 8007b80:	7ff00000 	.word	0x7ff00000
 8007b84:	0800af05 	.word	0x0800af05
 8007b88:	3ff80000 	.word	0x3ff80000
 8007b8c:	0800b048 	.word	0x0800b048
 8007b90:	0800afa9 	.word	0x0800afa9
 8007b94:	0800af36 	.word	0x0800af36
 8007b98:	0800af04 	.word	0x0800af04
 8007b9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ba0:	6018      	str	r0, [r3, #0]
 8007ba2:	9b07      	ldr	r3, [sp, #28]
 8007ba4:	2b0e      	cmp	r3, #14
 8007ba6:	f200 80a4 	bhi.w	8007cf2 <_dtoa_r+0x442>
 8007baa:	2c00      	cmp	r4, #0
 8007bac:	f000 80a1 	beq.w	8007cf2 <_dtoa_r+0x442>
 8007bb0:	2f00      	cmp	r7, #0
 8007bb2:	dd33      	ble.n	8007c1c <_dtoa_r+0x36c>
 8007bb4:	4bad      	ldr	r3, [pc, #692]	@ (8007e6c <_dtoa_r+0x5bc>)
 8007bb6:	f007 020f 	and.w	r2, r7, #15
 8007bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bbe:	ed93 7b00 	vldr	d7, [r3]
 8007bc2:	05f8      	lsls	r0, r7, #23
 8007bc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007bc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007bcc:	d516      	bpl.n	8007bfc <_dtoa_r+0x34c>
 8007bce:	4ba8      	ldr	r3, [pc, #672]	@ (8007e70 <_dtoa_r+0x5c0>)
 8007bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bd8:	f7f8 fe40 	bl	800085c <__aeabi_ddiv>
 8007bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007be0:	f004 040f 	and.w	r4, r4, #15
 8007be4:	2603      	movs	r6, #3
 8007be6:	4da2      	ldr	r5, [pc, #648]	@ (8007e70 <_dtoa_r+0x5c0>)
 8007be8:	b954      	cbnz	r4, 8007c00 <_dtoa_r+0x350>
 8007bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf2:	f7f8 fe33 	bl	800085c <__aeabi_ddiv>
 8007bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfa:	e028      	b.n	8007c4e <_dtoa_r+0x39e>
 8007bfc:	2602      	movs	r6, #2
 8007bfe:	e7f2      	b.n	8007be6 <_dtoa_r+0x336>
 8007c00:	07e1      	lsls	r1, r4, #31
 8007c02:	d508      	bpl.n	8007c16 <_dtoa_r+0x366>
 8007c04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c0c:	f7f8 fcfc 	bl	8000608 <__aeabi_dmul>
 8007c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c14:	3601      	adds	r6, #1
 8007c16:	1064      	asrs	r4, r4, #1
 8007c18:	3508      	adds	r5, #8
 8007c1a:	e7e5      	b.n	8007be8 <_dtoa_r+0x338>
 8007c1c:	f000 80d2 	beq.w	8007dc4 <_dtoa_r+0x514>
 8007c20:	427c      	negs	r4, r7
 8007c22:	4b92      	ldr	r3, [pc, #584]	@ (8007e6c <_dtoa_r+0x5bc>)
 8007c24:	4d92      	ldr	r5, [pc, #584]	@ (8007e70 <_dtoa_r+0x5c0>)
 8007c26:	f004 020f 	and.w	r2, r4, #15
 8007c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c36:	f7f8 fce7 	bl	8000608 <__aeabi_dmul>
 8007c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c3e:	1124      	asrs	r4, r4, #4
 8007c40:	2300      	movs	r3, #0
 8007c42:	2602      	movs	r6, #2
 8007c44:	2c00      	cmp	r4, #0
 8007c46:	f040 80b2 	bne.w	8007dae <_dtoa_r+0x4fe>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1d3      	bne.n	8007bf6 <_dtoa_r+0x346>
 8007c4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80b7 	beq.w	8007dc8 <_dtoa_r+0x518>
 8007c5a:	4b86      	ldr	r3, [pc, #536]	@ (8007e74 <_dtoa_r+0x5c4>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 ff43 	bl	8000aec <__aeabi_dcmplt>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	f000 80ae 	beq.w	8007dc8 <_dtoa_r+0x518>
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 80aa 	beq.w	8007dc8 <_dtoa_r+0x518>
 8007c74:	9b00      	ldr	r3, [sp, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dd37      	ble.n	8007cea <_dtoa_r+0x43a>
 8007c7a:	1e7b      	subs	r3, r7, #1
 8007c7c:	9304      	str	r3, [sp, #16]
 8007c7e:	4620      	mov	r0, r4
 8007c80:	4b7d      	ldr	r3, [pc, #500]	@ (8007e78 <_dtoa_r+0x5c8>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	4629      	mov	r1, r5
 8007c86:	f7f8 fcbf 	bl	8000608 <__aeabi_dmul>
 8007c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c8e:	9c00      	ldr	r4, [sp, #0]
 8007c90:	3601      	adds	r6, #1
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7f8 fc4e 	bl	8000534 <__aeabi_i2d>
 8007c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c9c:	f7f8 fcb4 	bl	8000608 <__aeabi_dmul>
 8007ca0:	4b76      	ldr	r3, [pc, #472]	@ (8007e7c <_dtoa_r+0x5cc>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f7f8 fafa 	bl	800029c <__adddf3>
 8007ca8:	4605      	mov	r5, r0
 8007caa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	f040 808d 	bne.w	8007dce <_dtoa_r+0x51e>
 8007cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cb8:	4b71      	ldr	r3, [pc, #452]	@ (8007e80 <_dtoa_r+0x5d0>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f7f8 faec 	bl	8000298 <__aeabi_dsub>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cc8:	462a      	mov	r2, r5
 8007cca:	4633      	mov	r3, r6
 8007ccc:	f7f8 ff2c 	bl	8000b28 <__aeabi_dcmpgt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	f040 828b 	bne.w	80081ec <_dtoa_r+0x93c>
 8007cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cda:	462a      	mov	r2, r5
 8007cdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ce0:	f7f8 ff04 	bl	8000aec <__aeabi_dcmplt>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f040 8128 	bne.w	8007f3a <_dtoa_r+0x68a>
 8007cea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007cee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f2c0 815a 	blt.w	8007fae <_dtoa_r+0x6fe>
 8007cfa:	2f0e      	cmp	r7, #14
 8007cfc:	f300 8157 	bgt.w	8007fae <_dtoa_r+0x6fe>
 8007d00:	4b5a      	ldr	r3, [pc, #360]	@ (8007e6c <_dtoa_r+0x5bc>)
 8007d02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d06:	ed93 7b00 	vldr	d7, [r3]
 8007d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	ed8d 7b00 	vstr	d7, [sp]
 8007d12:	da03      	bge.n	8007d1c <_dtoa_r+0x46c>
 8007d14:	9b07      	ldr	r3, [sp, #28]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f340 8101 	ble.w	8007f1e <_dtoa_r+0x66e>
 8007d1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d20:	4656      	mov	r6, sl
 8007d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fd97 	bl	800085c <__aeabi_ddiv>
 8007d2e:	f7f8 ff1b 	bl	8000b68 <__aeabi_d2iz>
 8007d32:	4680      	mov	r8, r0
 8007d34:	f7f8 fbfe 	bl	8000534 <__aeabi_i2d>
 8007d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d3c:	f7f8 fc64 	bl	8000608 <__aeabi_dmul>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d4c:	f7f8 faa4 	bl	8000298 <__aeabi_dsub>
 8007d50:	f806 4b01 	strb.w	r4, [r6], #1
 8007d54:	9d07      	ldr	r5, [sp, #28]
 8007d56:	eba6 040a 	sub.w	r4, r6, sl
 8007d5a:	42a5      	cmp	r5, r4
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	f040 8117 	bne.w	8007f92 <_dtoa_r+0x6e2>
 8007d64:	f7f8 fa9a 	bl	800029c <__adddf3>
 8007d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	460d      	mov	r5, r1
 8007d70:	f7f8 feda 	bl	8000b28 <__aeabi_dcmpgt>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	f040 80f9 	bne.w	8007f6c <_dtoa_r+0x6bc>
 8007d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	4629      	mov	r1, r5
 8007d82:	f7f8 fea9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d86:	b118      	cbz	r0, 8007d90 <_dtoa_r+0x4e0>
 8007d88:	f018 0f01 	tst.w	r8, #1
 8007d8c:	f040 80ee 	bne.w	8007f6c <_dtoa_r+0x6bc>
 8007d90:	4649      	mov	r1, r9
 8007d92:	4658      	mov	r0, fp
 8007d94:	f000 fc90 	bl	80086b8 <_Bfree>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	7033      	strb	r3, [r6, #0]
 8007d9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d9e:	3701      	adds	r7, #1
 8007da0:	601f      	str	r7, [r3, #0]
 8007da2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 831d 	beq.w	80083e4 <_dtoa_r+0xb34>
 8007daa:	601e      	str	r6, [r3, #0]
 8007dac:	e31a      	b.n	80083e4 <_dtoa_r+0xb34>
 8007dae:	07e2      	lsls	r2, r4, #31
 8007db0:	d505      	bpl.n	8007dbe <_dtoa_r+0x50e>
 8007db2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007db6:	f7f8 fc27 	bl	8000608 <__aeabi_dmul>
 8007dba:	3601      	adds	r6, #1
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	1064      	asrs	r4, r4, #1
 8007dc0:	3508      	adds	r5, #8
 8007dc2:	e73f      	b.n	8007c44 <_dtoa_r+0x394>
 8007dc4:	2602      	movs	r6, #2
 8007dc6:	e742      	b.n	8007c4e <_dtoa_r+0x39e>
 8007dc8:	9c07      	ldr	r4, [sp, #28]
 8007dca:	9704      	str	r7, [sp, #16]
 8007dcc:	e761      	b.n	8007c92 <_dtoa_r+0x3e2>
 8007dce:	4b27      	ldr	r3, [pc, #156]	@ (8007e6c <_dtoa_r+0x5bc>)
 8007dd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007dd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007dd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dda:	4454      	add	r4, sl
 8007ddc:	2900      	cmp	r1, #0
 8007dde:	d053      	beq.n	8007e88 <_dtoa_r+0x5d8>
 8007de0:	4928      	ldr	r1, [pc, #160]	@ (8007e84 <_dtoa_r+0x5d4>)
 8007de2:	2000      	movs	r0, #0
 8007de4:	f7f8 fd3a 	bl	800085c <__aeabi_ddiv>
 8007de8:	4633      	mov	r3, r6
 8007dea:	462a      	mov	r2, r5
 8007dec:	f7f8 fa54 	bl	8000298 <__aeabi_dsub>
 8007df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007df4:	4656      	mov	r6, sl
 8007df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dfa:	f7f8 feb5 	bl	8000b68 <__aeabi_d2iz>
 8007dfe:	4605      	mov	r5, r0
 8007e00:	f7f8 fb98 	bl	8000534 <__aeabi_i2d>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e0c:	f7f8 fa44 	bl	8000298 <__aeabi_dsub>
 8007e10:	3530      	adds	r5, #48	@ 0x30
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e1a:	f806 5b01 	strb.w	r5, [r6], #1
 8007e1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e22:	f7f8 fe63 	bl	8000aec <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d171      	bne.n	8007f0e <_dtoa_r+0x65e>
 8007e2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e2e:	4911      	ldr	r1, [pc, #68]	@ (8007e74 <_dtoa_r+0x5c4>)
 8007e30:	2000      	movs	r0, #0
 8007e32:	f7f8 fa31 	bl	8000298 <__aeabi_dsub>
 8007e36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e3a:	f7f8 fe57 	bl	8000aec <__aeabi_dcmplt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f040 8095 	bne.w	8007f6e <_dtoa_r+0x6be>
 8007e44:	42a6      	cmp	r6, r4
 8007e46:	f43f af50 	beq.w	8007cea <_dtoa_r+0x43a>
 8007e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e78 <_dtoa_r+0x5c8>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	f7f8 fbd9 	bl	8000608 <__aeabi_dmul>
 8007e56:	4b08      	ldr	r3, [pc, #32]	@ (8007e78 <_dtoa_r+0x5c8>)
 8007e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e62:	f7f8 fbd1 	bl	8000608 <__aeabi_dmul>
 8007e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e6a:	e7c4      	b.n	8007df6 <_dtoa_r+0x546>
 8007e6c:	0800b048 	.word	0x0800b048
 8007e70:	0800b020 	.word	0x0800b020
 8007e74:	3ff00000 	.word	0x3ff00000
 8007e78:	40240000 	.word	0x40240000
 8007e7c:	401c0000 	.word	0x401c0000
 8007e80:	40140000 	.word	0x40140000
 8007e84:	3fe00000 	.word	0x3fe00000
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f7f8 fbbc 	bl	8000608 <__aeabi_dmul>
 8007e90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e94:	9415      	str	r4, [sp, #84]	@ 0x54
 8007e96:	4656      	mov	r6, sl
 8007e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e9c:	f7f8 fe64 	bl	8000b68 <__aeabi_d2iz>
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	f7f8 fb47 	bl	8000534 <__aeabi_i2d>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eae:	f7f8 f9f3 	bl	8000298 <__aeabi_dsub>
 8007eb2:	3530      	adds	r5, #48	@ 0x30
 8007eb4:	f806 5b01 	strb.w	r5, [r6], #1
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	42a6      	cmp	r6, r4
 8007ebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	d124      	bne.n	8007f12 <_dtoa_r+0x662>
 8007ec8:	4bac      	ldr	r3, [pc, #688]	@ (800817c <_dtoa_r+0x8cc>)
 8007eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ece:	f7f8 f9e5 	bl	800029c <__adddf3>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eda:	f7f8 fe25 	bl	8000b28 <__aeabi_dcmpgt>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d145      	bne.n	8007f6e <_dtoa_r+0x6be>
 8007ee2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ee6:	49a5      	ldr	r1, [pc, #660]	@ (800817c <_dtoa_r+0x8cc>)
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f7f8 f9d5 	bl	8000298 <__aeabi_dsub>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef6:	f7f8 fdf9 	bl	8000aec <__aeabi_dcmplt>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f43f aef5 	beq.w	8007cea <_dtoa_r+0x43a>
 8007f00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f02:	1e73      	subs	r3, r6, #1
 8007f04:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f0a:	2b30      	cmp	r3, #48	@ 0x30
 8007f0c:	d0f8      	beq.n	8007f00 <_dtoa_r+0x650>
 8007f0e:	9f04      	ldr	r7, [sp, #16]
 8007f10:	e73e      	b.n	8007d90 <_dtoa_r+0x4e0>
 8007f12:	4b9b      	ldr	r3, [pc, #620]	@ (8008180 <_dtoa_r+0x8d0>)
 8007f14:	f7f8 fb78 	bl	8000608 <__aeabi_dmul>
 8007f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f1c:	e7bc      	b.n	8007e98 <_dtoa_r+0x5e8>
 8007f1e:	d10c      	bne.n	8007f3a <_dtoa_r+0x68a>
 8007f20:	4b98      	ldr	r3, [pc, #608]	@ (8008184 <_dtoa_r+0x8d4>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f30:	f7f8 fdf0 	bl	8000b14 <__aeabi_dcmpge>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	f000 8157 	beq.w	80081e8 <_dtoa_r+0x938>
 8007f3a:	2400      	movs	r4, #0
 8007f3c:	4625      	mov	r5, r4
 8007f3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f40:	43db      	mvns	r3, r3
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	4656      	mov	r6, sl
 8007f46:	2700      	movs	r7, #0
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4658      	mov	r0, fp
 8007f4c:	f000 fbb4 	bl	80086b8 <_Bfree>
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	d0dc      	beq.n	8007f0e <_dtoa_r+0x65e>
 8007f54:	b12f      	cbz	r7, 8007f62 <_dtoa_r+0x6b2>
 8007f56:	42af      	cmp	r7, r5
 8007f58:	d003      	beq.n	8007f62 <_dtoa_r+0x6b2>
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	4658      	mov	r0, fp
 8007f5e:	f000 fbab 	bl	80086b8 <_Bfree>
 8007f62:	4629      	mov	r1, r5
 8007f64:	4658      	mov	r0, fp
 8007f66:	f000 fba7 	bl	80086b8 <_Bfree>
 8007f6a:	e7d0      	b.n	8007f0e <_dtoa_r+0x65e>
 8007f6c:	9704      	str	r7, [sp, #16]
 8007f6e:	4633      	mov	r3, r6
 8007f70:	461e      	mov	r6, r3
 8007f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f76:	2a39      	cmp	r2, #57	@ 0x39
 8007f78:	d107      	bne.n	8007f8a <_dtoa_r+0x6da>
 8007f7a:	459a      	cmp	sl, r3
 8007f7c:	d1f8      	bne.n	8007f70 <_dtoa_r+0x6c0>
 8007f7e:	9a04      	ldr	r2, [sp, #16]
 8007f80:	3201      	adds	r2, #1
 8007f82:	9204      	str	r2, [sp, #16]
 8007f84:	2230      	movs	r2, #48	@ 0x30
 8007f86:	f88a 2000 	strb.w	r2, [sl]
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	3201      	adds	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e7bd      	b.n	8007f0e <_dtoa_r+0x65e>
 8007f92:	4b7b      	ldr	r3, [pc, #492]	@ (8008180 <_dtoa_r+0x8d0>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	f7f8 fb37 	bl	8000608 <__aeabi_dmul>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	f7f8 fd99 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f43f aebb 	beq.w	8007d22 <_dtoa_r+0x472>
 8007fac:	e6f0      	b.n	8007d90 <_dtoa_r+0x4e0>
 8007fae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007fb0:	2a00      	cmp	r2, #0
 8007fb2:	f000 80db 	beq.w	800816c <_dtoa_r+0x8bc>
 8007fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fb8:	2a01      	cmp	r2, #1
 8007fba:	f300 80bf 	bgt.w	800813c <_dtoa_r+0x88c>
 8007fbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007fc0:	2a00      	cmp	r2, #0
 8007fc2:	f000 80b7 	beq.w	8008134 <_dtoa_r+0x884>
 8007fc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007fca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fcc:	4646      	mov	r6, r8
 8007fce:	9a08      	ldr	r2, [sp, #32]
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	441a      	add	r2, r3
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	4498      	add	r8, r3
 8007fd8:	9208      	str	r2, [sp, #32]
 8007fda:	f000 fc6b 	bl	80088b4 <__i2b>
 8007fde:	4605      	mov	r5, r0
 8007fe0:	b15e      	cbz	r6, 8007ffa <_dtoa_r+0x74a>
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dd08      	ble.n	8007ffa <_dtoa_r+0x74a>
 8007fe8:	42b3      	cmp	r3, r6
 8007fea:	9a08      	ldr	r2, [sp, #32]
 8007fec:	bfa8      	it	ge
 8007fee:	4633      	movge	r3, r6
 8007ff0:	eba8 0803 	sub.w	r8, r8, r3
 8007ff4:	1af6      	subs	r6, r6, r3
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	9308      	str	r3, [sp, #32]
 8007ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ffc:	b1f3      	cbz	r3, 800803c <_dtoa_r+0x78c>
 8007ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 80b7 	beq.w	8008174 <_dtoa_r+0x8c4>
 8008006:	b18c      	cbz	r4, 800802c <_dtoa_r+0x77c>
 8008008:	4629      	mov	r1, r5
 800800a:	4622      	mov	r2, r4
 800800c:	4658      	mov	r0, fp
 800800e:	f000 fd11 	bl	8008a34 <__pow5mult>
 8008012:	464a      	mov	r2, r9
 8008014:	4601      	mov	r1, r0
 8008016:	4605      	mov	r5, r0
 8008018:	4658      	mov	r0, fp
 800801a:	f000 fc61 	bl	80088e0 <__multiply>
 800801e:	4649      	mov	r1, r9
 8008020:	9004      	str	r0, [sp, #16]
 8008022:	4658      	mov	r0, fp
 8008024:	f000 fb48 	bl	80086b8 <_Bfree>
 8008028:	9b04      	ldr	r3, [sp, #16]
 800802a:	4699      	mov	r9, r3
 800802c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800802e:	1b1a      	subs	r2, r3, r4
 8008030:	d004      	beq.n	800803c <_dtoa_r+0x78c>
 8008032:	4649      	mov	r1, r9
 8008034:	4658      	mov	r0, fp
 8008036:	f000 fcfd 	bl	8008a34 <__pow5mult>
 800803a:	4681      	mov	r9, r0
 800803c:	2101      	movs	r1, #1
 800803e:	4658      	mov	r0, fp
 8008040:	f000 fc38 	bl	80088b4 <__i2b>
 8008044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008046:	4604      	mov	r4, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 81cf 	beq.w	80083ec <_dtoa_r+0xb3c>
 800804e:	461a      	mov	r2, r3
 8008050:	4601      	mov	r1, r0
 8008052:	4658      	mov	r0, fp
 8008054:	f000 fcee 	bl	8008a34 <__pow5mult>
 8008058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805a:	2b01      	cmp	r3, #1
 800805c:	4604      	mov	r4, r0
 800805e:	f300 8095 	bgt.w	800818c <_dtoa_r+0x8dc>
 8008062:	9b02      	ldr	r3, [sp, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f040 8087 	bne.w	8008178 <_dtoa_r+0x8c8>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008070:	2b00      	cmp	r3, #0
 8008072:	f040 8089 	bne.w	8008188 <_dtoa_r+0x8d8>
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800807c:	0d1b      	lsrs	r3, r3, #20
 800807e:	051b      	lsls	r3, r3, #20
 8008080:	b12b      	cbz	r3, 800808e <_dtoa_r+0x7de>
 8008082:	9b08      	ldr	r3, [sp, #32]
 8008084:	3301      	adds	r3, #1
 8008086:	9308      	str	r3, [sp, #32]
 8008088:	f108 0801 	add.w	r8, r8, #1
 800808c:	2301      	movs	r3, #1
 800808e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 81b0 	beq.w	80083f8 <_dtoa_r+0xb48>
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800809e:	6918      	ldr	r0, [r3, #16]
 80080a0:	f000 fbbc 	bl	800881c <__hi0bits>
 80080a4:	f1c0 0020 	rsb	r0, r0, #32
 80080a8:	9b08      	ldr	r3, [sp, #32]
 80080aa:	4418      	add	r0, r3
 80080ac:	f010 001f 	ands.w	r0, r0, #31
 80080b0:	d077      	beq.n	80081a2 <_dtoa_r+0x8f2>
 80080b2:	f1c0 0320 	rsb	r3, r0, #32
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	dd6b      	ble.n	8008192 <_dtoa_r+0x8e2>
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	f1c0 001c 	rsb	r0, r0, #28
 80080c0:	4403      	add	r3, r0
 80080c2:	4480      	add	r8, r0
 80080c4:	4406      	add	r6, r0
 80080c6:	9308      	str	r3, [sp, #32]
 80080c8:	f1b8 0f00 	cmp.w	r8, #0
 80080cc:	dd05      	ble.n	80080da <_dtoa_r+0x82a>
 80080ce:	4649      	mov	r1, r9
 80080d0:	4642      	mov	r2, r8
 80080d2:	4658      	mov	r0, fp
 80080d4:	f000 fd08 	bl	8008ae8 <__lshift>
 80080d8:	4681      	mov	r9, r0
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd05      	ble.n	80080ec <_dtoa_r+0x83c>
 80080e0:	4621      	mov	r1, r4
 80080e2:	461a      	mov	r2, r3
 80080e4:	4658      	mov	r0, fp
 80080e6:	f000 fcff 	bl	8008ae8 <__lshift>
 80080ea:	4604      	mov	r4, r0
 80080ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d059      	beq.n	80081a6 <_dtoa_r+0x8f6>
 80080f2:	4621      	mov	r1, r4
 80080f4:	4648      	mov	r0, r9
 80080f6:	f000 fd63 	bl	8008bc0 <__mcmp>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	da53      	bge.n	80081a6 <_dtoa_r+0x8f6>
 80080fe:	1e7b      	subs	r3, r7, #1
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	4649      	mov	r1, r9
 8008104:	2300      	movs	r3, #0
 8008106:	220a      	movs	r2, #10
 8008108:	4658      	mov	r0, fp
 800810a:	f000 faf7 	bl	80086fc <__multadd>
 800810e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008110:	4681      	mov	r9, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 8172 	beq.w	80083fc <_dtoa_r+0xb4c>
 8008118:	2300      	movs	r3, #0
 800811a:	4629      	mov	r1, r5
 800811c:	220a      	movs	r2, #10
 800811e:	4658      	mov	r0, fp
 8008120:	f000 faec 	bl	80086fc <__multadd>
 8008124:	9b00      	ldr	r3, [sp, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	4605      	mov	r5, r0
 800812a:	dc67      	bgt.n	80081fc <_dtoa_r+0x94c>
 800812c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812e:	2b02      	cmp	r3, #2
 8008130:	dc41      	bgt.n	80081b6 <_dtoa_r+0x906>
 8008132:	e063      	b.n	80081fc <_dtoa_r+0x94c>
 8008134:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008136:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800813a:	e746      	b.n	8007fca <_dtoa_r+0x71a>
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	1e5c      	subs	r4, r3, #1
 8008140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008142:	42a3      	cmp	r3, r4
 8008144:	bfbf      	itttt	lt
 8008146:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008148:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800814a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800814c:	1ae3      	sublt	r3, r4, r3
 800814e:	bfb4      	ite	lt
 8008150:	18d2      	addlt	r2, r2, r3
 8008152:	1b1c      	subge	r4, r3, r4
 8008154:	9b07      	ldr	r3, [sp, #28]
 8008156:	bfbc      	itt	lt
 8008158:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800815a:	2400      	movlt	r4, #0
 800815c:	2b00      	cmp	r3, #0
 800815e:	bfb5      	itete	lt
 8008160:	eba8 0603 	sublt.w	r6, r8, r3
 8008164:	9b07      	ldrge	r3, [sp, #28]
 8008166:	2300      	movlt	r3, #0
 8008168:	4646      	movge	r6, r8
 800816a:	e730      	b.n	8007fce <_dtoa_r+0x71e>
 800816c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800816e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008170:	4646      	mov	r6, r8
 8008172:	e735      	b.n	8007fe0 <_dtoa_r+0x730>
 8008174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008176:	e75c      	b.n	8008032 <_dtoa_r+0x782>
 8008178:	2300      	movs	r3, #0
 800817a:	e788      	b.n	800808e <_dtoa_r+0x7de>
 800817c:	3fe00000 	.word	0x3fe00000
 8008180:	40240000 	.word	0x40240000
 8008184:	40140000 	.word	0x40140000
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	e780      	b.n	800808e <_dtoa_r+0x7de>
 800818c:	2300      	movs	r3, #0
 800818e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008190:	e782      	b.n	8008098 <_dtoa_r+0x7e8>
 8008192:	d099      	beq.n	80080c8 <_dtoa_r+0x818>
 8008194:	9a08      	ldr	r2, [sp, #32]
 8008196:	331c      	adds	r3, #28
 8008198:	441a      	add	r2, r3
 800819a:	4498      	add	r8, r3
 800819c:	441e      	add	r6, r3
 800819e:	9208      	str	r2, [sp, #32]
 80081a0:	e792      	b.n	80080c8 <_dtoa_r+0x818>
 80081a2:	4603      	mov	r3, r0
 80081a4:	e7f6      	b.n	8008194 <_dtoa_r+0x8e4>
 80081a6:	9b07      	ldr	r3, [sp, #28]
 80081a8:	9704      	str	r7, [sp, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dc20      	bgt.n	80081f0 <_dtoa_r+0x940>
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	dd1e      	ble.n	80081f4 <_dtoa_r+0x944>
 80081b6:	9b00      	ldr	r3, [sp, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f47f aec0 	bne.w	8007f3e <_dtoa_r+0x68e>
 80081be:	4621      	mov	r1, r4
 80081c0:	2205      	movs	r2, #5
 80081c2:	4658      	mov	r0, fp
 80081c4:	f000 fa9a 	bl	80086fc <__multadd>
 80081c8:	4601      	mov	r1, r0
 80081ca:	4604      	mov	r4, r0
 80081cc:	4648      	mov	r0, r9
 80081ce:	f000 fcf7 	bl	8008bc0 <__mcmp>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f77f aeb3 	ble.w	8007f3e <_dtoa_r+0x68e>
 80081d8:	4656      	mov	r6, sl
 80081da:	2331      	movs	r3, #49	@ 0x31
 80081dc:	f806 3b01 	strb.w	r3, [r6], #1
 80081e0:	9b04      	ldr	r3, [sp, #16]
 80081e2:	3301      	adds	r3, #1
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	e6ae      	b.n	8007f46 <_dtoa_r+0x696>
 80081e8:	9c07      	ldr	r4, [sp, #28]
 80081ea:	9704      	str	r7, [sp, #16]
 80081ec:	4625      	mov	r5, r4
 80081ee:	e7f3      	b.n	80081d8 <_dtoa_r+0x928>
 80081f0:	9b07      	ldr	r3, [sp, #28]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 8104 	beq.w	8008404 <_dtoa_r+0xb54>
 80081fc:	2e00      	cmp	r6, #0
 80081fe:	dd05      	ble.n	800820c <_dtoa_r+0x95c>
 8008200:	4629      	mov	r1, r5
 8008202:	4632      	mov	r2, r6
 8008204:	4658      	mov	r0, fp
 8008206:	f000 fc6f 	bl	8008ae8 <__lshift>
 800820a:	4605      	mov	r5, r0
 800820c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d05a      	beq.n	80082c8 <_dtoa_r+0xa18>
 8008212:	6869      	ldr	r1, [r5, #4]
 8008214:	4658      	mov	r0, fp
 8008216:	f000 fa0f 	bl	8008638 <_Balloc>
 800821a:	4606      	mov	r6, r0
 800821c:	b928      	cbnz	r0, 800822a <_dtoa_r+0x97a>
 800821e:	4b84      	ldr	r3, [pc, #528]	@ (8008430 <_dtoa_r+0xb80>)
 8008220:	4602      	mov	r2, r0
 8008222:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008226:	f7ff bb5a 	b.w	80078de <_dtoa_r+0x2e>
 800822a:	692a      	ldr	r2, [r5, #16]
 800822c:	3202      	adds	r2, #2
 800822e:	0092      	lsls	r2, r2, #2
 8008230:	f105 010c 	add.w	r1, r5, #12
 8008234:	300c      	adds	r0, #12
 8008236:	f001 ff75 	bl	800a124 <memcpy>
 800823a:	2201      	movs	r2, #1
 800823c:	4631      	mov	r1, r6
 800823e:	4658      	mov	r0, fp
 8008240:	f000 fc52 	bl	8008ae8 <__lshift>
 8008244:	f10a 0301 	add.w	r3, sl, #1
 8008248:	9307      	str	r3, [sp, #28]
 800824a:	9b00      	ldr	r3, [sp, #0]
 800824c:	4453      	add	r3, sl
 800824e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	462f      	mov	r7, r5
 8008258:	930a      	str	r3, [sp, #40]	@ 0x28
 800825a:	4605      	mov	r5, r0
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	4621      	mov	r1, r4
 8008260:	3b01      	subs	r3, #1
 8008262:	4648      	mov	r0, r9
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	f7ff fa99 	bl	800779c <quorem>
 800826a:	4639      	mov	r1, r7
 800826c:	9002      	str	r0, [sp, #8]
 800826e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008272:	4648      	mov	r0, r9
 8008274:	f000 fca4 	bl	8008bc0 <__mcmp>
 8008278:	462a      	mov	r2, r5
 800827a:	9008      	str	r0, [sp, #32]
 800827c:	4621      	mov	r1, r4
 800827e:	4658      	mov	r0, fp
 8008280:	f000 fcba 	bl	8008bf8 <__mdiff>
 8008284:	68c2      	ldr	r2, [r0, #12]
 8008286:	4606      	mov	r6, r0
 8008288:	bb02      	cbnz	r2, 80082cc <_dtoa_r+0xa1c>
 800828a:	4601      	mov	r1, r0
 800828c:	4648      	mov	r0, r9
 800828e:	f000 fc97 	bl	8008bc0 <__mcmp>
 8008292:	4602      	mov	r2, r0
 8008294:	4631      	mov	r1, r6
 8008296:	4658      	mov	r0, fp
 8008298:	920e      	str	r2, [sp, #56]	@ 0x38
 800829a:	f000 fa0d 	bl	80086b8 <_Bfree>
 800829e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082a2:	9e07      	ldr	r6, [sp, #28]
 80082a4:	ea43 0102 	orr.w	r1, r3, r2
 80082a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082aa:	4319      	orrs	r1, r3
 80082ac:	d110      	bne.n	80082d0 <_dtoa_r+0xa20>
 80082ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082b2:	d029      	beq.n	8008308 <_dtoa_r+0xa58>
 80082b4:	9b08      	ldr	r3, [sp, #32]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dd02      	ble.n	80082c0 <_dtoa_r+0xa10>
 80082ba:	9b02      	ldr	r3, [sp, #8]
 80082bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80082c0:	9b00      	ldr	r3, [sp, #0]
 80082c2:	f883 8000 	strb.w	r8, [r3]
 80082c6:	e63f      	b.n	8007f48 <_dtoa_r+0x698>
 80082c8:	4628      	mov	r0, r5
 80082ca:	e7bb      	b.n	8008244 <_dtoa_r+0x994>
 80082cc:	2201      	movs	r2, #1
 80082ce:	e7e1      	b.n	8008294 <_dtoa_r+0x9e4>
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	db04      	blt.n	80082e0 <_dtoa_r+0xa30>
 80082d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082d8:	430b      	orrs	r3, r1
 80082da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082dc:	430b      	orrs	r3, r1
 80082de:	d120      	bne.n	8008322 <_dtoa_r+0xa72>
 80082e0:	2a00      	cmp	r2, #0
 80082e2:	dded      	ble.n	80082c0 <_dtoa_r+0xa10>
 80082e4:	4649      	mov	r1, r9
 80082e6:	2201      	movs	r2, #1
 80082e8:	4658      	mov	r0, fp
 80082ea:	f000 fbfd 	bl	8008ae8 <__lshift>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4681      	mov	r9, r0
 80082f2:	f000 fc65 	bl	8008bc0 <__mcmp>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	dc03      	bgt.n	8008302 <_dtoa_r+0xa52>
 80082fa:	d1e1      	bne.n	80082c0 <_dtoa_r+0xa10>
 80082fc:	f018 0f01 	tst.w	r8, #1
 8008300:	d0de      	beq.n	80082c0 <_dtoa_r+0xa10>
 8008302:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008306:	d1d8      	bne.n	80082ba <_dtoa_r+0xa0a>
 8008308:	9a00      	ldr	r2, [sp, #0]
 800830a:	2339      	movs	r3, #57	@ 0x39
 800830c:	7013      	strb	r3, [r2, #0]
 800830e:	4633      	mov	r3, r6
 8008310:	461e      	mov	r6, r3
 8008312:	3b01      	subs	r3, #1
 8008314:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008318:	2a39      	cmp	r2, #57	@ 0x39
 800831a:	d052      	beq.n	80083c2 <_dtoa_r+0xb12>
 800831c:	3201      	adds	r2, #1
 800831e:	701a      	strb	r2, [r3, #0]
 8008320:	e612      	b.n	8007f48 <_dtoa_r+0x698>
 8008322:	2a00      	cmp	r2, #0
 8008324:	dd07      	ble.n	8008336 <_dtoa_r+0xa86>
 8008326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800832a:	d0ed      	beq.n	8008308 <_dtoa_r+0xa58>
 800832c:	9a00      	ldr	r2, [sp, #0]
 800832e:	f108 0301 	add.w	r3, r8, #1
 8008332:	7013      	strb	r3, [r2, #0]
 8008334:	e608      	b.n	8007f48 <_dtoa_r+0x698>
 8008336:	9b07      	ldr	r3, [sp, #28]
 8008338:	9a07      	ldr	r2, [sp, #28]
 800833a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800833e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008340:	4293      	cmp	r3, r2
 8008342:	d028      	beq.n	8008396 <_dtoa_r+0xae6>
 8008344:	4649      	mov	r1, r9
 8008346:	2300      	movs	r3, #0
 8008348:	220a      	movs	r2, #10
 800834a:	4658      	mov	r0, fp
 800834c:	f000 f9d6 	bl	80086fc <__multadd>
 8008350:	42af      	cmp	r7, r5
 8008352:	4681      	mov	r9, r0
 8008354:	f04f 0300 	mov.w	r3, #0
 8008358:	f04f 020a 	mov.w	r2, #10
 800835c:	4639      	mov	r1, r7
 800835e:	4658      	mov	r0, fp
 8008360:	d107      	bne.n	8008372 <_dtoa_r+0xac2>
 8008362:	f000 f9cb 	bl	80086fc <__multadd>
 8008366:	4607      	mov	r7, r0
 8008368:	4605      	mov	r5, r0
 800836a:	9b07      	ldr	r3, [sp, #28]
 800836c:	3301      	adds	r3, #1
 800836e:	9307      	str	r3, [sp, #28]
 8008370:	e774      	b.n	800825c <_dtoa_r+0x9ac>
 8008372:	f000 f9c3 	bl	80086fc <__multadd>
 8008376:	4629      	mov	r1, r5
 8008378:	4607      	mov	r7, r0
 800837a:	2300      	movs	r3, #0
 800837c:	220a      	movs	r2, #10
 800837e:	4658      	mov	r0, fp
 8008380:	f000 f9bc 	bl	80086fc <__multadd>
 8008384:	4605      	mov	r5, r0
 8008386:	e7f0      	b.n	800836a <_dtoa_r+0xaba>
 8008388:	9b00      	ldr	r3, [sp, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	bfcc      	ite	gt
 800838e:	461e      	movgt	r6, r3
 8008390:	2601      	movle	r6, #1
 8008392:	4456      	add	r6, sl
 8008394:	2700      	movs	r7, #0
 8008396:	4649      	mov	r1, r9
 8008398:	2201      	movs	r2, #1
 800839a:	4658      	mov	r0, fp
 800839c:	f000 fba4 	bl	8008ae8 <__lshift>
 80083a0:	4621      	mov	r1, r4
 80083a2:	4681      	mov	r9, r0
 80083a4:	f000 fc0c 	bl	8008bc0 <__mcmp>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	dcb0      	bgt.n	800830e <_dtoa_r+0xa5e>
 80083ac:	d102      	bne.n	80083b4 <_dtoa_r+0xb04>
 80083ae:	f018 0f01 	tst.w	r8, #1
 80083b2:	d1ac      	bne.n	800830e <_dtoa_r+0xa5e>
 80083b4:	4633      	mov	r3, r6
 80083b6:	461e      	mov	r6, r3
 80083b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083bc:	2a30      	cmp	r2, #48	@ 0x30
 80083be:	d0fa      	beq.n	80083b6 <_dtoa_r+0xb06>
 80083c0:	e5c2      	b.n	8007f48 <_dtoa_r+0x698>
 80083c2:	459a      	cmp	sl, r3
 80083c4:	d1a4      	bne.n	8008310 <_dtoa_r+0xa60>
 80083c6:	9b04      	ldr	r3, [sp, #16]
 80083c8:	3301      	adds	r3, #1
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	2331      	movs	r3, #49	@ 0x31
 80083ce:	f88a 3000 	strb.w	r3, [sl]
 80083d2:	e5b9      	b.n	8007f48 <_dtoa_r+0x698>
 80083d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008434 <_dtoa_r+0xb84>
 80083da:	b11b      	cbz	r3, 80083e4 <_dtoa_r+0xb34>
 80083dc:	f10a 0308 	add.w	r3, sl, #8
 80083e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	4650      	mov	r0, sl
 80083e6:	b019      	add	sp, #100	@ 0x64
 80083e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	f77f ae37 	ble.w	8008062 <_dtoa_r+0x7b2>
 80083f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083f8:	2001      	movs	r0, #1
 80083fa:	e655      	b.n	80080a8 <_dtoa_r+0x7f8>
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f77f aed6 	ble.w	80081b0 <_dtoa_r+0x900>
 8008404:	4656      	mov	r6, sl
 8008406:	4621      	mov	r1, r4
 8008408:	4648      	mov	r0, r9
 800840a:	f7ff f9c7 	bl	800779c <quorem>
 800840e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008412:	f806 8b01 	strb.w	r8, [r6], #1
 8008416:	9b00      	ldr	r3, [sp, #0]
 8008418:	eba6 020a 	sub.w	r2, r6, sl
 800841c:	4293      	cmp	r3, r2
 800841e:	ddb3      	ble.n	8008388 <_dtoa_r+0xad8>
 8008420:	4649      	mov	r1, r9
 8008422:	2300      	movs	r3, #0
 8008424:	220a      	movs	r2, #10
 8008426:	4658      	mov	r0, fp
 8008428:	f000 f968 	bl	80086fc <__multadd>
 800842c:	4681      	mov	r9, r0
 800842e:	e7ea      	b.n	8008406 <_dtoa_r+0xb56>
 8008430:	0800afa9 	.word	0x0800afa9
 8008434:	0800af2d 	.word	0x0800af2d

08008438 <_free_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4605      	mov	r5, r0
 800843c:	2900      	cmp	r1, #0
 800843e:	d041      	beq.n	80084c4 <_free_r+0x8c>
 8008440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008444:	1f0c      	subs	r4, r1, #4
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfb8      	it	lt
 800844a:	18e4      	addlt	r4, r4, r3
 800844c:	f000 f8e8 	bl	8008620 <__malloc_lock>
 8008450:	4a1d      	ldr	r2, [pc, #116]	@ (80084c8 <_free_r+0x90>)
 8008452:	6813      	ldr	r3, [r2, #0]
 8008454:	b933      	cbnz	r3, 8008464 <_free_r+0x2c>
 8008456:	6063      	str	r3, [r4, #4]
 8008458:	6014      	str	r4, [r2, #0]
 800845a:	4628      	mov	r0, r5
 800845c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008460:	f000 b8e4 	b.w	800862c <__malloc_unlock>
 8008464:	42a3      	cmp	r3, r4
 8008466:	d908      	bls.n	800847a <_free_r+0x42>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	1821      	adds	r1, r4, r0
 800846c:	428b      	cmp	r3, r1
 800846e:	bf01      	itttt	eq
 8008470:	6819      	ldreq	r1, [r3, #0]
 8008472:	685b      	ldreq	r3, [r3, #4]
 8008474:	1809      	addeq	r1, r1, r0
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	e7ed      	b.n	8008456 <_free_r+0x1e>
 800847a:	461a      	mov	r2, r3
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	b10b      	cbz	r3, 8008484 <_free_r+0x4c>
 8008480:	42a3      	cmp	r3, r4
 8008482:	d9fa      	bls.n	800847a <_free_r+0x42>
 8008484:	6811      	ldr	r1, [r2, #0]
 8008486:	1850      	adds	r0, r2, r1
 8008488:	42a0      	cmp	r0, r4
 800848a:	d10b      	bne.n	80084a4 <_free_r+0x6c>
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	4401      	add	r1, r0
 8008490:	1850      	adds	r0, r2, r1
 8008492:	4283      	cmp	r3, r0
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	d1e0      	bne.n	800845a <_free_r+0x22>
 8008498:	6818      	ldr	r0, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	6053      	str	r3, [r2, #4]
 800849e:	4408      	add	r0, r1
 80084a0:	6010      	str	r0, [r2, #0]
 80084a2:	e7da      	b.n	800845a <_free_r+0x22>
 80084a4:	d902      	bls.n	80084ac <_free_r+0x74>
 80084a6:	230c      	movs	r3, #12
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	e7d6      	b.n	800845a <_free_r+0x22>
 80084ac:	6820      	ldr	r0, [r4, #0]
 80084ae:	1821      	adds	r1, r4, r0
 80084b0:	428b      	cmp	r3, r1
 80084b2:	bf04      	itt	eq
 80084b4:	6819      	ldreq	r1, [r3, #0]
 80084b6:	685b      	ldreq	r3, [r3, #4]
 80084b8:	6063      	str	r3, [r4, #4]
 80084ba:	bf04      	itt	eq
 80084bc:	1809      	addeq	r1, r1, r0
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	6054      	str	r4, [r2, #4]
 80084c2:	e7ca      	b.n	800845a <_free_r+0x22>
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	bf00      	nop
 80084c8:	2000da14 	.word	0x2000da14

080084cc <malloc>:
 80084cc:	4b02      	ldr	r3, [pc, #8]	@ (80084d8 <malloc+0xc>)
 80084ce:	4601      	mov	r1, r0
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	f000 b825 	b.w	8008520 <_malloc_r>
 80084d6:	bf00      	nop
 80084d8:	2000d410 	.word	0x2000d410

080084dc <sbrk_aligned>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4e0f      	ldr	r6, [pc, #60]	@ (800851c <sbrk_aligned+0x40>)
 80084e0:	460c      	mov	r4, r1
 80084e2:	6831      	ldr	r1, [r6, #0]
 80084e4:	4605      	mov	r5, r0
 80084e6:	b911      	cbnz	r1, 80084ee <sbrk_aligned+0x12>
 80084e8:	f001 fe0c 	bl	800a104 <_sbrk_r>
 80084ec:	6030      	str	r0, [r6, #0]
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f001 fe07 	bl	800a104 <_sbrk_r>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d103      	bne.n	8008502 <sbrk_aligned+0x26>
 80084fa:	f04f 34ff 	mov.w	r4, #4294967295
 80084fe:	4620      	mov	r0, r4
 8008500:	bd70      	pop	{r4, r5, r6, pc}
 8008502:	1cc4      	adds	r4, r0, #3
 8008504:	f024 0403 	bic.w	r4, r4, #3
 8008508:	42a0      	cmp	r0, r4
 800850a:	d0f8      	beq.n	80084fe <sbrk_aligned+0x22>
 800850c:	1a21      	subs	r1, r4, r0
 800850e:	4628      	mov	r0, r5
 8008510:	f001 fdf8 	bl	800a104 <_sbrk_r>
 8008514:	3001      	adds	r0, #1
 8008516:	d1f2      	bne.n	80084fe <sbrk_aligned+0x22>
 8008518:	e7ef      	b.n	80084fa <sbrk_aligned+0x1e>
 800851a:	bf00      	nop
 800851c:	2000da10 	.word	0x2000da10

08008520 <_malloc_r>:
 8008520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008524:	1ccd      	adds	r5, r1, #3
 8008526:	f025 0503 	bic.w	r5, r5, #3
 800852a:	3508      	adds	r5, #8
 800852c:	2d0c      	cmp	r5, #12
 800852e:	bf38      	it	cc
 8008530:	250c      	movcc	r5, #12
 8008532:	2d00      	cmp	r5, #0
 8008534:	4606      	mov	r6, r0
 8008536:	db01      	blt.n	800853c <_malloc_r+0x1c>
 8008538:	42a9      	cmp	r1, r5
 800853a:	d904      	bls.n	8008546 <_malloc_r+0x26>
 800853c:	230c      	movs	r3, #12
 800853e:	6033      	str	r3, [r6, #0]
 8008540:	2000      	movs	r0, #0
 8008542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800861c <_malloc_r+0xfc>
 800854a:	f000 f869 	bl	8008620 <__malloc_lock>
 800854e:	f8d8 3000 	ldr.w	r3, [r8]
 8008552:	461c      	mov	r4, r3
 8008554:	bb44      	cbnz	r4, 80085a8 <_malloc_r+0x88>
 8008556:	4629      	mov	r1, r5
 8008558:	4630      	mov	r0, r6
 800855a:	f7ff ffbf 	bl	80084dc <sbrk_aligned>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	4604      	mov	r4, r0
 8008562:	d158      	bne.n	8008616 <_malloc_r+0xf6>
 8008564:	f8d8 4000 	ldr.w	r4, [r8]
 8008568:	4627      	mov	r7, r4
 800856a:	2f00      	cmp	r7, #0
 800856c:	d143      	bne.n	80085f6 <_malloc_r+0xd6>
 800856e:	2c00      	cmp	r4, #0
 8008570:	d04b      	beq.n	800860a <_malloc_r+0xea>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	4639      	mov	r1, r7
 8008576:	4630      	mov	r0, r6
 8008578:	eb04 0903 	add.w	r9, r4, r3
 800857c:	f001 fdc2 	bl	800a104 <_sbrk_r>
 8008580:	4581      	cmp	r9, r0
 8008582:	d142      	bne.n	800860a <_malloc_r+0xea>
 8008584:	6821      	ldr	r1, [r4, #0]
 8008586:	1a6d      	subs	r5, r5, r1
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ffa6 	bl	80084dc <sbrk_aligned>
 8008590:	3001      	adds	r0, #1
 8008592:	d03a      	beq.n	800860a <_malloc_r+0xea>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	442b      	add	r3, r5
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	f8d8 3000 	ldr.w	r3, [r8]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	bb62      	cbnz	r2, 80085fc <_malloc_r+0xdc>
 80085a2:	f8c8 7000 	str.w	r7, [r8]
 80085a6:	e00f      	b.n	80085c8 <_malloc_r+0xa8>
 80085a8:	6822      	ldr	r2, [r4, #0]
 80085aa:	1b52      	subs	r2, r2, r5
 80085ac:	d420      	bmi.n	80085f0 <_malloc_r+0xd0>
 80085ae:	2a0b      	cmp	r2, #11
 80085b0:	d917      	bls.n	80085e2 <_malloc_r+0xc2>
 80085b2:	1961      	adds	r1, r4, r5
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	6025      	str	r5, [r4, #0]
 80085b8:	bf18      	it	ne
 80085ba:	6059      	strne	r1, [r3, #4]
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	bf08      	it	eq
 80085c0:	f8c8 1000 	streq.w	r1, [r8]
 80085c4:	5162      	str	r2, [r4, r5]
 80085c6:	604b      	str	r3, [r1, #4]
 80085c8:	4630      	mov	r0, r6
 80085ca:	f000 f82f 	bl	800862c <__malloc_unlock>
 80085ce:	f104 000b 	add.w	r0, r4, #11
 80085d2:	1d23      	adds	r3, r4, #4
 80085d4:	f020 0007 	bic.w	r0, r0, #7
 80085d8:	1ac2      	subs	r2, r0, r3
 80085da:	bf1c      	itt	ne
 80085dc:	1a1b      	subne	r3, r3, r0
 80085de:	50a3      	strne	r3, [r4, r2]
 80085e0:	e7af      	b.n	8008542 <_malloc_r+0x22>
 80085e2:	6862      	ldr	r2, [r4, #4]
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	bf0c      	ite	eq
 80085e8:	f8c8 2000 	streq.w	r2, [r8]
 80085ec:	605a      	strne	r2, [r3, #4]
 80085ee:	e7eb      	b.n	80085c8 <_malloc_r+0xa8>
 80085f0:	4623      	mov	r3, r4
 80085f2:	6864      	ldr	r4, [r4, #4]
 80085f4:	e7ae      	b.n	8008554 <_malloc_r+0x34>
 80085f6:	463c      	mov	r4, r7
 80085f8:	687f      	ldr	r7, [r7, #4]
 80085fa:	e7b6      	b.n	800856a <_malloc_r+0x4a>
 80085fc:	461a      	mov	r2, r3
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	42a3      	cmp	r3, r4
 8008602:	d1fb      	bne.n	80085fc <_malloc_r+0xdc>
 8008604:	2300      	movs	r3, #0
 8008606:	6053      	str	r3, [r2, #4]
 8008608:	e7de      	b.n	80085c8 <_malloc_r+0xa8>
 800860a:	230c      	movs	r3, #12
 800860c:	6033      	str	r3, [r6, #0]
 800860e:	4630      	mov	r0, r6
 8008610:	f000 f80c 	bl	800862c <__malloc_unlock>
 8008614:	e794      	b.n	8008540 <_malloc_r+0x20>
 8008616:	6005      	str	r5, [r0, #0]
 8008618:	e7d6      	b.n	80085c8 <_malloc_r+0xa8>
 800861a:	bf00      	nop
 800861c:	2000da14 	.word	0x2000da14

08008620 <__malloc_lock>:
 8008620:	4801      	ldr	r0, [pc, #4]	@ (8008628 <__malloc_lock+0x8>)
 8008622:	f7ff b8b2 	b.w	800778a <__retarget_lock_acquire_recursive>
 8008626:	bf00      	nop
 8008628:	2000da0c 	.word	0x2000da0c

0800862c <__malloc_unlock>:
 800862c:	4801      	ldr	r0, [pc, #4]	@ (8008634 <__malloc_unlock+0x8>)
 800862e:	f7ff b8ad 	b.w	800778c <__retarget_lock_release_recursive>
 8008632:	bf00      	nop
 8008634:	2000da0c 	.word	0x2000da0c

08008638 <_Balloc>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	69c6      	ldr	r6, [r0, #28]
 800863c:	4604      	mov	r4, r0
 800863e:	460d      	mov	r5, r1
 8008640:	b976      	cbnz	r6, 8008660 <_Balloc+0x28>
 8008642:	2010      	movs	r0, #16
 8008644:	f7ff ff42 	bl	80084cc <malloc>
 8008648:	4602      	mov	r2, r0
 800864a:	61e0      	str	r0, [r4, #28]
 800864c:	b920      	cbnz	r0, 8008658 <_Balloc+0x20>
 800864e:	4b18      	ldr	r3, [pc, #96]	@ (80086b0 <_Balloc+0x78>)
 8008650:	4818      	ldr	r0, [pc, #96]	@ (80086b4 <_Balloc+0x7c>)
 8008652:	216b      	movs	r1, #107	@ 0x6b
 8008654:	f001 fd7c 	bl	800a150 <__assert_func>
 8008658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800865c:	6006      	str	r6, [r0, #0]
 800865e:	60c6      	str	r6, [r0, #12]
 8008660:	69e6      	ldr	r6, [r4, #28]
 8008662:	68f3      	ldr	r3, [r6, #12]
 8008664:	b183      	cbz	r3, 8008688 <_Balloc+0x50>
 8008666:	69e3      	ldr	r3, [r4, #28]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800866e:	b9b8      	cbnz	r0, 80086a0 <_Balloc+0x68>
 8008670:	2101      	movs	r1, #1
 8008672:	fa01 f605 	lsl.w	r6, r1, r5
 8008676:	1d72      	adds	r2, r6, #5
 8008678:	0092      	lsls	r2, r2, #2
 800867a:	4620      	mov	r0, r4
 800867c:	f001 fd86 	bl	800a18c <_calloc_r>
 8008680:	b160      	cbz	r0, 800869c <_Balloc+0x64>
 8008682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008686:	e00e      	b.n	80086a6 <_Balloc+0x6e>
 8008688:	2221      	movs	r2, #33	@ 0x21
 800868a:	2104      	movs	r1, #4
 800868c:	4620      	mov	r0, r4
 800868e:	f001 fd7d 	bl	800a18c <_calloc_r>
 8008692:	69e3      	ldr	r3, [r4, #28]
 8008694:	60f0      	str	r0, [r6, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e4      	bne.n	8008666 <_Balloc+0x2e>
 800869c:	2000      	movs	r0, #0
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	6802      	ldr	r2, [r0, #0]
 80086a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086a6:	2300      	movs	r3, #0
 80086a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086ac:	e7f7      	b.n	800869e <_Balloc+0x66>
 80086ae:	bf00      	nop
 80086b0:	0800af3a 	.word	0x0800af3a
 80086b4:	0800afba 	.word	0x0800afba

080086b8 <_Bfree>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	69c6      	ldr	r6, [r0, #28]
 80086bc:	4605      	mov	r5, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	b976      	cbnz	r6, 80086e0 <_Bfree+0x28>
 80086c2:	2010      	movs	r0, #16
 80086c4:	f7ff ff02 	bl	80084cc <malloc>
 80086c8:	4602      	mov	r2, r0
 80086ca:	61e8      	str	r0, [r5, #28]
 80086cc:	b920      	cbnz	r0, 80086d8 <_Bfree+0x20>
 80086ce:	4b09      	ldr	r3, [pc, #36]	@ (80086f4 <_Bfree+0x3c>)
 80086d0:	4809      	ldr	r0, [pc, #36]	@ (80086f8 <_Bfree+0x40>)
 80086d2:	218f      	movs	r1, #143	@ 0x8f
 80086d4:	f001 fd3c 	bl	800a150 <__assert_func>
 80086d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086dc:	6006      	str	r6, [r0, #0]
 80086de:	60c6      	str	r6, [r0, #12]
 80086e0:	b13c      	cbz	r4, 80086f2 <_Bfree+0x3a>
 80086e2:	69eb      	ldr	r3, [r5, #28]
 80086e4:	6862      	ldr	r2, [r4, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086ec:	6021      	str	r1, [r4, #0]
 80086ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	0800af3a 	.word	0x0800af3a
 80086f8:	0800afba 	.word	0x0800afba

080086fc <__multadd>:
 80086fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008700:	690d      	ldr	r5, [r1, #16]
 8008702:	4607      	mov	r7, r0
 8008704:	460c      	mov	r4, r1
 8008706:	461e      	mov	r6, r3
 8008708:	f101 0c14 	add.w	ip, r1, #20
 800870c:	2000      	movs	r0, #0
 800870e:	f8dc 3000 	ldr.w	r3, [ip]
 8008712:	b299      	uxth	r1, r3
 8008714:	fb02 6101 	mla	r1, r2, r1, r6
 8008718:	0c1e      	lsrs	r6, r3, #16
 800871a:	0c0b      	lsrs	r3, r1, #16
 800871c:	fb02 3306 	mla	r3, r2, r6, r3
 8008720:	b289      	uxth	r1, r1
 8008722:	3001      	adds	r0, #1
 8008724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008728:	4285      	cmp	r5, r0
 800872a:	f84c 1b04 	str.w	r1, [ip], #4
 800872e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008732:	dcec      	bgt.n	800870e <__multadd+0x12>
 8008734:	b30e      	cbz	r6, 800877a <__multadd+0x7e>
 8008736:	68a3      	ldr	r3, [r4, #8]
 8008738:	42ab      	cmp	r3, r5
 800873a:	dc19      	bgt.n	8008770 <__multadd+0x74>
 800873c:	6861      	ldr	r1, [r4, #4]
 800873e:	4638      	mov	r0, r7
 8008740:	3101      	adds	r1, #1
 8008742:	f7ff ff79 	bl	8008638 <_Balloc>
 8008746:	4680      	mov	r8, r0
 8008748:	b928      	cbnz	r0, 8008756 <__multadd+0x5a>
 800874a:	4602      	mov	r2, r0
 800874c:	4b0c      	ldr	r3, [pc, #48]	@ (8008780 <__multadd+0x84>)
 800874e:	480d      	ldr	r0, [pc, #52]	@ (8008784 <__multadd+0x88>)
 8008750:	21ba      	movs	r1, #186	@ 0xba
 8008752:	f001 fcfd 	bl	800a150 <__assert_func>
 8008756:	6922      	ldr	r2, [r4, #16]
 8008758:	3202      	adds	r2, #2
 800875a:	f104 010c 	add.w	r1, r4, #12
 800875e:	0092      	lsls	r2, r2, #2
 8008760:	300c      	adds	r0, #12
 8008762:	f001 fcdf 	bl	800a124 <memcpy>
 8008766:	4621      	mov	r1, r4
 8008768:	4638      	mov	r0, r7
 800876a:	f7ff ffa5 	bl	80086b8 <_Bfree>
 800876e:	4644      	mov	r4, r8
 8008770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008774:	3501      	adds	r5, #1
 8008776:	615e      	str	r6, [r3, #20]
 8008778:	6125      	str	r5, [r4, #16]
 800877a:	4620      	mov	r0, r4
 800877c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008780:	0800afa9 	.word	0x0800afa9
 8008784:	0800afba 	.word	0x0800afba

08008788 <__s2b>:
 8008788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800878c:	460c      	mov	r4, r1
 800878e:	4615      	mov	r5, r2
 8008790:	461f      	mov	r7, r3
 8008792:	2209      	movs	r2, #9
 8008794:	3308      	adds	r3, #8
 8008796:	4606      	mov	r6, r0
 8008798:	fb93 f3f2 	sdiv	r3, r3, r2
 800879c:	2100      	movs	r1, #0
 800879e:	2201      	movs	r2, #1
 80087a0:	429a      	cmp	r2, r3
 80087a2:	db09      	blt.n	80087b8 <__s2b+0x30>
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7ff ff47 	bl	8008638 <_Balloc>
 80087aa:	b940      	cbnz	r0, 80087be <__s2b+0x36>
 80087ac:	4602      	mov	r2, r0
 80087ae:	4b19      	ldr	r3, [pc, #100]	@ (8008814 <__s2b+0x8c>)
 80087b0:	4819      	ldr	r0, [pc, #100]	@ (8008818 <__s2b+0x90>)
 80087b2:	21d3      	movs	r1, #211	@ 0xd3
 80087b4:	f001 fccc 	bl	800a150 <__assert_func>
 80087b8:	0052      	lsls	r2, r2, #1
 80087ba:	3101      	adds	r1, #1
 80087bc:	e7f0      	b.n	80087a0 <__s2b+0x18>
 80087be:	9b08      	ldr	r3, [sp, #32]
 80087c0:	6143      	str	r3, [r0, #20]
 80087c2:	2d09      	cmp	r5, #9
 80087c4:	f04f 0301 	mov.w	r3, #1
 80087c8:	6103      	str	r3, [r0, #16]
 80087ca:	dd16      	ble.n	80087fa <__s2b+0x72>
 80087cc:	f104 0909 	add.w	r9, r4, #9
 80087d0:	46c8      	mov	r8, r9
 80087d2:	442c      	add	r4, r5
 80087d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087d8:	4601      	mov	r1, r0
 80087da:	3b30      	subs	r3, #48	@ 0x30
 80087dc:	220a      	movs	r2, #10
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff ff8c 	bl	80086fc <__multadd>
 80087e4:	45a0      	cmp	r8, r4
 80087e6:	d1f5      	bne.n	80087d4 <__s2b+0x4c>
 80087e8:	f1a5 0408 	sub.w	r4, r5, #8
 80087ec:	444c      	add	r4, r9
 80087ee:	1b2d      	subs	r5, r5, r4
 80087f0:	1963      	adds	r3, r4, r5
 80087f2:	42bb      	cmp	r3, r7
 80087f4:	db04      	blt.n	8008800 <__s2b+0x78>
 80087f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087fa:	340a      	adds	r4, #10
 80087fc:	2509      	movs	r5, #9
 80087fe:	e7f6      	b.n	80087ee <__s2b+0x66>
 8008800:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008804:	4601      	mov	r1, r0
 8008806:	3b30      	subs	r3, #48	@ 0x30
 8008808:	220a      	movs	r2, #10
 800880a:	4630      	mov	r0, r6
 800880c:	f7ff ff76 	bl	80086fc <__multadd>
 8008810:	e7ee      	b.n	80087f0 <__s2b+0x68>
 8008812:	bf00      	nop
 8008814:	0800afa9 	.word	0x0800afa9
 8008818:	0800afba 	.word	0x0800afba

0800881c <__hi0bits>:
 800881c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008820:	4603      	mov	r3, r0
 8008822:	bf36      	itet	cc
 8008824:	0403      	lslcc	r3, r0, #16
 8008826:	2000      	movcs	r0, #0
 8008828:	2010      	movcc	r0, #16
 800882a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800882e:	bf3c      	itt	cc
 8008830:	021b      	lslcc	r3, r3, #8
 8008832:	3008      	addcc	r0, #8
 8008834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008838:	bf3c      	itt	cc
 800883a:	011b      	lslcc	r3, r3, #4
 800883c:	3004      	addcc	r0, #4
 800883e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008842:	bf3c      	itt	cc
 8008844:	009b      	lslcc	r3, r3, #2
 8008846:	3002      	addcc	r0, #2
 8008848:	2b00      	cmp	r3, #0
 800884a:	db05      	blt.n	8008858 <__hi0bits+0x3c>
 800884c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008850:	f100 0001 	add.w	r0, r0, #1
 8008854:	bf08      	it	eq
 8008856:	2020      	moveq	r0, #32
 8008858:	4770      	bx	lr

0800885a <__lo0bits>:
 800885a:	6803      	ldr	r3, [r0, #0]
 800885c:	4602      	mov	r2, r0
 800885e:	f013 0007 	ands.w	r0, r3, #7
 8008862:	d00b      	beq.n	800887c <__lo0bits+0x22>
 8008864:	07d9      	lsls	r1, r3, #31
 8008866:	d421      	bmi.n	80088ac <__lo0bits+0x52>
 8008868:	0798      	lsls	r0, r3, #30
 800886a:	bf49      	itett	mi
 800886c:	085b      	lsrmi	r3, r3, #1
 800886e:	089b      	lsrpl	r3, r3, #2
 8008870:	2001      	movmi	r0, #1
 8008872:	6013      	strmi	r3, [r2, #0]
 8008874:	bf5c      	itt	pl
 8008876:	6013      	strpl	r3, [r2, #0]
 8008878:	2002      	movpl	r0, #2
 800887a:	4770      	bx	lr
 800887c:	b299      	uxth	r1, r3
 800887e:	b909      	cbnz	r1, 8008884 <__lo0bits+0x2a>
 8008880:	0c1b      	lsrs	r3, r3, #16
 8008882:	2010      	movs	r0, #16
 8008884:	b2d9      	uxtb	r1, r3
 8008886:	b909      	cbnz	r1, 800888c <__lo0bits+0x32>
 8008888:	3008      	adds	r0, #8
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	0719      	lsls	r1, r3, #28
 800888e:	bf04      	itt	eq
 8008890:	091b      	lsreq	r3, r3, #4
 8008892:	3004      	addeq	r0, #4
 8008894:	0799      	lsls	r1, r3, #30
 8008896:	bf04      	itt	eq
 8008898:	089b      	lsreq	r3, r3, #2
 800889a:	3002      	addeq	r0, #2
 800889c:	07d9      	lsls	r1, r3, #31
 800889e:	d403      	bmi.n	80088a8 <__lo0bits+0x4e>
 80088a0:	085b      	lsrs	r3, r3, #1
 80088a2:	f100 0001 	add.w	r0, r0, #1
 80088a6:	d003      	beq.n	80088b0 <__lo0bits+0x56>
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	4770      	bx	lr
 80088ac:	2000      	movs	r0, #0
 80088ae:	4770      	bx	lr
 80088b0:	2020      	movs	r0, #32
 80088b2:	4770      	bx	lr

080088b4 <__i2b>:
 80088b4:	b510      	push	{r4, lr}
 80088b6:	460c      	mov	r4, r1
 80088b8:	2101      	movs	r1, #1
 80088ba:	f7ff febd 	bl	8008638 <_Balloc>
 80088be:	4602      	mov	r2, r0
 80088c0:	b928      	cbnz	r0, 80088ce <__i2b+0x1a>
 80088c2:	4b05      	ldr	r3, [pc, #20]	@ (80088d8 <__i2b+0x24>)
 80088c4:	4805      	ldr	r0, [pc, #20]	@ (80088dc <__i2b+0x28>)
 80088c6:	f240 1145 	movw	r1, #325	@ 0x145
 80088ca:	f001 fc41 	bl	800a150 <__assert_func>
 80088ce:	2301      	movs	r3, #1
 80088d0:	6144      	str	r4, [r0, #20]
 80088d2:	6103      	str	r3, [r0, #16]
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	bf00      	nop
 80088d8:	0800afa9 	.word	0x0800afa9
 80088dc:	0800afba 	.word	0x0800afba

080088e0 <__multiply>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	4614      	mov	r4, r2
 80088e6:	690a      	ldr	r2, [r1, #16]
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	bfa8      	it	ge
 80088ee:	4623      	movge	r3, r4
 80088f0:	460f      	mov	r7, r1
 80088f2:	bfa4      	itt	ge
 80088f4:	460c      	movge	r4, r1
 80088f6:	461f      	movge	r7, r3
 80088f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80088fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008900:	68a3      	ldr	r3, [r4, #8]
 8008902:	6861      	ldr	r1, [r4, #4]
 8008904:	eb0a 0609 	add.w	r6, sl, r9
 8008908:	42b3      	cmp	r3, r6
 800890a:	b085      	sub	sp, #20
 800890c:	bfb8      	it	lt
 800890e:	3101      	addlt	r1, #1
 8008910:	f7ff fe92 	bl	8008638 <_Balloc>
 8008914:	b930      	cbnz	r0, 8008924 <__multiply+0x44>
 8008916:	4602      	mov	r2, r0
 8008918:	4b44      	ldr	r3, [pc, #272]	@ (8008a2c <__multiply+0x14c>)
 800891a:	4845      	ldr	r0, [pc, #276]	@ (8008a30 <__multiply+0x150>)
 800891c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008920:	f001 fc16 	bl	800a150 <__assert_func>
 8008924:	f100 0514 	add.w	r5, r0, #20
 8008928:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800892c:	462b      	mov	r3, r5
 800892e:	2200      	movs	r2, #0
 8008930:	4543      	cmp	r3, r8
 8008932:	d321      	bcc.n	8008978 <__multiply+0x98>
 8008934:	f107 0114 	add.w	r1, r7, #20
 8008938:	f104 0214 	add.w	r2, r4, #20
 800893c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008940:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008944:	9302      	str	r3, [sp, #8]
 8008946:	1b13      	subs	r3, r2, r4
 8008948:	3b15      	subs	r3, #21
 800894a:	f023 0303 	bic.w	r3, r3, #3
 800894e:	3304      	adds	r3, #4
 8008950:	f104 0715 	add.w	r7, r4, #21
 8008954:	42ba      	cmp	r2, r7
 8008956:	bf38      	it	cc
 8008958:	2304      	movcc	r3, #4
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	9103      	str	r1, [sp, #12]
 8008960:	428b      	cmp	r3, r1
 8008962:	d80c      	bhi.n	800897e <__multiply+0x9e>
 8008964:	2e00      	cmp	r6, #0
 8008966:	dd03      	ble.n	8008970 <__multiply+0x90>
 8008968:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800896c:	2b00      	cmp	r3, #0
 800896e:	d05b      	beq.n	8008a28 <__multiply+0x148>
 8008970:	6106      	str	r6, [r0, #16]
 8008972:	b005      	add	sp, #20
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	f843 2b04 	str.w	r2, [r3], #4
 800897c:	e7d8      	b.n	8008930 <__multiply+0x50>
 800897e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008982:	f1ba 0f00 	cmp.w	sl, #0
 8008986:	d024      	beq.n	80089d2 <__multiply+0xf2>
 8008988:	f104 0e14 	add.w	lr, r4, #20
 800898c:	46a9      	mov	r9, r5
 800898e:	f04f 0c00 	mov.w	ip, #0
 8008992:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008996:	f8d9 3000 	ldr.w	r3, [r9]
 800899a:	fa1f fb87 	uxth.w	fp, r7
 800899e:	b29b      	uxth	r3, r3
 80089a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80089a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80089a8:	f8d9 7000 	ldr.w	r7, [r9]
 80089ac:	4463      	add	r3, ip
 80089ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80089b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80089c0:	4572      	cmp	r2, lr
 80089c2:	f849 3b04 	str.w	r3, [r9], #4
 80089c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089ca:	d8e2      	bhi.n	8008992 <__multiply+0xb2>
 80089cc:	9b01      	ldr	r3, [sp, #4]
 80089ce:	f845 c003 	str.w	ip, [r5, r3]
 80089d2:	9b03      	ldr	r3, [sp, #12]
 80089d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80089d8:	3104      	adds	r1, #4
 80089da:	f1b9 0f00 	cmp.w	r9, #0
 80089de:	d021      	beq.n	8008a24 <__multiply+0x144>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	f104 0c14 	add.w	ip, r4, #20
 80089e6:	46ae      	mov	lr, r5
 80089e8:	f04f 0a00 	mov.w	sl, #0
 80089ec:	f8bc b000 	ldrh.w	fp, [ip]
 80089f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80089f4:	fb09 770b 	mla	r7, r9, fp, r7
 80089f8:	4457      	add	r7, sl
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a00:	f84e 3b04 	str.w	r3, [lr], #4
 8008a04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a0c:	f8be 3000 	ldrh.w	r3, [lr]
 8008a10:	fb09 330a 	mla	r3, r9, sl, r3
 8008a14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008a18:	4562      	cmp	r2, ip
 8008a1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a1e:	d8e5      	bhi.n	80089ec <__multiply+0x10c>
 8008a20:	9f01      	ldr	r7, [sp, #4]
 8008a22:	51eb      	str	r3, [r5, r7]
 8008a24:	3504      	adds	r5, #4
 8008a26:	e799      	b.n	800895c <__multiply+0x7c>
 8008a28:	3e01      	subs	r6, #1
 8008a2a:	e79b      	b.n	8008964 <__multiply+0x84>
 8008a2c:	0800afa9 	.word	0x0800afa9
 8008a30:	0800afba 	.word	0x0800afba

08008a34 <__pow5mult>:
 8008a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	4615      	mov	r5, r2
 8008a3a:	f012 0203 	ands.w	r2, r2, #3
 8008a3e:	4607      	mov	r7, r0
 8008a40:	460e      	mov	r6, r1
 8008a42:	d007      	beq.n	8008a54 <__pow5mult+0x20>
 8008a44:	4c25      	ldr	r4, [pc, #148]	@ (8008adc <__pow5mult+0xa8>)
 8008a46:	3a01      	subs	r2, #1
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a4e:	f7ff fe55 	bl	80086fc <__multadd>
 8008a52:	4606      	mov	r6, r0
 8008a54:	10ad      	asrs	r5, r5, #2
 8008a56:	d03d      	beq.n	8008ad4 <__pow5mult+0xa0>
 8008a58:	69fc      	ldr	r4, [r7, #28]
 8008a5a:	b97c      	cbnz	r4, 8008a7c <__pow5mult+0x48>
 8008a5c:	2010      	movs	r0, #16
 8008a5e:	f7ff fd35 	bl	80084cc <malloc>
 8008a62:	4602      	mov	r2, r0
 8008a64:	61f8      	str	r0, [r7, #28]
 8008a66:	b928      	cbnz	r0, 8008a74 <__pow5mult+0x40>
 8008a68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae0 <__pow5mult+0xac>)
 8008a6a:	481e      	ldr	r0, [pc, #120]	@ (8008ae4 <__pow5mult+0xb0>)
 8008a6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a70:	f001 fb6e 	bl	800a150 <__assert_func>
 8008a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a78:	6004      	str	r4, [r0, #0]
 8008a7a:	60c4      	str	r4, [r0, #12]
 8008a7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a84:	b94c      	cbnz	r4, 8008a9a <__pow5mult+0x66>
 8008a86:	f240 2171 	movw	r1, #625	@ 0x271
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	f7ff ff12 	bl	80088b4 <__i2b>
 8008a90:	2300      	movs	r3, #0
 8008a92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a96:	4604      	mov	r4, r0
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	f04f 0900 	mov.w	r9, #0
 8008a9e:	07eb      	lsls	r3, r5, #31
 8008aa0:	d50a      	bpl.n	8008ab8 <__pow5mult+0x84>
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	f7ff ff1a 	bl	80088e0 <__multiply>
 8008aac:	4631      	mov	r1, r6
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff fe01 	bl	80086b8 <_Bfree>
 8008ab6:	4646      	mov	r6, r8
 8008ab8:	106d      	asrs	r5, r5, #1
 8008aba:	d00b      	beq.n	8008ad4 <__pow5mult+0xa0>
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	b938      	cbnz	r0, 8008ad0 <__pow5mult+0x9c>
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f7ff ff0b 	bl	80088e0 <__multiply>
 8008aca:	6020      	str	r0, [r4, #0]
 8008acc:	f8c0 9000 	str.w	r9, [r0]
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	e7e4      	b.n	8008a9e <__pow5mult+0x6a>
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ada:	bf00      	nop
 8008adc:	0800b014 	.word	0x0800b014
 8008ae0:	0800af3a 	.word	0x0800af3a
 8008ae4:	0800afba 	.word	0x0800afba

08008ae8 <__lshift>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	460c      	mov	r4, r1
 8008aee:	6849      	ldr	r1, [r1, #4]
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008af6:	68a3      	ldr	r3, [r4, #8]
 8008af8:	4607      	mov	r7, r0
 8008afa:	4691      	mov	r9, r2
 8008afc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b00:	f108 0601 	add.w	r6, r8, #1
 8008b04:	42b3      	cmp	r3, r6
 8008b06:	db0b      	blt.n	8008b20 <__lshift+0x38>
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7ff fd95 	bl	8008638 <_Balloc>
 8008b0e:	4605      	mov	r5, r0
 8008b10:	b948      	cbnz	r0, 8008b26 <__lshift+0x3e>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b28      	ldr	r3, [pc, #160]	@ (8008bb8 <__lshift+0xd0>)
 8008b16:	4829      	ldr	r0, [pc, #164]	@ (8008bbc <__lshift+0xd4>)
 8008b18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b1c:	f001 fb18 	bl	800a150 <__assert_func>
 8008b20:	3101      	adds	r1, #1
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	e7ee      	b.n	8008b04 <__lshift+0x1c>
 8008b26:	2300      	movs	r3, #0
 8008b28:	f100 0114 	add.w	r1, r0, #20
 8008b2c:	f100 0210 	add.w	r2, r0, #16
 8008b30:	4618      	mov	r0, r3
 8008b32:	4553      	cmp	r3, sl
 8008b34:	db33      	blt.n	8008b9e <__lshift+0xb6>
 8008b36:	6920      	ldr	r0, [r4, #16]
 8008b38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b3c:	f104 0314 	add.w	r3, r4, #20
 8008b40:	f019 091f 	ands.w	r9, r9, #31
 8008b44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b4c:	d02b      	beq.n	8008ba6 <__lshift+0xbe>
 8008b4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b52:	468a      	mov	sl, r1
 8008b54:	2200      	movs	r2, #0
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	fa00 f009 	lsl.w	r0, r0, r9
 8008b5c:	4310      	orrs	r0, r2
 8008b5e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b66:	459c      	cmp	ip, r3
 8008b68:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b6c:	d8f3      	bhi.n	8008b56 <__lshift+0x6e>
 8008b6e:	ebac 0304 	sub.w	r3, ip, r4
 8008b72:	3b15      	subs	r3, #21
 8008b74:	f023 0303 	bic.w	r3, r3, #3
 8008b78:	3304      	adds	r3, #4
 8008b7a:	f104 0015 	add.w	r0, r4, #21
 8008b7e:	4584      	cmp	ip, r0
 8008b80:	bf38      	it	cc
 8008b82:	2304      	movcc	r3, #4
 8008b84:	50ca      	str	r2, [r1, r3]
 8008b86:	b10a      	cbz	r2, 8008b8c <__lshift+0xa4>
 8008b88:	f108 0602 	add.w	r6, r8, #2
 8008b8c:	3e01      	subs	r6, #1
 8008b8e:	4638      	mov	r0, r7
 8008b90:	612e      	str	r6, [r5, #16]
 8008b92:	4621      	mov	r1, r4
 8008b94:	f7ff fd90 	bl	80086b8 <_Bfree>
 8008b98:	4628      	mov	r0, r5
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	e7c5      	b.n	8008b32 <__lshift+0x4a>
 8008ba6:	3904      	subs	r1, #4
 8008ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bb0:	459c      	cmp	ip, r3
 8008bb2:	d8f9      	bhi.n	8008ba8 <__lshift+0xc0>
 8008bb4:	e7ea      	b.n	8008b8c <__lshift+0xa4>
 8008bb6:	bf00      	nop
 8008bb8:	0800afa9 	.word	0x0800afa9
 8008bbc:	0800afba 	.word	0x0800afba

08008bc0 <__mcmp>:
 8008bc0:	690a      	ldr	r2, [r1, #16]
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6900      	ldr	r0, [r0, #16]
 8008bc6:	1a80      	subs	r0, r0, r2
 8008bc8:	b530      	push	{r4, r5, lr}
 8008bca:	d10e      	bne.n	8008bea <__mcmp+0x2a>
 8008bcc:	3314      	adds	r3, #20
 8008bce:	3114      	adds	r1, #20
 8008bd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008be0:	4295      	cmp	r5, r2
 8008be2:	d003      	beq.n	8008bec <__mcmp+0x2c>
 8008be4:	d205      	bcs.n	8008bf2 <__mcmp+0x32>
 8008be6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bea:	bd30      	pop	{r4, r5, pc}
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	d3f3      	bcc.n	8008bd8 <__mcmp+0x18>
 8008bf0:	e7fb      	b.n	8008bea <__mcmp+0x2a>
 8008bf2:	2001      	movs	r0, #1
 8008bf4:	e7f9      	b.n	8008bea <__mcmp+0x2a>
	...

08008bf8 <__mdiff>:
 8008bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	4689      	mov	r9, r1
 8008bfe:	4606      	mov	r6, r0
 8008c00:	4611      	mov	r1, r2
 8008c02:	4648      	mov	r0, r9
 8008c04:	4614      	mov	r4, r2
 8008c06:	f7ff ffdb 	bl	8008bc0 <__mcmp>
 8008c0a:	1e05      	subs	r5, r0, #0
 8008c0c:	d112      	bne.n	8008c34 <__mdiff+0x3c>
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff fd11 	bl	8008638 <_Balloc>
 8008c16:	4602      	mov	r2, r0
 8008c18:	b928      	cbnz	r0, 8008c26 <__mdiff+0x2e>
 8008c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8008d18 <__mdiff+0x120>)
 8008c1c:	f240 2137 	movw	r1, #567	@ 0x237
 8008c20:	483e      	ldr	r0, [pc, #248]	@ (8008d1c <__mdiff+0x124>)
 8008c22:	f001 fa95 	bl	800a150 <__assert_func>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	b003      	add	sp, #12
 8008c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	bfbc      	itt	lt
 8008c36:	464b      	movlt	r3, r9
 8008c38:	46a1      	movlt	r9, r4
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c40:	bfba      	itte	lt
 8008c42:	461c      	movlt	r4, r3
 8008c44:	2501      	movlt	r5, #1
 8008c46:	2500      	movge	r5, #0
 8008c48:	f7ff fcf6 	bl	8008638 <_Balloc>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	b918      	cbnz	r0, 8008c58 <__mdiff+0x60>
 8008c50:	4b31      	ldr	r3, [pc, #196]	@ (8008d18 <__mdiff+0x120>)
 8008c52:	f240 2145 	movw	r1, #581	@ 0x245
 8008c56:	e7e3      	b.n	8008c20 <__mdiff+0x28>
 8008c58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c5c:	6926      	ldr	r6, [r4, #16]
 8008c5e:	60c5      	str	r5, [r0, #12]
 8008c60:	f109 0310 	add.w	r3, r9, #16
 8008c64:	f109 0514 	add.w	r5, r9, #20
 8008c68:	f104 0e14 	add.w	lr, r4, #20
 8008c6c:	f100 0b14 	add.w	fp, r0, #20
 8008c70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	46d9      	mov	r9, fp
 8008c7c:	f04f 0c00 	mov.w	ip, #0
 8008c80:	9b01      	ldr	r3, [sp, #4]
 8008c82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c8a:	9301      	str	r3, [sp, #4]
 8008c8c:	fa1f f38a 	uxth.w	r3, sl
 8008c90:	4619      	mov	r1, r3
 8008c92:	b283      	uxth	r3, r0
 8008c94:	1acb      	subs	r3, r1, r3
 8008c96:	0c00      	lsrs	r0, r0, #16
 8008c98:	4463      	add	r3, ip
 8008c9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ca8:	4576      	cmp	r6, lr
 8008caa:	f849 3b04 	str.w	r3, [r9], #4
 8008cae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cb2:	d8e5      	bhi.n	8008c80 <__mdiff+0x88>
 8008cb4:	1b33      	subs	r3, r6, r4
 8008cb6:	3b15      	subs	r3, #21
 8008cb8:	f023 0303 	bic.w	r3, r3, #3
 8008cbc:	3415      	adds	r4, #21
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	42a6      	cmp	r6, r4
 8008cc2:	bf38      	it	cc
 8008cc4:	2304      	movcc	r3, #4
 8008cc6:	441d      	add	r5, r3
 8008cc8:	445b      	add	r3, fp
 8008cca:	461e      	mov	r6, r3
 8008ccc:	462c      	mov	r4, r5
 8008cce:	4544      	cmp	r4, r8
 8008cd0:	d30e      	bcc.n	8008cf0 <__mdiff+0xf8>
 8008cd2:	f108 0103 	add.w	r1, r8, #3
 8008cd6:	1b49      	subs	r1, r1, r5
 8008cd8:	f021 0103 	bic.w	r1, r1, #3
 8008cdc:	3d03      	subs	r5, #3
 8008cde:	45a8      	cmp	r8, r5
 8008ce0:	bf38      	it	cc
 8008ce2:	2100      	movcc	r1, #0
 8008ce4:	440b      	add	r3, r1
 8008ce6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cea:	b191      	cbz	r1, 8008d12 <__mdiff+0x11a>
 8008cec:	6117      	str	r7, [r2, #16]
 8008cee:	e79d      	b.n	8008c2c <__mdiff+0x34>
 8008cf0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cf4:	46e6      	mov	lr, ip
 8008cf6:	0c08      	lsrs	r0, r1, #16
 8008cf8:	fa1c fc81 	uxtah	ip, ip, r1
 8008cfc:	4471      	add	r1, lr
 8008cfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d02:	b289      	uxth	r1, r1
 8008d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d08:	f846 1b04 	str.w	r1, [r6], #4
 8008d0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d10:	e7dd      	b.n	8008cce <__mdiff+0xd6>
 8008d12:	3f01      	subs	r7, #1
 8008d14:	e7e7      	b.n	8008ce6 <__mdiff+0xee>
 8008d16:	bf00      	nop
 8008d18:	0800afa9 	.word	0x0800afa9
 8008d1c:	0800afba 	.word	0x0800afba

08008d20 <__ulp>:
 8008d20:	b082      	sub	sp, #8
 8008d22:	ed8d 0b00 	vstr	d0, [sp]
 8008d26:	9a01      	ldr	r2, [sp, #4]
 8008d28:	4b0f      	ldr	r3, [pc, #60]	@ (8008d68 <__ulp+0x48>)
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dc08      	bgt.n	8008d46 <__ulp+0x26>
 8008d34:	425b      	negs	r3, r3
 8008d36:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008d3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d3e:	da04      	bge.n	8008d4a <__ulp+0x2a>
 8008d40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008d44:	4113      	asrs	r3, r2
 8008d46:	2200      	movs	r2, #0
 8008d48:	e008      	b.n	8008d5c <__ulp+0x3c>
 8008d4a:	f1a2 0314 	sub.w	r3, r2, #20
 8008d4e:	2b1e      	cmp	r3, #30
 8008d50:	bfda      	itte	le
 8008d52:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008d56:	40da      	lsrle	r2, r3
 8008d58:	2201      	movgt	r2, #1
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	ec41 0b10 	vmov	d0, r0, r1
 8008d64:	b002      	add	sp, #8
 8008d66:	4770      	bx	lr
 8008d68:	7ff00000 	.word	0x7ff00000

08008d6c <__b2d>:
 8008d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d70:	6906      	ldr	r6, [r0, #16]
 8008d72:	f100 0814 	add.w	r8, r0, #20
 8008d76:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008d7a:	1f37      	subs	r7, r6, #4
 8008d7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d80:	4610      	mov	r0, r2
 8008d82:	f7ff fd4b 	bl	800881c <__hi0bits>
 8008d86:	f1c0 0320 	rsb	r3, r0, #32
 8008d8a:	280a      	cmp	r0, #10
 8008d8c:	600b      	str	r3, [r1, #0]
 8008d8e:	491b      	ldr	r1, [pc, #108]	@ (8008dfc <__b2d+0x90>)
 8008d90:	dc15      	bgt.n	8008dbe <__b2d+0x52>
 8008d92:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d96:	fa22 f30c 	lsr.w	r3, r2, ip
 8008d9a:	45b8      	cmp	r8, r7
 8008d9c:	ea43 0501 	orr.w	r5, r3, r1
 8008da0:	bf34      	ite	cc
 8008da2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008da6:	2300      	movcs	r3, #0
 8008da8:	3015      	adds	r0, #21
 8008daa:	fa02 f000 	lsl.w	r0, r2, r0
 8008dae:	fa23 f30c 	lsr.w	r3, r3, ip
 8008db2:	4303      	orrs	r3, r0
 8008db4:	461c      	mov	r4, r3
 8008db6:	ec45 4b10 	vmov	d0, r4, r5
 8008dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbe:	45b8      	cmp	r8, r7
 8008dc0:	bf3a      	itte	cc
 8008dc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008dc6:	f1a6 0708 	subcc.w	r7, r6, #8
 8008dca:	2300      	movcs	r3, #0
 8008dcc:	380b      	subs	r0, #11
 8008dce:	d012      	beq.n	8008df6 <__b2d+0x8a>
 8008dd0:	f1c0 0120 	rsb	r1, r0, #32
 8008dd4:	fa23 f401 	lsr.w	r4, r3, r1
 8008dd8:	4082      	lsls	r2, r0
 8008dda:	4322      	orrs	r2, r4
 8008ddc:	4547      	cmp	r7, r8
 8008dde:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008de2:	bf8c      	ite	hi
 8008de4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008de8:	2200      	movls	r2, #0
 8008dea:	4083      	lsls	r3, r0
 8008dec:	40ca      	lsrs	r2, r1
 8008dee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008df2:	4313      	orrs	r3, r2
 8008df4:	e7de      	b.n	8008db4 <__b2d+0x48>
 8008df6:	ea42 0501 	orr.w	r5, r2, r1
 8008dfa:	e7db      	b.n	8008db4 <__b2d+0x48>
 8008dfc:	3ff00000 	.word	0x3ff00000

08008e00 <__d2b>:
 8008e00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e04:	460f      	mov	r7, r1
 8008e06:	2101      	movs	r1, #1
 8008e08:	ec59 8b10 	vmov	r8, r9, d0
 8008e0c:	4616      	mov	r6, r2
 8008e0e:	f7ff fc13 	bl	8008638 <_Balloc>
 8008e12:	4604      	mov	r4, r0
 8008e14:	b930      	cbnz	r0, 8008e24 <__d2b+0x24>
 8008e16:	4602      	mov	r2, r0
 8008e18:	4b23      	ldr	r3, [pc, #140]	@ (8008ea8 <__d2b+0xa8>)
 8008e1a:	4824      	ldr	r0, [pc, #144]	@ (8008eac <__d2b+0xac>)
 8008e1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e20:	f001 f996 	bl	800a150 <__assert_func>
 8008e24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e2c:	b10d      	cbz	r5, 8008e32 <__d2b+0x32>
 8008e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	f1b8 0300 	subs.w	r3, r8, #0
 8008e38:	d023      	beq.n	8008e82 <__d2b+0x82>
 8008e3a:	4668      	mov	r0, sp
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	f7ff fd0c 	bl	800885a <__lo0bits>
 8008e42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e46:	b1d0      	cbz	r0, 8008e7e <__d2b+0x7e>
 8008e48:	f1c0 0320 	rsb	r3, r0, #32
 8008e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e50:	430b      	orrs	r3, r1
 8008e52:	40c2      	lsrs	r2, r0
 8008e54:	6163      	str	r3, [r4, #20]
 8008e56:	9201      	str	r2, [sp, #4]
 8008e58:	9b01      	ldr	r3, [sp, #4]
 8008e5a:	61a3      	str	r3, [r4, #24]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bf0c      	ite	eq
 8008e60:	2201      	moveq	r2, #1
 8008e62:	2202      	movne	r2, #2
 8008e64:	6122      	str	r2, [r4, #16]
 8008e66:	b1a5      	cbz	r5, 8008e92 <__d2b+0x92>
 8008e68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008e6c:	4405      	add	r5, r0
 8008e6e:	603d      	str	r5, [r7, #0]
 8008e70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008e74:	6030      	str	r0, [r6, #0]
 8008e76:	4620      	mov	r0, r4
 8008e78:	b003      	add	sp, #12
 8008e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e7e:	6161      	str	r1, [r4, #20]
 8008e80:	e7ea      	b.n	8008e58 <__d2b+0x58>
 8008e82:	a801      	add	r0, sp, #4
 8008e84:	f7ff fce9 	bl	800885a <__lo0bits>
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	6163      	str	r3, [r4, #20]
 8008e8c:	3020      	adds	r0, #32
 8008e8e:	2201      	movs	r2, #1
 8008e90:	e7e8      	b.n	8008e64 <__d2b+0x64>
 8008e92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008e9a:	6038      	str	r0, [r7, #0]
 8008e9c:	6918      	ldr	r0, [r3, #16]
 8008e9e:	f7ff fcbd 	bl	800881c <__hi0bits>
 8008ea2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ea6:	e7e5      	b.n	8008e74 <__d2b+0x74>
 8008ea8:	0800afa9 	.word	0x0800afa9
 8008eac:	0800afba 	.word	0x0800afba

08008eb0 <__ratio>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	e9cd 1000 	strd	r1, r0, [sp]
 8008eba:	a902      	add	r1, sp, #8
 8008ebc:	f7ff ff56 	bl	8008d6c <__b2d>
 8008ec0:	9800      	ldr	r0, [sp, #0]
 8008ec2:	a903      	add	r1, sp, #12
 8008ec4:	ec55 4b10 	vmov	r4, r5, d0
 8008ec8:	f7ff ff50 	bl	8008d6c <__b2d>
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	6919      	ldr	r1, [r3, #16]
 8008ed0:	9b00      	ldr	r3, [sp, #0]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	1ac9      	subs	r1, r1, r3
 8008ed6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008eda:	1a9b      	subs	r3, r3, r2
 8008edc:	ec5b ab10 	vmov	sl, fp, d0
 8008ee0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bfce      	itee	gt
 8008ee8:	462a      	movgt	r2, r5
 8008eea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008eee:	465a      	movle	r2, fp
 8008ef0:	462f      	mov	r7, r5
 8008ef2:	46d9      	mov	r9, fp
 8008ef4:	bfcc      	ite	gt
 8008ef6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008efa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008efe:	464b      	mov	r3, r9
 8008f00:	4652      	mov	r2, sl
 8008f02:	4620      	mov	r0, r4
 8008f04:	4639      	mov	r1, r7
 8008f06:	f7f7 fca9 	bl	800085c <__aeabi_ddiv>
 8008f0a:	ec41 0b10 	vmov	d0, r0, r1
 8008f0e:	b005      	add	sp, #20
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f14 <__copybits>:
 8008f14:	3901      	subs	r1, #1
 8008f16:	b570      	push	{r4, r5, r6, lr}
 8008f18:	1149      	asrs	r1, r1, #5
 8008f1a:	6914      	ldr	r4, [r2, #16]
 8008f1c:	3101      	adds	r1, #1
 8008f1e:	f102 0314 	add.w	r3, r2, #20
 8008f22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f2a:	1f05      	subs	r5, r0, #4
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	d30c      	bcc.n	8008f4a <__copybits+0x36>
 8008f30:	1aa3      	subs	r3, r4, r2
 8008f32:	3b11      	subs	r3, #17
 8008f34:	f023 0303 	bic.w	r3, r3, #3
 8008f38:	3211      	adds	r2, #17
 8008f3a:	42a2      	cmp	r2, r4
 8008f3c:	bf88      	it	hi
 8008f3e:	2300      	movhi	r3, #0
 8008f40:	4418      	add	r0, r3
 8008f42:	2300      	movs	r3, #0
 8008f44:	4288      	cmp	r0, r1
 8008f46:	d305      	bcc.n	8008f54 <__copybits+0x40>
 8008f48:	bd70      	pop	{r4, r5, r6, pc}
 8008f4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f52:	e7eb      	b.n	8008f2c <__copybits+0x18>
 8008f54:	f840 3b04 	str.w	r3, [r0], #4
 8008f58:	e7f4      	b.n	8008f44 <__copybits+0x30>

08008f5a <__any_on>:
 8008f5a:	f100 0214 	add.w	r2, r0, #20
 8008f5e:	6900      	ldr	r0, [r0, #16]
 8008f60:	114b      	asrs	r3, r1, #5
 8008f62:	4298      	cmp	r0, r3
 8008f64:	b510      	push	{r4, lr}
 8008f66:	db11      	blt.n	8008f8c <__any_on+0x32>
 8008f68:	dd0a      	ble.n	8008f80 <__any_on+0x26>
 8008f6a:	f011 011f 	ands.w	r1, r1, #31
 8008f6e:	d007      	beq.n	8008f80 <__any_on+0x26>
 8008f70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f74:	fa24 f001 	lsr.w	r0, r4, r1
 8008f78:	fa00 f101 	lsl.w	r1, r0, r1
 8008f7c:	428c      	cmp	r4, r1
 8008f7e:	d10b      	bne.n	8008f98 <__any_on+0x3e>
 8008f80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d803      	bhi.n	8008f90 <__any_on+0x36>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	bd10      	pop	{r4, pc}
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	e7f7      	b.n	8008f80 <__any_on+0x26>
 8008f90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f94:	2900      	cmp	r1, #0
 8008f96:	d0f5      	beq.n	8008f84 <__any_on+0x2a>
 8008f98:	2001      	movs	r0, #1
 8008f9a:	e7f6      	b.n	8008f8a <__any_on+0x30>

08008f9c <sulp>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	ec45 4b10 	vmov	d0, r4, r5
 8008fa6:	4616      	mov	r6, r2
 8008fa8:	f7ff feba 	bl	8008d20 <__ulp>
 8008fac:	ec51 0b10 	vmov	r0, r1, d0
 8008fb0:	b17e      	cbz	r6, 8008fd2 <sulp+0x36>
 8008fb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008fb6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dd09      	ble.n	8008fd2 <sulp+0x36>
 8008fbe:	051b      	lsls	r3, r3, #20
 8008fc0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008fc4:	2400      	movs	r4, #0
 8008fc6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008fca:	4622      	mov	r2, r4
 8008fcc:	462b      	mov	r3, r5
 8008fce:	f7f7 fb1b 	bl	8000608 <__aeabi_dmul>
 8008fd2:	ec41 0b10 	vmov	d0, r0, r1
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}

08008fd8 <_strtod_l>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	b09f      	sub	sp, #124	@ 0x7c
 8008fde:	460c      	mov	r4, r1
 8008fe0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008fe6:	9005      	str	r0, [sp, #20]
 8008fe8:	f04f 0a00 	mov.w	sl, #0
 8008fec:	f04f 0b00 	mov.w	fp, #0
 8008ff0:	460a      	mov	r2, r1
 8008ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ff4:	7811      	ldrb	r1, [r2, #0]
 8008ff6:	292b      	cmp	r1, #43	@ 0x2b
 8008ff8:	d04a      	beq.n	8009090 <_strtod_l+0xb8>
 8008ffa:	d838      	bhi.n	800906e <_strtod_l+0x96>
 8008ffc:	290d      	cmp	r1, #13
 8008ffe:	d832      	bhi.n	8009066 <_strtod_l+0x8e>
 8009000:	2908      	cmp	r1, #8
 8009002:	d832      	bhi.n	800906a <_strtod_l+0x92>
 8009004:	2900      	cmp	r1, #0
 8009006:	d03b      	beq.n	8009080 <_strtod_l+0xa8>
 8009008:	2200      	movs	r2, #0
 800900a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800900c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800900e:	782a      	ldrb	r2, [r5, #0]
 8009010:	2a30      	cmp	r2, #48	@ 0x30
 8009012:	f040 80b3 	bne.w	800917c <_strtod_l+0x1a4>
 8009016:	786a      	ldrb	r2, [r5, #1]
 8009018:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800901c:	2a58      	cmp	r2, #88	@ 0x58
 800901e:	d16e      	bne.n	80090fe <_strtod_l+0x126>
 8009020:	9302      	str	r3, [sp, #8]
 8009022:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	ab1a      	add	r3, sp, #104	@ 0x68
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	4a8e      	ldr	r2, [pc, #568]	@ (8009264 <_strtod_l+0x28c>)
 800902c:	9805      	ldr	r0, [sp, #20]
 800902e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009030:	a919      	add	r1, sp, #100	@ 0x64
 8009032:	f001 f927 	bl	800a284 <__gethex>
 8009036:	f010 060f 	ands.w	r6, r0, #15
 800903a:	4604      	mov	r4, r0
 800903c:	d005      	beq.n	800904a <_strtod_l+0x72>
 800903e:	2e06      	cmp	r6, #6
 8009040:	d128      	bne.n	8009094 <_strtod_l+0xbc>
 8009042:	3501      	adds	r5, #1
 8009044:	2300      	movs	r3, #0
 8009046:	9519      	str	r5, [sp, #100]	@ 0x64
 8009048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800904a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 858e 	bne.w	8009b6e <_strtod_l+0xb96>
 8009052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009054:	b1cb      	cbz	r3, 800908a <_strtod_l+0xb2>
 8009056:	4652      	mov	r2, sl
 8009058:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800905c:	ec43 2b10 	vmov	d0, r2, r3
 8009060:	b01f      	add	sp, #124	@ 0x7c
 8009062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009066:	2920      	cmp	r1, #32
 8009068:	d1ce      	bne.n	8009008 <_strtod_l+0x30>
 800906a:	3201      	adds	r2, #1
 800906c:	e7c1      	b.n	8008ff2 <_strtod_l+0x1a>
 800906e:	292d      	cmp	r1, #45	@ 0x2d
 8009070:	d1ca      	bne.n	8009008 <_strtod_l+0x30>
 8009072:	2101      	movs	r1, #1
 8009074:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009076:	1c51      	adds	r1, r2, #1
 8009078:	9119      	str	r1, [sp, #100]	@ 0x64
 800907a:	7852      	ldrb	r2, [r2, #1]
 800907c:	2a00      	cmp	r2, #0
 800907e:	d1c5      	bne.n	800900c <_strtod_l+0x34>
 8009080:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009082:	9419      	str	r4, [sp, #100]	@ 0x64
 8009084:	2b00      	cmp	r3, #0
 8009086:	f040 8570 	bne.w	8009b6a <_strtod_l+0xb92>
 800908a:	4652      	mov	r2, sl
 800908c:	465b      	mov	r3, fp
 800908e:	e7e5      	b.n	800905c <_strtod_l+0x84>
 8009090:	2100      	movs	r1, #0
 8009092:	e7ef      	b.n	8009074 <_strtod_l+0x9c>
 8009094:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009096:	b13a      	cbz	r2, 80090a8 <_strtod_l+0xd0>
 8009098:	2135      	movs	r1, #53	@ 0x35
 800909a:	a81c      	add	r0, sp, #112	@ 0x70
 800909c:	f7ff ff3a 	bl	8008f14 <__copybits>
 80090a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090a2:	9805      	ldr	r0, [sp, #20]
 80090a4:	f7ff fb08 	bl	80086b8 <_Bfree>
 80090a8:	3e01      	subs	r6, #1
 80090aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80090ac:	2e04      	cmp	r6, #4
 80090ae:	d806      	bhi.n	80090be <_strtod_l+0xe6>
 80090b0:	e8df f006 	tbb	[pc, r6]
 80090b4:	201d0314 	.word	0x201d0314
 80090b8:	14          	.byte	0x14
 80090b9:	00          	.byte	0x00
 80090ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80090be:	05e1      	lsls	r1, r4, #23
 80090c0:	bf48      	it	mi
 80090c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80090c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090ca:	0d1b      	lsrs	r3, r3, #20
 80090cc:	051b      	lsls	r3, r3, #20
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1bb      	bne.n	800904a <_strtod_l+0x72>
 80090d2:	f7fe fb2f 	bl	8007734 <__errno>
 80090d6:	2322      	movs	r3, #34	@ 0x22
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	e7b6      	b.n	800904a <_strtod_l+0x72>
 80090dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80090e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80090e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090ec:	e7e7      	b.n	80090be <_strtod_l+0xe6>
 80090ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800926c <_strtod_l+0x294>
 80090f2:	e7e4      	b.n	80090be <_strtod_l+0xe6>
 80090f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80090f8:	f04f 3aff 	mov.w	sl, #4294967295
 80090fc:	e7df      	b.n	80090be <_strtod_l+0xe6>
 80090fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	9219      	str	r2, [sp, #100]	@ 0x64
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	2b30      	cmp	r3, #48	@ 0x30
 8009108:	d0f9      	beq.n	80090fe <_strtod_l+0x126>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d09d      	beq.n	800904a <_strtod_l+0x72>
 800910e:	2301      	movs	r3, #1
 8009110:	9309      	str	r3, [sp, #36]	@ 0x24
 8009112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009114:	930c      	str	r3, [sp, #48]	@ 0x30
 8009116:	2300      	movs	r3, #0
 8009118:	9308      	str	r3, [sp, #32]
 800911a:	930a      	str	r3, [sp, #40]	@ 0x28
 800911c:	461f      	mov	r7, r3
 800911e:	220a      	movs	r2, #10
 8009120:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009122:	7805      	ldrb	r5, [r0, #0]
 8009124:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009128:	b2d9      	uxtb	r1, r3
 800912a:	2909      	cmp	r1, #9
 800912c:	d928      	bls.n	8009180 <_strtod_l+0x1a8>
 800912e:	494e      	ldr	r1, [pc, #312]	@ (8009268 <_strtod_l+0x290>)
 8009130:	2201      	movs	r2, #1
 8009132:	f000 ffd5 	bl	800a0e0 <strncmp>
 8009136:	2800      	cmp	r0, #0
 8009138:	d032      	beq.n	80091a0 <_strtod_l+0x1c8>
 800913a:	2000      	movs	r0, #0
 800913c:	462a      	mov	r2, r5
 800913e:	4681      	mov	r9, r0
 8009140:	463d      	mov	r5, r7
 8009142:	4603      	mov	r3, r0
 8009144:	2a65      	cmp	r2, #101	@ 0x65
 8009146:	d001      	beq.n	800914c <_strtod_l+0x174>
 8009148:	2a45      	cmp	r2, #69	@ 0x45
 800914a:	d114      	bne.n	8009176 <_strtod_l+0x19e>
 800914c:	b91d      	cbnz	r5, 8009156 <_strtod_l+0x17e>
 800914e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009150:	4302      	orrs	r2, r0
 8009152:	d095      	beq.n	8009080 <_strtod_l+0xa8>
 8009154:	2500      	movs	r5, #0
 8009156:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009158:	1c62      	adds	r2, r4, #1
 800915a:	9219      	str	r2, [sp, #100]	@ 0x64
 800915c:	7862      	ldrb	r2, [r4, #1]
 800915e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009160:	d077      	beq.n	8009252 <_strtod_l+0x27a>
 8009162:	2a2d      	cmp	r2, #45	@ 0x2d
 8009164:	d07b      	beq.n	800925e <_strtod_l+0x286>
 8009166:	f04f 0c00 	mov.w	ip, #0
 800916a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800916e:	2909      	cmp	r1, #9
 8009170:	f240 8082 	bls.w	8009278 <_strtod_l+0x2a0>
 8009174:	9419      	str	r4, [sp, #100]	@ 0x64
 8009176:	f04f 0800 	mov.w	r8, #0
 800917a:	e0a2      	b.n	80092c2 <_strtod_l+0x2ea>
 800917c:	2300      	movs	r3, #0
 800917e:	e7c7      	b.n	8009110 <_strtod_l+0x138>
 8009180:	2f08      	cmp	r7, #8
 8009182:	bfd5      	itete	le
 8009184:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009186:	9908      	ldrgt	r1, [sp, #32]
 8009188:	fb02 3301 	mlale	r3, r2, r1, r3
 800918c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009190:	f100 0001 	add.w	r0, r0, #1
 8009194:	bfd4      	ite	le
 8009196:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009198:	9308      	strgt	r3, [sp, #32]
 800919a:	3701      	adds	r7, #1
 800919c:	9019      	str	r0, [sp, #100]	@ 0x64
 800919e:	e7bf      	b.n	8009120 <_strtod_l+0x148>
 80091a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80091a6:	785a      	ldrb	r2, [r3, #1]
 80091a8:	b37f      	cbz	r7, 800920a <_strtod_l+0x232>
 80091aa:	4681      	mov	r9, r0
 80091ac:	463d      	mov	r5, r7
 80091ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80091b2:	2b09      	cmp	r3, #9
 80091b4:	d912      	bls.n	80091dc <_strtod_l+0x204>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e7c4      	b.n	8009144 <_strtod_l+0x16c>
 80091ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	9219      	str	r2, [sp, #100]	@ 0x64
 80091c0:	785a      	ldrb	r2, [r3, #1]
 80091c2:	3001      	adds	r0, #1
 80091c4:	2a30      	cmp	r2, #48	@ 0x30
 80091c6:	d0f8      	beq.n	80091ba <_strtod_l+0x1e2>
 80091c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	f200 84d3 	bhi.w	8009b78 <_strtod_l+0xba0>
 80091d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80091d6:	4681      	mov	r9, r0
 80091d8:	2000      	movs	r0, #0
 80091da:	4605      	mov	r5, r0
 80091dc:	3a30      	subs	r2, #48	@ 0x30
 80091de:	f100 0301 	add.w	r3, r0, #1
 80091e2:	d02a      	beq.n	800923a <_strtod_l+0x262>
 80091e4:	4499      	add	r9, r3
 80091e6:	eb00 0c05 	add.w	ip, r0, r5
 80091ea:	462b      	mov	r3, r5
 80091ec:	210a      	movs	r1, #10
 80091ee:	4563      	cmp	r3, ip
 80091f0:	d10d      	bne.n	800920e <_strtod_l+0x236>
 80091f2:	1c69      	adds	r1, r5, #1
 80091f4:	4401      	add	r1, r0
 80091f6:	4428      	add	r0, r5
 80091f8:	2808      	cmp	r0, #8
 80091fa:	dc16      	bgt.n	800922a <_strtod_l+0x252>
 80091fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091fe:	230a      	movs	r3, #10
 8009200:	fb03 2300 	mla	r3, r3, r0, r2
 8009204:	930a      	str	r3, [sp, #40]	@ 0x28
 8009206:	2300      	movs	r3, #0
 8009208:	e018      	b.n	800923c <_strtod_l+0x264>
 800920a:	4638      	mov	r0, r7
 800920c:	e7da      	b.n	80091c4 <_strtod_l+0x1ec>
 800920e:	2b08      	cmp	r3, #8
 8009210:	f103 0301 	add.w	r3, r3, #1
 8009214:	dc03      	bgt.n	800921e <_strtod_l+0x246>
 8009216:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009218:	434e      	muls	r6, r1
 800921a:	960a      	str	r6, [sp, #40]	@ 0x28
 800921c:	e7e7      	b.n	80091ee <_strtod_l+0x216>
 800921e:	2b10      	cmp	r3, #16
 8009220:	bfde      	ittt	le
 8009222:	9e08      	ldrle	r6, [sp, #32]
 8009224:	434e      	mulle	r6, r1
 8009226:	9608      	strle	r6, [sp, #32]
 8009228:	e7e1      	b.n	80091ee <_strtod_l+0x216>
 800922a:	280f      	cmp	r0, #15
 800922c:	dceb      	bgt.n	8009206 <_strtod_l+0x22e>
 800922e:	9808      	ldr	r0, [sp, #32]
 8009230:	230a      	movs	r3, #10
 8009232:	fb03 2300 	mla	r3, r3, r0, r2
 8009236:	9308      	str	r3, [sp, #32]
 8009238:	e7e5      	b.n	8009206 <_strtod_l+0x22e>
 800923a:	4629      	mov	r1, r5
 800923c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800923e:	1c50      	adds	r0, r2, #1
 8009240:	9019      	str	r0, [sp, #100]	@ 0x64
 8009242:	7852      	ldrb	r2, [r2, #1]
 8009244:	4618      	mov	r0, r3
 8009246:	460d      	mov	r5, r1
 8009248:	e7b1      	b.n	80091ae <_strtod_l+0x1d6>
 800924a:	f04f 0900 	mov.w	r9, #0
 800924e:	2301      	movs	r3, #1
 8009250:	e77d      	b.n	800914e <_strtod_l+0x176>
 8009252:	f04f 0c00 	mov.w	ip, #0
 8009256:	1ca2      	adds	r2, r4, #2
 8009258:	9219      	str	r2, [sp, #100]	@ 0x64
 800925a:	78a2      	ldrb	r2, [r4, #2]
 800925c:	e785      	b.n	800916a <_strtod_l+0x192>
 800925e:	f04f 0c01 	mov.w	ip, #1
 8009262:	e7f8      	b.n	8009256 <_strtod_l+0x27e>
 8009264:	0800b128 	.word	0x0800b128
 8009268:	0800b110 	.word	0x0800b110
 800926c:	7ff00000 	.word	0x7ff00000
 8009270:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009272:	1c51      	adds	r1, r2, #1
 8009274:	9119      	str	r1, [sp, #100]	@ 0x64
 8009276:	7852      	ldrb	r2, [r2, #1]
 8009278:	2a30      	cmp	r2, #48	@ 0x30
 800927a:	d0f9      	beq.n	8009270 <_strtod_l+0x298>
 800927c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009280:	2908      	cmp	r1, #8
 8009282:	f63f af78 	bhi.w	8009176 <_strtod_l+0x19e>
 8009286:	3a30      	subs	r2, #48	@ 0x30
 8009288:	920e      	str	r2, [sp, #56]	@ 0x38
 800928a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800928c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800928e:	f04f 080a 	mov.w	r8, #10
 8009292:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009294:	1c56      	adds	r6, r2, #1
 8009296:	9619      	str	r6, [sp, #100]	@ 0x64
 8009298:	7852      	ldrb	r2, [r2, #1]
 800929a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800929e:	f1be 0f09 	cmp.w	lr, #9
 80092a2:	d939      	bls.n	8009318 <_strtod_l+0x340>
 80092a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80092a6:	1a76      	subs	r6, r6, r1
 80092a8:	2e08      	cmp	r6, #8
 80092aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80092ae:	dc03      	bgt.n	80092b8 <_strtod_l+0x2e0>
 80092b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80092b2:	4588      	cmp	r8, r1
 80092b4:	bfa8      	it	ge
 80092b6:	4688      	movge	r8, r1
 80092b8:	f1bc 0f00 	cmp.w	ip, #0
 80092bc:	d001      	beq.n	80092c2 <_strtod_l+0x2ea>
 80092be:	f1c8 0800 	rsb	r8, r8, #0
 80092c2:	2d00      	cmp	r5, #0
 80092c4:	d14e      	bne.n	8009364 <_strtod_l+0x38c>
 80092c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092c8:	4308      	orrs	r0, r1
 80092ca:	f47f aebe 	bne.w	800904a <_strtod_l+0x72>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f47f aed6 	bne.w	8009080 <_strtod_l+0xa8>
 80092d4:	2a69      	cmp	r2, #105	@ 0x69
 80092d6:	d028      	beq.n	800932a <_strtod_l+0x352>
 80092d8:	dc25      	bgt.n	8009326 <_strtod_l+0x34e>
 80092da:	2a49      	cmp	r2, #73	@ 0x49
 80092dc:	d025      	beq.n	800932a <_strtod_l+0x352>
 80092de:	2a4e      	cmp	r2, #78	@ 0x4e
 80092e0:	f47f aece 	bne.w	8009080 <_strtod_l+0xa8>
 80092e4:	499b      	ldr	r1, [pc, #620]	@ (8009554 <_strtod_l+0x57c>)
 80092e6:	a819      	add	r0, sp, #100	@ 0x64
 80092e8:	f001 f9ee 	bl	800a6c8 <__match>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	f43f aec7 	beq.w	8009080 <_strtod_l+0xa8>
 80092f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2b28      	cmp	r3, #40	@ 0x28
 80092f8:	d12e      	bne.n	8009358 <_strtod_l+0x380>
 80092fa:	4997      	ldr	r1, [pc, #604]	@ (8009558 <_strtod_l+0x580>)
 80092fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80092fe:	a819      	add	r0, sp, #100	@ 0x64
 8009300:	f001 f9f6 	bl	800a6f0 <__hexnan>
 8009304:	2805      	cmp	r0, #5
 8009306:	d127      	bne.n	8009358 <_strtod_l+0x380>
 8009308:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800930a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800930e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009312:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009316:	e698      	b.n	800904a <_strtod_l+0x72>
 8009318:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800931a:	fb08 2101 	mla	r1, r8, r1, r2
 800931e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009322:	920e      	str	r2, [sp, #56]	@ 0x38
 8009324:	e7b5      	b.n	8009292 <_strtod_l+0x2ba>
 8009326:	2a6e      	cmp	r2, #110	@ 0x6e
 8009328:	e7da      	b.n	80092e0 <_strtod_l+0x308>
 800932a:	498c      	ldr	r1, [pc, #560]	@ (800955c <_strtod_l+0x584>)
 800932c:	a819      	add	r0, sp, #100	@ 0x64
 800932e:	f001 f9cb 	bl	800a6c8 <__match>
 8009332:	2800      	cmp	r0, #0
 8009334:	f43f aea4 	beq.w	8009080 <_strtod_l+0xa8>
 8009338:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800933a:	4989      	ldr	r1, [pc, #548]	@ (8009560 <_strtod_l+0x588>)
 800933c:	3b01      	subs	r3, #1
 800933e:	a819      	add	r0, sp, #100	@ 0x64
 8009340:	9319      	str	r3, [sp, #100]	@ 0x64
 8009342:	f001 f9c1 	bl	800a6c8 <__match>
 8009346:	b910      	cbnz	r0, 800934e <_strtod_l+0x376>
 8009348:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800934a:	3301      	adds	r3, #1
 800934c:	9319      	str	r3, [sp, #100]	@ 0x64
 800934e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009570 <_strtod_l+0x598>
 8009352:	f04f 0a00 	mov.w	sl, #0
 8009356:	e678      	b.n	800904a <_strtod_l+0x72>
 8009358:	4882      	ldr	r0, [pc, #520]	@ (8009564 <_strtod_l+0x58c>)
 800935a:	f000 fef1 	bl	800a140 <nan>
 800935e:	ec5b ab10 	vmov	sl, fp, d0
 8009362:	e672      	b.n	800904a <_strtod_l+0x72>
 8009364:	eba8 0309 	sub.w	r3, r8, r9
 8009368:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800936a:	9309      	str	r3, [sp, #36]	@ 0x24
 800936c:	2f00      	cmp	r7, #0
 800936e:	bf08      	it	eq
 8009370:	462f      	moveq	r7, r5
 8009372:	2d10      	cmp	r5, #16
 8009374:	462c      	mov	r4, r5
 8009376:	bfa8      	it	ge
 8009378:	2410      	movge	r4, #16
 800937a:	f7f7 f8cb 	bl	8000514 <__aeabi_ui2d>
 800937e:	2d09      	cmp	r5, #9
 8009380:	4682      	mov	sl, r0
 8009382:	468b      	mov	fp, r1
 8009384:	dc13      	bgt.n	80093ae <_strtod_l+0x3d6>
 8009386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	f43f ae5e 	beq.w	800904a <_strtod_l+0x72>
 800938e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009390:	dd78      	ble.n	8009484 <_strtod_l+0x4ac>
 8009392:	2b16      	cmp	r3, #22
 8009394:	dc5f      	bgt.n	8009456 <_strtod_l+0x47e>
 8009396:	4974      	ldr	r1, [pc, #464]	@ (8009568 <_strtod_l+0x590>)
 8009398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800939c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093a0:	4652      	mov	r2, sl
 80093a2:	465b      	mov	r3, fp
 80093a4:	f7f7 f930 	bl	8000608 <__aeabi_dmul>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	e64d      	b.n	800904a <_strtod_l+0x72>
 80093ae:	4b6e      	ldr	r3, [pc, #440]	@ (8009568 <_strtod_l+0x590>)
 80093b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80093b8:	f7f7 f926 	bl	8000608 <__aeabi_dmul>
 80093bc:	4682      	mov	sl, r0
 80093be:	9808      	ldr	r0, [sp, #32]
 80093c0:	468b      	mov	fp, r1
 80093c2:	f7f7 f8a7 	bl	8000514 <__aeabi_ui2d>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	4650      	mov	r0, sl
 80093cc:	4659      	mov	r1, fp
 80093ce:	f7f6 ff65 	bl	800029c <__adddf3>
 80093d2:	2d0f      	cmp	r5, #15
 80093d4:	4682      	mov	sl, r0
 80093d6:	468b      	mov	fp, r1
 80093d8:	ddd5      	ble.n	8009386 <_strtod_l+0x3ae>
 80093da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093dc:	1b2c      	subs	r4, r5, r4
 80093de:	441c      	add	r4, r3
 80093e0:	2c00      	cmp	r4, #0
 80093e2:	f340 8096 	ble.w	8009512 <_strtod_l+0x53a>
 80093e6:	f014 030f 	ands.w	r3, r4, #15
 80093ea:	d00a      	beq.n	8009402 <_strtod_l+0x42a>
 80093ec:	495e      	ldr	r1, [pc, #376]	@ (8009568 <_strtod_l+0x590>)
 80093ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093f2:	4652      	mov	r2, sl
 80093f4:	465b      	mov	r3, fp
 80093f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093fa:	f7f7 f905 	bl	8000608 <__aeabi_dmul>
 80093fe:	4682      	mov	sl, r0
 8009400:	468b      	mov	fp, r1
 8009402:	f034 040f 	bics.w	r4, r4, #15
 8009406:	d073      	beq.n	80094f0 <_strtod_l+0x518>
 8009408:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800940c:	dd48      	ble.n	80094a0 <_strtod_l+0x4c8>
 800940e:	2400      	movs	r4, #0
 8009410:	46a0      	mov	r8, r4
 8009412:	940a      	str	r4, [sp, #40]	@ 0x28
 8009414:	46a1      	mov	r9, r4
 8009416:	9a05      	ldr	r2, [sp, #20]
 8009418:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009570 <_strtod_l+0x598>
 800941c:	2322      	movs	r3, #34	@ 0x22
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	f04f 0a00 	mov.w	sl, #0
 8009424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	f43f ae0f 	beq.w	800904a <_strtod_l+0x72>
 800942c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800942e:	9805      	ldr	r0, [sp, #20]
 8009430:	f7ff f942 	bl	80086b8 <_Bfree>
 8009434:	9805      	ldr	r0, [sp, #20]
 8009436:	4649      	mov	r1, r9
 8009438:	f7ff f93e 	bl	80086b8 <_Bfree>
 800943c:	9805      	ldr	r0, [sp, #20]
 800943e:	4641      	mov	r1, r8
 8009440:	f7ff f93a 	bl	80086b8 <_Bfree>
 8009444:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009446:	9805      	ldr	r0, [sp, #20]
 8009448:	f7ff f936 	bl	80086b8 <_Bfree>
 800944c:	9805      	ldr	r0, [sp, #20]
 800944e:	4621      	mov	r1, r4
 8009450:	f7ff f932 	bl	80086b8 <_Bfree>
 8009454:	e5f9      	b.n	800904a <_strtod_l+0x72>
 8009456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009458:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800945c:	4293      	cmp	r3, r2
 800945e:	dbbc      	blt.n	80093da <_strtod_l+0x402>
 8009460:	4c41      	ldr	r4, [pc, #260]	@ (8009568 <_strtod_l+0x590>)
 8009462:	f1c5 050f 	rsb	r5, r5, #15
 8009466:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800946a:	4652      	mov	r2, sl
 800946c:	465b      	mov	r3, fp
 800946e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009472:	f7f7 f8c9 	bl	8000608 <__aeabi_dmul>
 8009476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009478:	1b5d      	subs	r5, r3, r5
 800947a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800947e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009482:	e78f      	b.n	80093a4 <_strtod_l+0x3cc>
 8009484:	3316      	adds	r3, #22
 8009486:	dba8      	blt.n	80093da <_strtod_l+0x402>
 8009488:	4b37      	ldr	r3, [pc, #220]	@ (8009568 <_strtod_l+0x590>)
 800948a:	eba9 0808 	sub.w	r8, r9, r8
 800948e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009492:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009496:	4650      	mov	r0, sl
 8009498:	4659      	mov	r1, fp
 800949a:	f7f7 f9df 	bl	800085c <__aeabi_ddiv>
 800949e:	e783      	b.n	80093a8 <_strtod_l+0x3d0>
 80094a0:	4b32      	ldr	r3, [pc, #200]	@ (800956c <_strtod_l+0x594>)
 80094a2:	9308      	str	r3, [sp, #32]
 80094a4:	2300      	movs	r3, #0
 80094a6:	1124      	asrs	r4, r4, #4
 80094a8:	4650      	mov	r0, sl
 80094aa:	4659      	mov	r1, fp
 80094ac:	461e      	mov	r6, r3
 80094ae:	2c01      	cmp	r4, #1
 80094b0:	dc21      	bgt.n	80094f6 <_strtod_l+0x51e>
 80094b2:	b10b      	cbz	r3, 80094b8 <_strtod_l+0x4e0>
 80094b4:	4682      	mov	sl, r0
 80094b6:	468b      	mov	fp, r1
 80094b8:	492c      	ldr	r1, [pc, #176]	@ (800956c <_strtod_l+0x594>)
 80094ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80094be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80094c2:	4652      	mov	r2, sl
 80094c4:	465b      	mov	r3, fp
 80094c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ca:	f7f7 f89d 	bl	8000608 <__aeabi_dmul>
 80094ce:	4b28      	ldr	r3, [pc, #160]	@ (8009570 <_strtod_l+0x598>)
 80094d0:	460a      	mov	r2, r1
 80094d2:	400b      	ands	r3, r1
 80094d4:	4927      	ldr	r1, [pc, #156]	@ (8009574 <_strtod_l+0x59c>)
 80094d6:	428b      	cmp	r3, r1
 80094d8:	4682      	mov	sl, r0
 80094da:	d898      	bhi.n	800940e <_strtod_l+0x436>
 80094dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80094e0:	428b      	cmp	r3, r1
 80094e2:	bf86      	itte	hi
 80094e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009578 <_strtod_l+0x5a0>
 80094e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80094ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80094f0:	2300      	movs	r3, #0
 80094f2:	9308      	str	r3, [sp, #32]
 80094f4:	e07a      	b.n	80095ec <_strtod_l+0x614>
 80094f6:	07e2      	lsls	r2, r4, #31
 80094f8:	d505      	bpl.n	8009506 <_strtod_l+0x52e>
 80094fa:	9b08      	ldr	r3, [sp, #32]
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f7f7 f882 	bl	8000608 <__aeabi_dmul>
 8009504:	2301      	movs	r3, #1
 8009506:	9a08      	ldr	r2, [sp, #32]
 8009508:	3208      	adds	r2, #8
 800950a:	3601      	adds	r6, #1
 800950c:	1064      	asrs	r4, r4, #1
 800950e:	9208      	str	r2, [sp, #32]
 8009510:	e7cd      	b.n	80094ae <_strtod_l+0x4d6>
 8009512:	d0ed      	beq.n	80094f0 <_strtod_l+0x518>
 8009514:	4264      	negs	r4, r4
 8009516:	f014 020f 	ands.w	r2, r4, #15
 800951a:	d00a      	beq.n	8009532 <_strtod_l+0x55a>
 800951c:	4b12      	ldr	r3, [pc, #72]	@ (8009568 <_strtod_l+0x590>)
 800951e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009522:	4650      	mov	r0, sl
 8009524:	4659      	mov	r1, fp
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f7 f997 	bl	800085c <__aeabi_ddiv>
 800952e:	4682      	mov	sl, r0
 8009530:	468b      	mov	fp, r1
 8009532:	1124      	asrs	r4, r4, #4
 8009534:	d0dc      	beq.n	80094f0 <_strtod_l+0x518>
 8009536:	2c1f      	cmp	r4, #31
 8009538:	dd20      	ble.n	800957c <_strtod_l+0x5a4>
 800953a:	2400      	movs	r4, #0
 800953c:	46a0      	mov	r8, r4
 800953e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009540:	46a1      	mov	r9, r4
 8009542:	9a05      	ldr	r2, [sp, #20]
 8009544:	2322      	movs	r3, #34	@ 0x22
 8009546:	f04f 0a00 	mov.w	sl, #0
 800954a:	f04f 0b00 	mov.w	fp, #0
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	e768      	b.n	8009424 <_strtod_l+0x44c>
 8009552:	bf00      	nop
 8009554:	0800af01 	.word	0x0800af01
 8009558:	0800b114 	.word	0x0800b114
 800955c:	0800aef9 	.word	0x0800aef9
 8009560:	0800af30 	.word	0x0800af30
 8009564:	0800b2bd 	.word	0x0800b2bd
 8009568:	0800b048 	.word	0x0800b048
 800956c:	0800b020 	.word	0x0800b020
 8009570:	7ff00000 	.word	0x7ff00000
 8009574:	7ca00000 	.word	0x7ca00000
 8009578:	7fefffff 	.word	0x7fefffff
 800957c:	f014 0310 	ands.w	r3, r4, #16
 8009580:	bf18      	it	ne
 8009582:	236a      	movne	r3, #106	@ 0x6a
 8009584:	4ea9      	ldr	r6, [pc, #676]	@ (800982c <_strtod_l+0x854>)
 8009586:	9308      	str	r3, [sp, #32]
 8009588:	4650      	mov	r0, sl
 800958a:	4659      	mov	r1, fp
 800958c:	2300      	movs	r3, #0
 800958e:	07e2      	lsls	r2, r4, #31
 8009590:	d504      	bpl.n	800959c <_strtod_l+0x5c4>
 8009592:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009596:	f7f7 f837 	bl	8000608 <__aeabi_dmul>
 800959a:	2301      	movs	r3, #1
 800959c:	1064      	asrs	r4, r4, #1
 800959e:	f106 0608 	add.w	r6, r6, #8
 80095a2:	d1f4      	bne.n	800958e <_strtod_l+0x5b6>
 80095a4:	b10b      	cbz	r3, 80095aa <_strtod_l+0x5d2>
 80095a6:	4682      	mov	sl, r0
 80095a8:	468b      	mov	fp, r1
 80095aa:	9b08      	ldr	r3, [sp, #32]
 80095ac:	b1b3      	cbz	r3, 80095dc <_strtod_l+0x604>
 80095ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80095b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	4659      	mov	r1, fp
 80095ba:	dd0f      	ble.n	80095dc <_strtod_l+0x604>
 80095bc:	2b1f      	cmp	r3, #31
 80095be:	dd55      	ble.n	800966c <_strtod_l+0x694>
 80095c0:	2b34      	cmp	r3, #52	@ 0x34
 80095c2:	bfde      	ittt	le
 80095c4:	f04f 33ff 	movle.w	r3, #4294967295
 80095c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80095cc:	4093      	lslle	r3, r2
 80095ce:	f04f 0a00 	mov.w	sl, #0
 80095d2:	bfcc      	ite	gt
 80095d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80095d8:	ea03 0b01 	andle.w	fp, r3, r1
 80095dc:	2200      	movs	r2, #0
 80095de:	2300      	movs	r3, #0
 80095e0:	4650      	mov	r0, sl
 80095e2:	4659      	mov	r1, fp
 80095e4:	f7f7 fa78 	bl	8000ad8 <__aeabi_dcmpeq>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d1a6      	bne.n	800953a <_strtod_l+0x562>
 80095ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80095f2:	9805      	ldr	r0, [sp, #20]
 80095f4:	462b      	mov	r3, r5
 80095f6:	463a      	mov	r2, r7
 80095f8:	f7ff f8c6 	bl	8008788 <__s2b>
 80095fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80095fe:	2800      	cmp	r0, #0
 8009600:	f43f af05 	beq.w	800940e <_strtod_l+0x436>
 8009604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009606:	2a00      	cmp	r2, #0
 8009608:	eba9 0308 	sub.w	r3, r9, r8
 800960c:	bfa8      	it	ge
 800960e:	2300      	movge	r3, #0
 8009610:	9312      	str	r3, [sp, #72]	@ 0x48
 8009612:	2400      	movs	r4, #0
 8009614:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009618:	9316      	str	r3, [sp, #88]	@ 0x58
 800961a:	46a0      	mov	r8, r4
 800961c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800961e:	9805      	ldr	r0, [sp, #20]
 8009620:	6859      	ldr	r1, [r3, #4]
 8009622:	f7ff f809 	bl	8008638 <_Balloc>
 8009626:	4681      	mov	r9, r0
 8009628:	2800      	cmp	r0, #0
 800962a:	f43f aef4 	beq.w	8009416 <_strtod_l+0x43e>
 800962e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009630:	691a      	ldr	r2, [r3, #16]
 8009632:	3202      	adds	r2, #2
 8009634:	f103 010c 	add.w	r1, r3, #12
 8009638:	0092      	lsls	r2, r2, #2
 800963a:	300c      	adds	r0, #12
 800963c:	f000 fd72 	bl	800a124 <memcpy>
 8009640:	ec4b ab10 	vmov	d0, sl, fp
 8009644:	9805      	ldr	r0, [sp, #20]
 8009646:	aa1c      	add	r2, sp, #112	@ 0x70
 8009648:	a91b      	add	r1, sp, #108	@ 0x6c
 800964a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800964e:	f7ff fbd7 	bl	8008e00 <__d2b>
 8009652:	901a      	str	r0, [sp, #104]	@ 0x68
 8009654:	2800      	cmp	r0, #0
 8009656:	f43f aede 	beq.w	8009416 <_strtod_l+0x43e>
 800965a:	9805      	ldr	r0, [sp, #20]
 800965c:	2101      	movs	r1, #1
 800965e:	f7ff f929 	bl	80088b4 <__i2b>
 8009662:	4680      	mov	r8, r0
 8009664:	b948      	cbnz	r0, 800967a <_strtod_l+0x6a2>
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	e6d4      	b.n	8009416 <_strtod_l+0x43e>
 800966c:	f04f 32ff 	mov.w	r2, #4294967295
 8009670:	fa02 f303 	lsl.w	r3, r2, r3
 8009674:	ea03 0a0a 	and.w	sl, r3, sl
 8009678:	e7b0      	b.n	80095dc <_strtod_l+0x604>
 800967a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800967c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800967e:	2d00      	cmp	r5, #0
 8009680:	bfab      	itete	ge
 8009682:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009684:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009686:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009688:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800968a:	bfac      	ite	ge
 800968c:	18ef      	addge	r7, r5, r3
 800968e:	1b5e      	sublt	r6, r3, r5
 8009690:	9b08      	ldr	r3, [sp, #32]
 8009692:	1aed      	subs	r5, r5, r3
 8009694:	4415      	add	r5, r2
 8009696:	4b66      	ldr	r3, [pc, #408]	@ (8009830 <_strtod_l+0x858>)
 8009698:	3d01      	subs	r5, #1
 800969a:	429d      	cmp	r5, r3
 800969c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80096a0:	da50      	bge.n	8009744 <_strtod_l+0x76c>
 80096a2:	1b5b      	subs	r3, r3, r5
 80096a4:	2b1f      	cmp	r3, #31
 80096a6:	eba2 0203 	sub.w	r2, r2, r3
 80096aa:	f04f 0101 	mov.w	r1, #1
 80096ae:	dc3d      	bgt.n	800972c <_strtod_l+0x754>
 80096b0:	fa01 f303 	lsl.w	r3, r1, r3
 80096b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096b6:	2300      	movs	r3, #0
 80096b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80096ba:	18bd      	adds	r5, r7, r2
 80096bc:	9b08      	ldr	r3, [sp, #32]
 80096be:	42af      	cmp	r7, r5
 80096c0:	4416      	add	r6, r2
 80096c2:	441e      	add	r6, r3
 80096c4:	463b      	mov	r3, r7
 80096c6:	bfa8      	it	ge
 80096c8:	462b      	movge	r3, r5
 80096ca:	42b3      	cmp	r3, r6
 80096cc:	bfa8      	it	ge
 80096ce:	4633      	movge	r3, r6
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	bfc2      	ittt	gt
 80096d4:	1aed      	subgt	r5, r5, r3
 80096d6:	1af6      	subgt	r6, r6, r3
 80096d8:	1aff      	subgt	r7, r7, r3
 80096da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dd16      	ble.n	800970e <_strtod_l+0x736>
 80096e0:	4641      	mov	r1, r8
 80096e2:	9805      	ldr	r0, [sp, #20]
 80096e4:	461a      	mov	r2, r3
 80096e6:	f7ff f9a5 	bl	8008a34 <__pow5mult>
 80096ea:	4680      	mov	r8, r0
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d0ba      	beq.n	8009666 <_strtod_l+0x68e>
 80096f0:	4601      	mov	r1, r0
 80096f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80096f4:	9805      	ldr	r0, [sp, #20]
 80096f6:	f7ff f8f3 	bl	80088e0 <__multiply>
 80096fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f43f ae8a 	beq.w	8009416 <_strtod_l+0x43e>
 8009702:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009704:	9805      	ldr	r0, [sp, #20]
 8009706:	f7fe ffd7 	bl	80086b8 <_Bfree>
 800970a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800970c:	931a      	str	r3, [sp, #104]	@ 0x68
 800970e:	2d00      	cmp	r5, #0
 8009710:	dc1d      	bgt.n	800974e <_strtod_l+0x776>
 8009712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009714:	2b00      	cmp	r3, #0
 8009716:	dd23      	ble.n	8009760 <_strtod_l+0x788>
 8009718:	4649      	mov	r1, r9
 800971a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800971c:	9805      	ldr	r0, [sp, #20]
 800971e:	f7ff f989 	bl	8008a34 <__pow5mult>
 8009722:	4681      	mov	r9, r0
 8009724:	b9e0      	cbnz	r0, 8009760 <_strtod_l+0x788>
 8009726:	f04f 0900 	mov.w	r9, #0
 800972a:	e674      	b.n	8009416 <_strtod_l+0x43e>
 800972c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009730:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009734:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009738:	35e2      	adds	r5, #226	@ 0xe2
 800973a:	fa01 f305 	lsl.w	r3, r1, r5
 800973e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009740:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009742:	e7ba      	b.n	80096ba <_strtod_l+0x6e2>
 8009744:	2300      	movs	r3, #0
 8009746:	9310      	str	r3, [sp, #64]	@ 0x40
 8009748:	2301      	movs	r3, #1
 800974a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800974c:	e7b5      	b.n	80096ba <_strtod_l+0x6e2>
 800974e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009750:	9805      	ldr	r0, [sp, #20]
 8009752:	462a      	mov	r2, r5
 8009754:	f7ff f9c8 	bl	8008ae8 <__lshift>
 8009758:	901a      	str	r0, [sp, #104]	@ 0x68
 800975a:	2800      	cmp	r0, #0
 800975c:	d1d9      	bne.n	8009712 <_strtod_l+0x73a>
 800975e:	e65a      	b.n	8009416 <_strtod_l+0x43e>
 8009760:	2e00      	cmp	r6, #0
 8009762:	dd07      	ble.n	8009774 <_strtod_l+0x79c>
 8009764:	4649      	mov	r1, r9
 8009766:	9805      	ldr	r0, [sp, #20]
 8009768:	4632      	mov	r2, r6
 800976a:	f7ff f9bd 	bl	8008ae8 <__lshift>
 800976e:	4681      	mov	r9, r0
 8009770:	2800      	cmp	r0, #0
 8009772:	d0d8      	beq.n	8009726 <_strtod_l+0x74e>
 8009774:	2f00      	cmp	r7, #0
 8009776:	dd08      	ble.n	800978a <_strtod_l+0x7b2>
 8009778:	4641      	mov	r1, r8
 800977a:	9805      	ldr	r0, [sp, #20]
 800977c:	463a      	mov	r2, r7
 800977e:	f7ff f9b3 	bl	8008ae8 <__lshift>
 8009782:	4680      	mov	r8, r0
 8009784:	2800      	cmp	r0, #0
 8009786:	f43f ae46 	beq.w	8009416 <_strtod_l+0x43e>
 800978a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800978c:	9805      	ldr	r0, [sp, #20]
 800978e:	464a      	mov	r2, r9
 8009790:	f7ff fa32 	bl	8008bf8 <__mdiff>
 8009794:	4604      	mov	r4, r0
 8009796:	2800      	cmp	r0, #0
 8009798:	f43f ae3d 	beq.w	8009416 <_strtod_l+0x43e>
 800979c:	68c3      	ldr	r3, [r0, #12]
 800979e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097a0:	2300      	movs	r3, #0
 80097a2:	60c3      	str	r3, [r0, #12]
 80097a4:	4641      	mov	r1, r8
 80097a6:	f7ff fa0b 	bl	8008bc0 <__mcmp>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	da46      	bge.n	800983c <_strtod_l+0x864>
 80097ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097b0:	ea53 030a 	orrs.w	r3, r3, sl
 80097b4:	d16c      	bne.n	8009890 <_strtod_l+0x8b8>
 80097b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d168      	bne.n	8009890 <_strtod_l+0x8b8>
 80097be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097c2:	0d1b      	lsrs	r3, r3, #20
 80097c4:	051b      	lsls	r3, r3, #20
 80097c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80097ca:	d961      	bls.n	8009890 <_strtod_l+0x8b8>
 80097cc:	6963      	ldr	r3, [r4, #20]
 80097ce:	b913      	cbnz	r3, 80097d6 <_strtod_l+0x7fe>
 80097d0:	6923      	ldr	r3, [r4, #16]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	dd5c      	ble.n	8009890 <_strtod_l+0x8b8>
 80097d6:	4621      	mov	r1, r4
 80097d8:	2201      	movs	r2, #1
 80097da:	9805      	ldr	r0, [sp, #20]
 80097dc:	f7ff f984 	bl	8008ae8 <__lshift>
 80097e0:	4641      	mov	r1, r8
 80097e2:	4604      	mov	r4, r0
 80097e4:	f7ff f9ec 	bl	8008bc0 <__mcmp>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	dd51      	ble.n	8009890 <_strtod_l+0x8b8>
 80097ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097f0:	9a08      	ldr	r2, [sp, #32]
 80097f2:	0d1b      	lsrs	r3, r3, #20
 80097f4:	051b      	lsls	r3, r3, #20
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	d06b      	beq.n	80098d2 <_strtod_l+0x8fa>
 80097fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80097fe:	d868      	bhi.n	80098d2 <_strtod_l+0x8fa>
 8009800:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009804:	f67f ae9d 	bls.w	8009542 <_strtod_l+0x56a>
 8009808:	4b0a      	ldr	r3, [pc, #40]	@ (8009834 <_strtod_l+0x85c>)
 800980a:	4650      	mov	r0, sl
 800980c:	4659      	mov	r1, fp
 800980e:	2200      	movs	r2, #0
 8009810:	f7f6 fefa 	bl	8000608 <__aeabi_dmul>
 8009814:	4b08      	ldr	r3, [pc, #32]	@ (8009838 <_strtod_l+0x860>)
 8009816:	400b      	ands	r3, r1
 8009818:	4682      	mov	sl, r0
 800981a:	468b      	mov	fp, r1
 800981c:	2b00      	cmp	r3, #0
 800981e:	f47f ae05 	bne.w	800942c <_strtod_l+0x454>
 8009822:	9a05      	ldr	r2, [sp, #20]
 8009824:	2322      	movs	r3, #34	@ 0x22
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	e600      	b.n	800942c <_strtod_l+0x454>
 800982a:	bf00      	nop
 800982c:	0800b140 	.word	0x0800b140
 8009830:	fffffc02 	.word	0xfffffc02
 8009834:	39500000 	.word	0x39500000
 8009838:	7ff00000 	.word	0x7ff00000
 800983c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009840:	d165      	bne.n	800990e <_strtod_l+0x936>
 8009842:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009844:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009848:	b35a      	cbz	r2, 80098a2 <_strtod_l+0x8ca>
 800984a:	4a9f      	ldr	r2, [pc, #636]	@ (8009ac8 <_strtod_l+0xaf0>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d12b      	bne.n	80098a8 <_strtod_l+0x8d0>
 8009850:	9b08      	ldr	r3, [sp, #32]
 8009852:	4651      	mov	r1, sl
 8009854:	b303      	cbz	r3, 8009898 <_strtod_l+0x8c0>
 8009856:	4b9d      	ldr	r3, [pc, #628]	@ (8009acc <_strtod_l+0xaf4>)
 8009858:	465a      	mov	r2, fp
 800985a:	4013      	ands	r3, r2
 800985c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009860:	f04f 32ff 	mov.w	r2, #4294967295
 8009864:	d81b      	bhi.n	800989e <_strtod_l+0x8c6>
 8009866:	0d1b      	lsrs	r3, r3, #20
 8009868:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800986c:	fa02 f303 	lsl.w	r3, r2, r3
 8009870:	4299      	cmp	r1, r3
 8009872:	d119      	bne.n	80098a8 <_strtod_l+0x8d0>
 8009874:	4b96      	ldr	r3, [pc, #600]	@ (8009ad0 <_strtod_l+0xaf8>)
 8009876:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009878:	429a      	cmp	r2, r3
 800987a:	d102      	bne.n	8009882 <_strtod_l+0x8aa>
 800987c:	3101      	adds	r1, #1
 800987e:	f43f adca 	beq.w	8009416 <_strtod_l+0x43e>
 8009882:	4b92      	ldr	r3, [pc, #584]	@ (8009acc <_strtod_l+0xaf4>)
 8009884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009886:	401a      	ands	r2, r3
 8009888:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800988c:	f04f 0a00 	mov.w	sl, #0
 8009890:	9b08      	ldr	r3, [sp, #32]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1b8      	bne.n	8009808 <_strtod_l+0x830>
 8009896:	e5c9      	b.n	800942c <_strtod_l+0x454>
 8009898:	f04f 33ff 	mov.w	r3, #4294967295
 800989c:	e7e8      	b.n	8009870 <_strtod_l+0x898>
 800989e:	4613      	mov	r3, r2
 80098a0:	e7e6      	b.n	8009870 <_strtod_l+0x898>
 80098a2:	ea53 030a 	orrs.w	r3, r3, sl
 80098a6:	d0a1      	beq.n	80097ec <_strtod_l+0x814>
 80098a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80098aa:	b1db      	cbz	r3, 80098e4 <_strtod_l+0x90c>
 80098ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098ae:	4213      	tst	r3, r2
 80098b0:	d0ee      	beq.n	8009890 <_strtod_l+0x8b8>
 80098b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098b4:	9a08      	ldr	r2, [sp, #32]
 80098b6:	4650      	mov	r0, sl
 80098b8:	4659      	mov	r1, fp
 80098ba:	b1bb      	cbz	r3, 80098ec <_strtod_l+0x914>
 80098bc:	f7ff fb6e 	bl	8008f9c <sulp>
 80098c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098c4:	ec53 2b10 	vmov	r2, r3, d0
 80098c8:	f7f6 fce8 	bl	800029c <__adddf3>
 80098cc:	4682      	mov	sl, r0
 80098ce:	468b      	mov	fp, r1
 80098d0:	e7de      	b.n	8009890 <_strtod_l+0x8b8>
 80098d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80098d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80098da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80098de:	f04f 3aff 	mov.w	sl, #4294967295
 80098e2:	e7d5      	b.n	8009890 <_strtod_l+0x8b8>
 80098e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098e6:	ea13 0f0a 	tst.w	r3, sl
 80098ea:	e7e1      	b.n	80098b0 <_strtod_l+0x8d8>
 80098ec:	f7ff fb56 	bl	8008f9c <sulp>
 80098f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098f4:	ec53 2b10 	vmov	r2, r3, d0
 80098f8:	f7f6 fcce 	bl	8000298 <__aeabi_dsub>
 80098fc:	2200      	movs	r2, #0
 80098fe:	2300      	movs	r3, #0
 8009900:	4682      	mov	sl, r0
 8009902:	468b      	mov	fp, r1
 8009904:	f7f7 f8e8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009908:	2800      	cmp	r0, #0
 800990a:	d0c1      	beq.n	8009890 <_strtod_l+0x8b8>
 800990c:	e619      	b.n	8009542 <_strtod_l+0x56a>
 800990e:	4641      	mov	r1, r8
 8009910:	4620      	mov	r0, r4
 8009912:	f7ff facd 	bl	8008eb0 <__ratio>
 8009916:	ec57 6b10 	vmov	r6, r7, d0
 800991a:	2200      	movs	r2, #0
 800991c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009920:	4630      	mov	r0, r6
 8009922:	4639      	mov	r1, r7
 8009924:	f7f7 f8ec 	bl	8000b00 <__aeabi_dcmple>
 8009928:	2800      	cmp	r0, #0
 800992a:	d06f      	beq.n	8009a0c <_strtod_l+0xa34>
 800992c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d17a      	bne.n	8009a28 <_strtod_l+0xa50>
 8009932:	f1ba 0f00 	cmp.w	sl, #0
 8009936:	d158      	bne.n	80099ea <_strtod_l+0xa12>
 8009938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800993a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800993e:	2b00      	cmp	r3, #0
 8009940:	d15a      	bne.n	80099f8 <_strtod_l+0xa20>
 8009942:	4b64      	ldr	r3, [pc, #400]	@ (8009ad4 <_strtod_l+0xafc>)
 8009944:	2200      	movs	r2, #0
 8009946:	4630      	mov	r0, r6
 8009948:	4639      	mov	r1, r7
 800994a:	f7f7 f8cf 	bl	8000aec <__aeabi_dcmplt>
 800994e:	2800      	cmp	r0, #0
 8009950:	d159      	bne.n	8009a06 <_strtod_l+0xa2e>
 8009952:	4630      	mov	r0, r6
 8009954:	4639      	mov	r1, r7
 8009956:	4b60      	ldr	r3, [pc, #384]	@ (8009ad8 <_strtod_l+0xb00>)
 8009958:	2200      	movs	r2, #0
 800995a:	f7f6 fe55 	bl	8000608 <__aeabi_dmul>
 800995e:	4606      	mov	r6, r0
 8009960:	460f      	mov	r7, r1
 8009962:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009966:	9606      	str	r6, [sp, #24]
 8009968:	9307      	str	r3, [sp, #28]
 800996a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800996e:	4d57      	ldr	r5, [pc, #348]	@ (8009acc <_strtod_l+0xaf4>)
 8009970:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009976:	401d      	ands	r5, r3
 8009978:	4b58      	ldr	r3, [pc, #352]	@ (8009adc <_strtod_l+0xb04>)
 800997a:	429d      	cmp	r5, r3
 800997c:	f040 80b2 	bne.w	8009ae4 <_strtod_l+0xb0c>
 8009980:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009982:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009986:	ec4b ab10 	vmov	d0, sl, fp
 800998a:	f7ff f9c9 	bl	8008d20 <__ulp>
 800998e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009992:	ec51 0b10 	vmov	r0, r1, d0
 8009996:	f7f6 fe37 	bl	8000608 <__aeabi_dmul>
 800999a:	4652      	mov	r2, sl
 800999c:	465b      	mov	r3, fp
 800999e:	f7f6 fc7d 	bl	800029c <__adddf3>
 80099a2:	460b      	mov	r3, r1
 80099a4:	4949      	ldr	r1, [pc, #292]	@ (8009acc <_strtod_l+0xaf4>)
 80099a6:	4a4e      	ldr	r2, [pc, #312]	@ (8009ae0 <_strtod_l+0xb08>)
 80099a8:	4019      	ands	r1, r3
 80099aa:	4291      	cmp	r1, r2
 80099ac:	4682      	mov	sl, r0
 80099ae:	d942      	bls.n	8009a36 <_strtod_l+0xa5e>
 80099b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099b2:	4b47      	ldr	r3, [pc, #284]	@ (8009ad0 <_strtod_l+0xaf8>)
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d103      	bne.n	80099c0 <_strtod_l+0x9e8>
 80099b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099ba:	3301      	adds	r3, #1
 80099bc:	f43f ad2b 	beq.w	8009416 <_strtod_l+0x43e>
 80099c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ad0 <_strtod_l+0xaf8>
 80099c4:	f04f 3aff 	mov.w	sl, #4294967295
 80099c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ca:	9805      	ldr	r0, [sp, #20]
 80099cc:	f7fe fe74 	bl	80086b8 <_Bfree>
 80099d0:	9805      	ldr	r0, [sp, #20]
 80099d2:	4649      	mov	r1, r9
 80099d4:	f7fe fe70 	bl	80086b8 <_Bfree>
 80099d8:	9805      	ldr	r0, [sp, #20]
 80099da:	4641      	mov	r1, r8
 80099dc:	f7fe fe6c 	bl	80086b8 <_Bfree>
 80099e0:	9805      	ldr	r0, [sp, #20]
 80099e2:	4621      	mov	r1, r4
 80099e4:	f7fe fe68 	bl	80086b8 <_Bfree>
 80099e8:	e618      	b.n	800961c <_strtod_l+0x644>
 80099ea:	f1ba 0f01 	cmp.w	sl, #1
 80099ee:	d103      	bne.n	80099f8 <_strtod_l+0xa20>
 80099f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f43f ada5 	beq.w	8009542 <_strtod_l+0x56a>
 80099f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009aa8 <_strtod_l+0xad0>
 80099fc:	4f35      	ldr	r7, [pc, #212]	@ (8009ad4 <_strtod_l+0xafc>)
 80099fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a02:	2600      	movs	r6, #0
 8009a04:	e7b1      	b.n	800996a <_strtod_l+0x992>
 8009a06:	4f34      	ldr	r7, [pc, #208]	@ (8009ad8 <_strtod_l+0xb00>)
 8009a08:	2600      	movs	r6, #0
 8009a0a:	e7aa      	b.n	8009962 <_strtod_l+0x98a>
 8009a0c:	4b32      	ldr	r3, [pc, #200]	@ (8009ad8 <_strtod_l+0xb00>)
 8009a0e:	4630      	mov	r0, r6
 8009a10:	4639      	mov	r1, r7
 8009a12:	2200      	movs	r2, #0
 8009a14:	f7f6 fdf8 	bl	8000608 <__aeabi_dmul>
 8009a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	460f      	mov	r7, r1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d09f      	beq.n	8009962 <_strtod_l+0x98a>
 8009a22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a26:	e7a0      	b.n	800996a <_strtod_l+0x992>
 8009a28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009ab0 <_strtod_l+0xad8>
 8009a2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a30:	ec57 6b17 	vmov	r6, r7, d7
 8009a34:	e799      	b.n	800996a <_strtod_l+0x992>
 8009a36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1c1      	bne.n	80099c8 <_strtod_l+0x9f0>
 8009a44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a48:	0d1b      	lsrs	r3, r3, #20
 8009a4a:	051b      	lsls	r3, r3, #20
 8009a4c:	429d      	cmp	r5, r3
 8009a4e:	d1bb      	bne.n	80099c8 <_strtod_l+0x9f0>
 8009a50:	4630      	mov	r0, r6
 8009a52:	4639      	mov	r1, r7
 8009a54:	f7f7 f938 	bl	8000cc8 <__aeabi_d2lz>
 8009a58:	f7f6 fda8 	bl	80005ac <__aeabi_l2d>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	f7f6 fc18 	bl	8000298 <__aeabi_dsub>
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009a70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a76:	ea46 060a 	orr.w	r6, r6, sl
 8009a7a:	431e      	orrs	r6, r3
 8009a7c:	d06f      	beq.n	8009b5e <_strtod_l+0xb86>
 8009a7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ab8 <_strtod_l+0xae0>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f7f7 f832 	bl	8000aec <__aeabi_dcmplt>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f47f accf 	bne.w	800942c <_strtod_l+0x454>
 8009a8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009ac0 <_strtod_l+0xae8>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a98:	f7f7 f846 	bl	8000b28 <__aeabi_dcmpgt>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d093      	beq.n	80099c8 <_strtod_l+0x9f0>
 8009aa0:	e4c4      	b.n	800942c <_strtod_l+0x454>
 8009aa2:	bf00      	nop
 8009aa4:	f3af 8000 	nop.w
 8009aa8:	00000000 	.word	0x00000000
 8009aac:	bff00000 	.word	0xbff00000
 8009ab0:	00000000 	.word	0x00000000
 8009ab4:	3ff00000 	.word	0x3ff00000
 8009ab8:	94a03595 	.word	0x94a03595
 8009abc:	3fdfffff 	.word	0x3fdfffff
 8009ac0:	35afe535 	.word	0x35afe535
 8009ac4:	3fe00000 	.word	0x3fe00000
 8009ac8:	000fffff 	.word	0x000fffff
 8009acc:	7ff00000 	.word	0x7ff00000
 8009ad0:	7fefffff 	.word	0x7fefffff
 8009ad4:	3ff00000 	.word	0x3ff00000
 8009ad8:	3fe00000 	.word	0x3fe00000
 8009adc:	7fe00000 	.word	0x7fe00000
 8009ae0:	7c9fffff 	.word	0x7c9fffff
 8009ae4:	9b08      	ldr	r3, [sp, #32]
 8009ae6:	b323      	cbz	r3, 8009b32 <_strtod_l+0xb5a>
 8009ae8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009aec:	d821      	bhi.n	8009b32 <_strtod_l+0xb5a>
 8009aee:	a328      	add	r3, pc, #160	@ (adr r3, 8009b90 <_strtod_l+0xbb8>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f7 f802 	bl	8000b00 <__aeabi_dcmple>
 8009afc:	b1a0      	cbz	r0, 8009b28 <_strtod_l+0xb50>
 8009afe:	4639      	mov	r1, r7
 8009b00:	4630      	mov	r0, r6
 8009b02:	f7f7 f859 	bl	8000bb8 <__aeabi_d2uiz>
 8009b06:	2801      	cmp	r0, #1
 8009b08:	bf38      	it	cc
 8009b0a:	2001      	movcc	r0, #1
 8009b0c:	f7f6 fd02 	bl	8000514 <__aeabi_ui2d>
 8009b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b12:	4606      	mov	r6, r0
 8009b14:	460f      	mov	r7, r1
 8009b16:	b9fb      	cbnz	r3, 8009b58 <_strtod_l+0xb80>
 8009b18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009b24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009b2e:	1b5b      	subs	r3, r3, r5
 8009b30:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009b36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009b3a:	f7ff f8f1 	bl	8008d20 <__ulp>
 8009b3e:	4650      	mov	r0, sl
 8009b40:	ec53 2b10 	vmov	r2, r3, d0
 8009b44:	4659      	mov	r1, fp
 8009b46:	f7f6 fd5f 	bl	8000608 <__aeabi_dmul>
 8009b4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009b4e:	f7f6 fba5 	bl	800029c <__adddf3>
 8009b52:	4682      	mov	sl, r0
 8009b54:	468b      	mov	fp, r1
 8009b56:	e770      	b.n	8009a3a <_strtod_l+0xa62>
 8009b58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009b5c:	e7e0      	b.n	8009b20 <_strtod_l+0xb48>
 8009b5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b98 <_strtod_l+0xbc0>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f7f6 ffc2 	bl	8000aec <__aeabi_dcmplt>
 8009b68:	e798      	b.n	8009a9c <_strtod_l+0xac4>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009b70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b72:	6013      	str	r3, [r2, #0]
 8009b74:	f7ff ba6d 	b.w	8009052 <_strtod_l+0x7a>
 8009b78:	2a65      	cmp	r2, #101	@ 0x65
 8009b7a:	f43f ab66 	beq.w	800924a <_strtod_l+0x272>
 8009b7e:	2a45      	cmp	r2, #69	@ 0x45
 8009b80:	f43f ab63 	beq.w	800924a <_strtod_l+0x272>
 8009b84:	2301      	movs	r3, #1
 8009b86:	f7ff bb9e 	b.w	80092c6 <_strtod_l+0x2ee>
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w
 8009b90:	ffc00000 	.word	0xffc00000
 8009b94:	41dfffff 	.word	0x41dfffff
 8009b98:	94a03595 	.word	0x94a03595
 8009b9c:	3fcfffff 	.word	0x3fcfffff

08009ba0 <_strtod_r>:
 8009ba0:	4b01      	ldr	r3, [pc, #4]	@ (8009ba8 <_strtod_r+0x8>)
 8009ba2:	f7ff ba19 	b.w	8008fd8 <_strtod_l>
 8009ba6:	bf00      	nop
 8009ba8:	2000d460 	.word	0x2000d460

08009bac <_strtol_l.constprop.0>:
 8009bac:	2b24      	cmp	r3, #36	@ 0x24
 8009bae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb2:	4686      	mov	lr, r0
 8009bb4:	4690      	mov	r8, r2
 8009bb6:	d801      	bhi.n	8009bbc <_strtol_l.constprop.0+0x10>
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d106      	bne.n	8009bca <_strtol_l.constprop.0+0x1e>
 8009bbc:	f7fd fdba 	bl	8007734 <__errno>
 8009bc0:	2316      	movs	r3, #22
 8009bc2:	6003      	str	r3, [r0, #0]
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bca:	4834      	ldr	r0, [pc, #208]	@ (8009c9c <_strtol_l.constprop.0+0xf0>)
 8009bcc:	460d      	mov	r5, r1
 8009bce:	462a      	mov	r2, r5
 8009bd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bd4:	5d06      	ldrb	r6, [r0, r4]
 8009bd6:	f016 0608 	ands.w	r6, r6, #8
 8009bda:	d1f8      	bne.n	8009bce <_strtol_l.constprop.0+0x22>
 8009bdc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009bde:	d12d      	bne.n	8009c3c <_strtol_l.constprop.0+0x90>
 8009be0:	782c      	ldrb	r4, [r5, #0]
 8009be2:	2601      	movs	r6, #1
 8009be4:	1c95      	adds	r5, r2, #2
 8009be6:	f033 0210 	bics.w	r2, r3, #16
 8009bea:	d109      	bne.n	8009c00 <_strtol_l.constprop.0+0x54>
 8009bec:	2c30      	cmp	r4, #48	@ 0x30
 8009bee:	d12a      	bne.n	8009c46 <_strtol_l.constprop.0+0x9a>
 8009bf0:	782a      	ldrb	r2, [r5, #0]
 8009bf2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009bf6:	2a58      	cmp	r2, #88	@ 0x58
 8009bf8:	d125      	bne.n	8009c46 <_strtol_l.constprop.0+0x9a>
 8009bfa:	786c      	ldrb	r4, [r5, #1]
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	3502      	adds	r5, #2
 8009c00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c04:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c08:	2200      	movs	r2, #0
 8009c0a:	fbbc f9f3 	udiv	r9, ip, r3
 8009c0e:	4610      	mov	r0, r2
 8009c10:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c18:	2f09      	cmp	r7, #9
 8009c1a:	d81b      	bhi.n	8009c54 <_strtol_l.constprop.0+0xa8>
 8009c1c:	463c      	mov	r4, r7
 8009c1e:	42a3      	cmp	r3, r4
 8009c20:	dd27      	ble.n	8009c72 <_strtol_l.constprop.0+0xc6>
 8009c22:	1c57      	adds	r7, r2, #1
 8009c24:	d007      	beq.n	8009c36 <_strtol_l.constprop.0+0x8a>
 8009c26:	4581      	cmp	r9, r0
 8009c28:	d320      	bcc.n	8009c6c <_strtol_l.constprop.0+0xc0>
 8009c2a:	d101      	bne.n	8009c30 <_strtol_l.constprop.0+0x84>
 8009c2c:	45a2      	cmp	sl, r4
 8009c2e:	db1d      	blt.n	8009c6c <_strtol_l.constprop.0+0xc0>
 8009c30:	fb00 4003 	mla	r0, r0, r3, r4
 8009c34:	2201      	movs	r2, #1
 8009c36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c3a:	e7eb      	b.n	8009c14 <_strtol_l.constprop.0+0x68>
 8009c3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009c3e:	bf04      	itt	eq
 8009c40:	782c      	ldrbeq	r4, [r5, #0]
 8009c42:	1c95      	addeq	r5, r2, #2
 8009c44:	e7cf      	b.n	8009be6 <_strtol_l.constprop.0+0x3a>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1da      	bne.n	8009c00 <_strtol_l.constprop.0+0x54>
 8009c4a:	2c30      	cmp	r4, #48	@ 0x30
 8009c4c:	bf0c      	ite	eq
 8009c4e:	2308      	moveq	r3, #8
 8009c50:	230a      	movne	r3, #10
 8009c52:	e7d5      	b.n	8009c00 <_strtol_l.constprop.0+0x54>
 8009c54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c58:	2f19      	cmp	r7, #25
 8009c5a:	d801      	bhi.n	8009c60 <_strtol_l.constprop.0+0xb4>
 8009c5c:	3c37      	subs	r4, #55	@ 0x37
 8009c5e:	e7de      	b.n	8009c1e <_strtol_l.constprop.0+0x72>
 8009c60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c64:	2f19      	cmp	r7, #25
 8009c66:	d804      	bhi.n	8009c72 <_strtol_l.constprop.0+0xc6>
 8009c68:	3c57      	subs	r4, #87	@ 0x57
 8009c6a:	e7d8      	b.n	8009c1e <_strtol_l.constprop.0+0x72>
 8009c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c70:	e7e1      	b.n	8009c36 <_strtol_l.constprop.0+0x8a>
 8009c72:	1c53      	adds	r3, r2, #1
 8009c74:	d108      	bne.n	8009c88 <_strtol_l.constprop.0+0xdc>
 8009c76:	2322      	movs	r3, #34	@ 0x22
 8009c78:	f8ce 3000 	str.w	r3, [lr]
 8009c7c:	4660      	mov	r0, ip
 8009c7e:	f1b8 0f00 	cmp.w	r8, #0
 8009c82:	d0a0      	beq.n	8009bc6 <_strtol_l.constprop.0+0x1a>
 8009c84:	1e69      	subs	r1, r5, #1
 8009c86:	e006      	b.n	8009c96 <_strtol_l.constprop.0+0xea>
 8009c88:	b106      	cbz	r6, 8009c8c <_strtol_l.constprop.0+0xe0>
 8009c8a:	4240      	negs	r0, r0
 8009c8c:	f1b8 0f00 	cmp.w	r8, #0
 8009c90:	d099      	beq.n	8009bc6 <_strtol_l.constprop.0+0x1a>
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	d1f6      	bne.n	8009c84 <_strtol_l.constprop.0+0xd8>
 8009c96:	f8c8 1000 	str.w	r1, [r8]
 8009c9a:	e794      	b.n	8009bc6 <_strtol_l.constprop.0+0x1a>
 8009c9c:	0800b169 	.word	0x0800b169

08009ca0 <_strtol_r>:
 8009ca0:	f7ff bf84 	b.w	8009bac <_strtol_l.constprop.0>

08009ca4 <__ssputs_r>:
 8009ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca8:	688e      	ldr	r6, [r1, #8]
 8009caa:	461f      	mov	r7, r3
 8009cac:	42be      	cmp	r6, r7
 8009cae:	680b      	ldr	r3, [r1, #0]
 8009cb0:	4682      	mov	sl, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	4690      	mov	r8, r2
 8009cb6:	d82d      	bhi.n	8009d14 <__ssputs_r+0x70>
 8009cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cc0:	d026      	beq.n	8009d10 <__ssputs_r+0x6c>
 8009cc2:	6965      	ldr	r5, [r4, #20]
 8009cc4:	6909      	ldr	r1, [r1, #16]
 8009cc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cca:	eba3 0901 	sub.w	r9, r3, r1
 8009cce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cd2:	1c7b      	adds	r3, r7, #1
 8009cd4:	444b      	add	r3, r9
 8009cd6:	106d      	asrs	r5, r5, #1
 8009cd8:	429d      	cmp	r5, r3
 8009cda:	bf38      	it	cc
 8009cdc:	461d      	movcc	r5, r3
 8009cde:	0553      	lsls	r3, r2, #21
 8009ce0:	d527      	bpl.n	8009d32 <__ssputs_r+0x8e>
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7fe fc1c 	bl	8008520 <_malloc_r>
 8009ce8:	4606      	mov	r6, r0
 8009cea:	b360      	cbz	r0, 8009d46 <__ssputs_r+0xa2>
 8009cec:	6921      	ldr	r1, [r4, #16]
 8009cee:	464a      	mov	r2, r9
 8009cf0:	f000 fa18 	bl	800a124 <memcpy>
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cfe:	81a3      	strh	r3, [r4, #12]
 8009d00:	6126      	str	r6, [r4, #16]
 8009d02:	6165      	str	r5, [r4, #20]
 8009d04:	444e      	add	r6, r9
 8009d06:	eba5 0509 	sub.w	r5, r5, r9
 8009d0a:	6026      	str	r6, [r4, #0]
 8009d0c:	60a5      	str	r5, [r4, #8]
 8009d0e:	463e      	mov	r6, r7
 8009d10:	42be      	cmp	r6, r7
 8009d12:	d900      	bls.n	8009d16 <__ssputs_r+0x72>
 8009d14:	463e      	mov	r6, r7
 8009d16:	6820      	ldr	r0, [r4, #0]
 8009d18:	4632      	mov	r2, r6
 8009d1a:	4641      	mov	r1, r8
 8009d1c:	f000 f9c6 	bl	800a0ac <memmove>
 8009d20:	68a3      	ldr	r3, [r4, #8]
 8009d22:	1b9b      	subs	r3, r3, r6
 8009d24:	60a3      	str	r3, [r4, #8]
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	4433      	add	r3, r6
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d32:	462a      	mov	r2, r5
 8009d34:	f000 fd89 	bl	800a84a <_realloc_r>
 8009d38:	4606      	mov	r6, r0
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d1e0      	bne.n	8009d00 <__ssputs_r+0x5c>
 8009d3e:	6921      	ldr	r1, [r4, #16]
 8009d40:	4650      	mov	r0, sl
 8009d42:	f7fe fb79 	bl	8008438 <_free_r>
 8009d46:	230c      	movs	r3, #12
 8009d48:	f8ca 3000 	str.w	r3, [sl]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	e7e9      	b.n	8009d2e <__ssputs_r+0x8a>
	...

08009d5c <_svfiprintf_r>:
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	4698      	mov	r8, r3
 8009d62:	898b      	ldrh	r3, [r1, #12]
 8009d64:	061b      	lsls	r3, r3, #24
 8009d66:	b09d      	sub	sp, #116	@ 0x74
 8009d68:	4607      	mov	r7, r0
 8009d6a:	460d      	mov	r5, r1
 8009d6c:	4614      	mov	r4, r2
 8009d6e:	d510      	bpl.n	8009d92 <_svfiprintf_r+0x36>
 8009d70:	690b      	ldr	r3, [r1, #16]
 8009d72:	b973      	cbnz	r3, 8009d92 <_svfiprintf_r+0x36>
 8009d74:	2140      	movs	r1, #64	@ 0x40
 8009d76:	f7fe fbd3 	bl	8008520 <_malloc_r>
 8009d7a:	6028      	str	r0, [r5, #0]
 8009d7c:	6128      	str	r0, [r5, #16]
 8009d7e:	b930      	cbnz	r0, 8009d8e <_svfiprintf_r+0x32>
 8009d80:	230c      	movs	r3, #12
 8009d82:	603b      	str	r3, [r7, #0]
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295
 8009d88:	b01d      	add	sp, #116	@ 0x74
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	2340      	movs	r3, #64	@ 0x40
 8009d90:	616b      	str	r3, [r5, #20]
 8009d92:	2300      	movs	r3, #0
 8009d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d96:	2320      	movs	r3, #32
 8009d98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009da0:	2330      	movs	r3, #48	@ 0x30
 8009da2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f40 <_svfiprintf_r+0x1e4>
 8009da6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009daa:	f04f 0901 	mov.w	r9, #1
 8009dae:	4623      	mov	r3, r4
 8009db0:	469a      	mov	sl, r3
 8009db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009db6:	b10a      	cbz	r2, 8009dbc <_svfiprintf_r+0x60>
 8009db8:	2a25      	cmp	r2, #37	@ 0x25
 8009dba:	d1f9      	bne.n	8009db0 <_svfiprintf_r+0x54>
 8009dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8009dc0:	d00b      	beq.n	8009dda <_svfiprintf_r+0x7e>
 8009dc2:	465b      	mov	r3, fp
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4638      	mov	r0, r7
 8009dca:	f7ff ff6b 	bl	8009ca4 <__ssputs_r>
 8009dce:	3001      	adds	r0, #1
 8009dd0:	f000 80a7 	beq.w	8009f22 <_svfiprintf_r+0x1c6>
 8009dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dd6:	445a      	add	r2, fp
 8009dd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dda:	f89a 3000 	ldrb.w	r3, [sl]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 809f 	beq.w	8009f22 <_svfiprintf_r+0x1c6>
 8009de4:	2300      	movs	r3, #0
 8009de6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dee:	f10a 0a01 	add.w	sl, sl, #1
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	9307      	str	r3, [sp, #28]
 8009df6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dfc:	4654      	mov	r4, sl
 8009dfe:	2205      	movs	r2, #5
 8009e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e04:	484e      	ldr	r0, [pc, #312]	@ (8009f40 <_svfiprintf_r+0x1e4>)
 8009e06:	f7f6 f9eb 	bl	80001e0 <memchr>
 8009e0a:	9a04      	ldr	r2, [sp, #16]
 8009e0c:	b9d8      	cbnz	r0, 8009e46 <_svfiprintf_r+0xea>
 8009e0e:	06d0      	lsls	r0, r2, #27
 8009e10:	bf44      	itt	mi
 8009e12:	2320      	movmi	r3, #32
 8009e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e18:	0711      	lsls	r1, r2, #28
 8009e1a:	bf44      	itt	mi
 8009e1c:	232b      	movmi	r3, #43	@ 0x2b
 8009e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e22:	f89a 3000 	ldrb.w	r3, [sl]
 8009e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e28:	d015      	beq.n	8009e56 <_svfiprintf_r+0xfa>
 8009e2a:	9a07      	ldr	r2, [sp, #28]
 8009e2c:	4654      	mov	r4, sl
 8009e2e:	2000      	movs	r0, #0
 8009e30:	f04f 0c0a 	mov.w	ip, #10
 8009e34:	4621      	mov	r1, r4
 8009e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e3a:	3b30      	subs	r3, #48	@ 0x30
 8009e3c:	2b09      	cmp	r3, #9
 8009e3e:	d94b      	bls.n	8009ed8 <_svfiprintf_r+0x17c>
 8009e40:	b1b0      	cbz	r0, 8009e70 <_svfiprintf_r+0x114>
 8009e42:	9207      	str	r2, [sp, #28]
 8009e44:	e014      	b.n	8009e70 <_svfiprintf_r+0x114>
 8009e46:	eba0 0308 	sub.w	r3, r0, r8
 8009e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	46a2      	mov	sl, r4
 8009e54:	e7d2      	b.n	8009dfc <_svfiprintf_r+0xa0>
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	1d19      	adds	r1, r3, #4
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	9103      	str	r1, [sp, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bfbb      	ittet	lt
 8009e62:	425b      	neglt	r3, r3
 8009e64:	f042 0202 	orrlt.w	r2, r2, #2
 8009e68:	9307      	strge	r3, [sp, #28]
 8009e6a:	9307      	strlt	r3, [sp, #28]
 8009e6c:	bfb8      	it	lt
 8009e6e:	9204      	strlt	r2, [sp, #16]
 8009e70:	7823      	ldrb	r3, [r4, #0]
 8009e72:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e74:	d10a      	bne.n	8009e8c <_svfiprintf_r+0x130>
 8009e76:	7863      	ldrb	r3, [r4, #1]
 8009e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e7a:	d132      	bne.n	8009ee2 <_svfiprintf_r+0x186>
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	1d1a      	adds	r2, r3, #4
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	9203      	str	r2, [sp, #12]
 8009e84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e88:	3402      	adds	r4, #2
 8009e8a:	9305      	str	r3, [sp, #20]
 8009e8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f50 <_svfiprintf_r+0x1f4>
 8009e90:	7821      	ldrb	r1, [r4, #0]
 8009e92:	2203      	movs	r2, #3
 8009e94:	4650      	mov	r0, sl
 8009e96:	f7f6 f9a3 	bl	80001e0 <memchr>
 8009e9a:	b138      	cbz	r0, 8009eac <_svfiprintf_r+0x150>
 8009e9c:	9b04      	ldr	r3, [sp, #16]
 8009e9e:	eba0 000a 	sub.w	r0, r0, sl
 8009ea2:	2240      	movs	r2, #64	@ 0x40
 8009ea4:	4082      	lsls	r2, r0
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	3401      	adds	r4, #1
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb0:	4824      	ldr	r0, [pc, #144]	@ (8009f44 <_svfiprintf_r+0x1e8>)
 8009eb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009eb6:	2206      	movs	r2, #6
 8009eb8:	f7f6 f992 	bl	80001e0 <memchr>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d036      	beq.n	8009f2e <_svfiprintf_r+0x1d2>
 8009ec0:	4b21      	ldr	r3, [pc, #132]	@ (8009f48 <_svfiprintf_r+0x1ec>)
 8009ec2:	bb1b      	cbnz	r3, 8009f0c <_svfiprintf_r+0x1b0>
 8009ec4:	9b03      	ldr	r3, [sp, #12]
 8009ec6:	3307      	adds	r3, #7
 8009ec8:	f023 0307 	bic.w	r3, r3, #7
 8009ecc:	3308      	adds	r3, #8
 8009ece:	9303      	str	r3, [sp, #12]
 8009ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed2:	4433      	add	r3, r6
 8009ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed6:	e76a      	b.n	8009dae <_svfiprintf_r+0x52>
 8009ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009edc:	460c      	mov	r4, r1
 8009ede:	2001      	movs	r0, #1
 8009ee0:	e7a8      	b.n	8009e34 <_svfiprintf_r+0xd8>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	3401      	adds	r4, #1
 8009ee6:	9305      	str	r3, [sp, #20]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	f04f 0c0a 	mov.w	ip, #10
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ef4:	3a30      	subs	r2, #48	@ 0x30
 8009ef6:	2a09      	cmp	r2, #9
 8009ef8:	d903      	bls.n	8009f02 <_svfiprintf_r+0x1a6>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0c6      	beq.n	8009e8c <_svfiprintf_r+0x130>
 8009efe:	9105      	str	r1, [sp, #20]
 8009f00:	e7c4      	b.n	8009e8c <_svfiprintf_r+0x130>
 8009f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f06:	4604      	mov	r4, r0
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e7f0      	b.n	8009eee <_svfiprintf_r+0x192>
 8009f0c:	ab03      	add	r3, sp, #12
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	462a      	mov	r2, r5
 8009f12:	4b0e      	ldr	r3, [pc, #56]	@ (8009f4c <_svfiprintf_r+0x1f0>)
 8009f14:	a904      	add	r1, sp, #16
 8009f16:	4638      	mov	r0, r7
 8009f18:	f7fc fcc8 	bl	80068ac <_printf_float>
 8009f1c:	1c42      	adds	r2, r0, #1
 8009f1e:	4606      	mov	r6, r0
 8009f20:	d1d6      	bne.n	8009ed0 <_svfiprintf_r+0x174>
 8009f22:	89ab      	ldrh	r3, [r5, #12]
 8009f24:	065b      	lsls	r3, r3, #25
 8009f26:	f53f af2d 	bmi.w	8009d84 <_svfiprintf_r+0x28>
 8009f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f2c:	e72c      	b.n	8009d88 <_svfiprintf_r+0x2c>
 8009f2e:	ab03      	add	r3, sp, #12
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	462a      	mov	r2, r5
 8009f34:	4b05      	ldr	r3, [pc, #20]	@ (8009f4c <_svfiprintf_r+0x1f0>)
 8009f36:	a904      	add	r1, sp, #16
 8009f38:	4638      	mov	r0, r7
 8009f3a:	f7fc ff4f 	bl	8006ddc <_printf_i>
 8009f3e:	e7ed      	b.n	8009f1c <_svfiprintf_r+0x1c0>
 8009f40:	0800b269 	.word	0x0800b269
 8009f44:	0800b273 	.word	0x0800b273
 8009f48:	080068ad 	.word	0x080068ad
 8009f4c:	08009ca5 	.word	0x08009ca5
 8009f50:	0800b26f 	.word	0x0800b26f

08009f54 <__sflush_r>:
 8009f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5c:	0716      	lsls	r6, r2, #28
 8009f5e:	4605      	mov	r5, r0
 8009f60:	460c      	mov	r4, r1
 8009f62:	d454      	bmi.n	800a00e <__sflush_r+0xba>
 8009f64:	684b      	ldr	r3, [r1, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dc02      	bgt.n	8009f70 <__sflush_r+0x1c>
 8009f6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd48      	ble.n	800a002 <__sflush_r+0xae>
 8009f70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	d045      	beq.n	800a002 <__sflush_r+0xae>
 8009f76:	2300      	movs	r3, #0
 8009f78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f7c:	682f      	ldr	r7, [r5, #0]
 8009f7e:	6a21      	ldr	r1, [r4, #32]
 8009f80:	602b      	str	r3, [r5, #0]
 8009f82:	d030      	beq.n	8009fe6 <__sflush_r+0x92>
 8009f84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	0759      	lsls	r1, r3, #29
 8009f8a:	d505      	bpl.n	8009f98 <__sflush_r+0x44>
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	1ad2      	subs	r2, r2, r3
 8009f90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f92:	b10b      	cbz	r3, 8009f98 <__sflush_r+0x44>
 8009f94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	2300      	movs	r3, #0
 8009f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f9c:	6a21      	ldr	r1, [r4, #32]
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	47b0      	blx	r6
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	d106      	bne.n	8009fb6 <__sflush_r+0x62>
 8009fa8:	6829      	ldr	r1, [r5, #0]
 8009faa:	291d      	cmp	r1, #29
 8009fac:	d82b      	bhi.n	800a006 <__sflush_r+0xb2>
 8009fae:	4a2a      	ldr	r2, [pc, #168]	@ (800a058 <__sflush_r+0x104>)
 8009fb0:	410a      	asrs	r2, r1
 8009fb2:	07d6      	lsls	r6, r2, #31
 8009fb4:	d427      	bmi.n	800a006 <__sflush_r+0xb2>
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	6062      	str	r2, [r4, #4]
 8009fba:	04d9      	lsls	r1, r3, #19
 8009fbc:	6922      	ldr	r2, [r4, #16]
 8009fbe:	6022      	str	r2, [r4, #0]
 8009fc0:	d504      	bpl.n	8009fcc <__sflush_r+0x78>
 8009fc2:	1c42      	adds	r2, r0, #1
 8009fc4:	d101      	bne.n	8009fca <__sflush_r+0x76>
 8009fc6:	682b      	ldr	r3, [r5, #0]
 8009fc8:	b903      	cbnz	r3, 8009fcc <__sflush_r+0x78>
 8009fca:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fce:	602f      	str	r7, [r5, #0]
 8009fd0:	b1b9      	cbz	r1, 800a002 <__sflush_r+0xae>
 8009fd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fd6:	4299      	cmp	r1, r3
 8009fd8:	d002      	beq.n	8009fe0 <__sflush_r+0x8c>
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f7fe fa2c 	bl	8008438 <_free_r>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fe4:	e00d      	b.n	800a002 <__sflush_r+0xae>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	4628      	mov	r0, r5
 8009fea:	47b0      	blx	r6
 8009fec:	4602      	mov	r2, r0
 8009fee:	1c50      	adds	r0, r2, #1
 8009ff0:	d1c9      	bne.n	8009f86 <__sflush_r+0x32>
 8009ff2:	682b      	ldr	r3, [r5, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0c6      	beq.n	8009f86 <__sflush_r+0x32>
 8009ff8:	2b1d      	cmp	r3, #29
 8009ffa:	d001      	beq.n	800a000 <__sflush_r+0xac>
 8009ffc:	2b16      	cmp	r3, #22
 8009ffe:	d11e      	bne.n	800a03e <__sflush_r+0xea>
 800a000:	602f      	str	r7, [r5, #0]
 800a002:	2000      	movs	r0, #0
 800a004:	e022      	b.n	800a04c <__sflush_r+0xf8>
 800a006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a00a:	b21b      	sxth	r3, r3
 800a00c:	e01b      	b.n	800a046 <__sflush_r+0xf2>
 800a00e:	690f      	ldr	r7, [r1, #16]
 800a010:	2f00      	cmp	r7, #0
 800a012:	d0f6      	beq.n	800a002 <__sflush_r+0xae>
 800a014:	0793      	lsls	r3, r2, #30
 800a016:	680e      	ldr	r6, [r1, #0]
 800a018:	bf08      	it	eq
 800a01a:	694b      	ldreq	r3, [r1, #20]
 800a01c:	600f      	str	r7, [r1, #0]
 800a01e:	bf18      	it	ne
 800a020:	2300      	movne	r3, #0
 800a022:	eba6 0807 	sub.w	r8, r6, r7
 800a026:	608b      	str	r3, [r1, #8]
 800a028:	f1b8 0f00 	cmp.w	r8, #0
 800a02c:	dde9      	ble.n	800a002 <__sflush_r+0xae>
 800a02e:	6a21      	ldr	r1, [r4, #32]
 800a030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a032:	4643      	mov	r3, r8
 800a034:	463a      	mov	r2, r7
 800a036:	4628      	mov	r0, r5
 800a038:	47b0      	blx	r6
 800a03a:	2800      	cmp	r0, #0
 800a03c:	dc08      	bgt.n	800a050 <__sflush_r+0xfc>
 800a03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	f04f 30ff 	mov.w	r0, #4294967295
 800a04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a050:	4407      	add	r7, r0
 800a052:	eba8 0800 	sub.w	r8, r8, r0
 800a056:	e7e7      	b.n	800a028 <__sflush_r+0xd4>
 800a058:	dfbffffe 	.word	0xdfbffffe

0800a05c <_fflush_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	690b      	ldr	r3, [r1, #16]
 800a060:	4605      	mov	r5, r0
 800a062:	460c      	mov	r4, r1
 800a064:	b913      	cbnz	r3, 800a06c <_fflush_r+0x10>
 800a066:	2500      	movs	r5, #0
 800a068:	4628      	mov	r0, r5
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	b118      	cbz	r0, 800a076 <_fflush_r+0x1a>
 800a06e:	6a03      	ldr	r3, [r0, #32]
 800a070:	b90b      	cbnz	r3, 800a076 <_fflush_r+0x1a>
 800a072:	f7fd fa73 	bl	800755c <__sinit>
 800a076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0f3      	beq.n	800a066 <_fflush_r+0xa>
 800a07e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a080:	07d0      	lsls	r0, r2, #31
 800a082:	d404      	bmi.n	800a08e <_fflush_r+0x32>
 800a084:	0599      	lsls	r1, r3, #22
 800a086:	d402      	bmi.n	800a08e <_fflush_r+0x32>
 800a088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a08a:	f7fd fb7e 	bl	800778a <__retarget_lock_acquire_recursive>
 800a08e:	4628      	mov	r0, r5
 800a090:	4621      	mov	r1, r4
 800a092:	f7ff ff5f 	bl	8009f54 <__sflush_r>
 800a096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a098:	07da      	lsls	r2, r3, #31
 800a09a:	4605      	mov	r5, r0
 800a09c:	d4e4      	bmi.n	800a068 <_fflush_r+0xc>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	059b      	lsls	r3, r3, #22
 800a0a2:	d4e1      	bmi.n	800a068 <_fflush_r+0xc>
 800a0a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0a6:	f7fd fb71 	bl	800778c <__retarget_lock_release_recursive>
 800a0aa:	e7dd      	b.n	800a068 <_fflush_r+0xc>

0800a0ac <memmove>:
 800a0ac:	4288      	cmp	r0, r1
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	eb01 0402 	add.w	r4, r1, r2
 800a0b4:	d902      	bls.n	800a0bc <memmove+0x10>
 800a0b6:	4284      	cmp	r4, r0
 800a0b8:	4623      	mov	r3, r4
 800a0ba:	d807      	bhi.n	800a0cc <memmove+0x20>
 800a0bc:	1e43      	subs	r3, r0, #1
 800a0be:	42a1      	cmp	r1, r4
 800a0c0:	d008      	beq.n	800a0d4 <memmove+0x28>
 800a0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0ca:	e7f8      	b.n	800a0be <memmove+0x12>
 800a0cc:	4402      	add	r2, r0
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	428a      	cmp	r2, r1
 800a0d2:	d100      	bne.n	800a0d6 <memmove+0x2a>
 800a0d4:	bd10      	pop	{r4, pc}
 800a0d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0de:	e7f7      	b.n	800a0d0 <memmove+0x24>

0800a0e0 <strncmp>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	b16a      	cbz	r2, 800a100 <strncmp+0x20>
 800a0e4:	3901      	subs	r1, #1
 800a0e6:	1884      	adds	r4, r0, r2
 800a0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d103      	bne.n	800a0fc <strncmp+0x1c>
 800a0f4:	42a0      	cmp	r0, r4
 800a0f6:	d001      	beq.n	800a0fc <strncmp+0x1c>
 800a0f8:	2a00      	cmp	r2, #0
 800a0fa:	d1f5      	bne.n	800a0e8 <strncmp+0x8>
 800a0fc:	1ad0      	subs	r0, r2, r3
 800a0fe:	bd10      	pop	{r4, pc}
 800a100:	4610      	mov	r0, r2
 800a102:	e7fc      	b.n	800a0fe <strncmp+0x1e>

0800a104 <_sbrk_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d06      	ldr	r5, [pc, #24]	@ (800a120 <_sbrk_r+0x1c>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4604      	mov	r4, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	602b      	str	r3, [r5, #0]
 800a110:	f7f8 fee0 	bl	8002ed4 <_sbrk>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_sbrk_r+0x1a>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_sbrk_r+0x1a>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	2000da08 	.word	0x2000da08

0800a124 <memcpy>:
 800a124:	440a      	add	r2, r1
 800a126:	4291      	cmp	r1, r2
 800a128:	f100 33ff 	add.w	r3, r0, #4294967295
 800a12c:	d100      	bne.n	800a130 <memcpy+0xc>
 800a12e:	4770      	bx	lr
 800a130:	b510      	push	{r4, lr}
 800a132:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a13a:	4291      	cmp	r1, r2
 800a13c:	d1f9      	bne.n	800a132 <memcpy+0xe>
 800a13e:	bd10      	pop	{r4, pc}

0800a140 <nan>:
 800a140:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a148 <nan+0x8>
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	00000000 	.word	0x00000000
 800a14c:	7ff80000 	.word	0x7ff80000

0800a150 <__assert_func>:
 800a150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a152:	4614      	mov	r4, r2
 800a154:	461a      	mov	r2, r3
 800a156:	4b09      	ldr	r3, [pc, #36]	@ (800a17c <__assert_func+0x2c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4605      	mov	r5, r0
 800a15c:	68d8      	ldr	r0, [r3, #12]
 800a15e:	b954      	cbnz	r4, 800a176 <__assert_func+0x26>
 800a160:	4b07      	ldr	r3, [pc, #28]	@ (800a180 <__assert_func+0x30>)
 800a162:	461c      	mov	r4, r3
 800a164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a168:	9100      	str	r1, [sp, #0]
 800a16a:	462b      	mov	r3, r5
 800a16c:	4905      	ldr	r1, [pc, #20]	@ (800a184 <__assert_func+0x34>)
 800a16e:	f000 fba7 	bl	800a8c0 <fiprintf>
 800a172:	f000 fbb7 	bl	800a8e4 <abort>
 800a176:	4b04      	ldr	r3, [pc, #16]	@ (800a188 <__assert_func+0x38>)
 800a178:	e7f4      	b.n	800a164 <__assert_func+0x14>
 800a17a:	bf00      	nop
 800a17c:	2000d410 	.word	0x2000d410
 800a180:	0800b2bd 	.word	0x0800b2bd
 800a184:	0800b28f 	.word	0x0800b28f
 800a188:	0800b282 	.word	0x0800b282

0800a18c <_calloc_r>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	fba1 5402 	umull	r5, r4, r1, r2
 800a192:	b93c      	cbnz	r4, 800a1a4 <_calloc_r+0x18>
 800a194:	4629      	mov	r1, r5
 800a196:	f7fe f9c3 	bl	8008520 <_malloc_r>
 800a19a:	4606      	mov	r6, r0
 800a19c:	b928      	cbnz	r0, 800a1aa <_calloc_r+0x1e>
 800a19e:	2600      	movs	r6, #0
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	220c      	movs	r2, #12
 800a1a6:	6002      	str	r2, [r0, #0]
 800a1a8:	e7f9      	b.n	800a19e <_calloc_r+0x12>
 800a1aa:	462a      	mov	r2, r5
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	f7fd fa6e 	bl	800768e <memset>
 800a1b2:	e7f5      	b.n	800a1a0 <_calloc_r+0x14>

0800a1b4 <rshift>:
 800a1b4:	6903      	ldr	r3, [r0, #16]
 800a1b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1c2:	f100 0414 	add.w	r4, r0, #20
 800a1c6:	dd45      	ble.n	800a254 <rshift+0xa0>
 800a1c8:	f011 011f 	ands.w	r1, r1, #31
 800a1cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1d4:	d10c      	bne.n	800a1f0 <rshift+0x3c>
 800a1d6:	f100 0710 	add.w	r7, r0, #16
 800a1da:	4629      	mov	r1, r5
 800a1dc:	42b1      	cmp	r1, r6
 800a1de:	d334      	bcc.n	800a24a <rshift+0x96>
 800a1e0:	1a9b      	subs	r3, r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	1eea      	subs	r2, r5, #3
 800a1e6:	4296      	cmp	r6, r2
 800a1e8:	bf38      	it	cc
 800a1ea:	2300      	movcc	r3, #0
 800a1ec:	4423      	add	r3, r4
 800a1ee:	e015      	b.n	800a21c <rshift+0x68>
 800a1f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1f4:	f1c1 0820 	rsb	r8, r1, #32
 800a1f8:	40cf      	lsrs	r7, r1
 800a1fa:	f105 0e04 	add.w	lr, r5, #4
 800a1fe:	46a1      	mov	r9, r4
 800a200:	4576      	cmp	r6, lr
 800a202:	46f4      	mov	ip, lr
 800a204:	d815      	bhi.n	800a232 <rshift+0x7e>
 800a206:	1a9a      	subs	r2, r3, r2
 800a208:	0092      	lsls	r2, r2, #2
 800a20a:	3a04      	subs	r2, #4
 800a20c:	3501      	adds	r5, #1
 800a20e:	42ae      	cmp	r6, r5
 800a210:	bf38      	it	cc
 800a212:	2200      	movcc	r2, #0
 800a214:	18a3      	adds	r3, r4, r2
 800a216:	50a7      	str	r7, [r4, r2]
 800a218:	b107      	cbz	r7, 800a21c <rshift+0x68>
 800a21a:	3304      	adds	r3, #4
 800a21c:	1b1a      	subs	r2, r3, r4
 800a21e:	42a3      	cmp	r3, r4
 800a220:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a224:	bf08      	it	eq
 800a226:	2300      	moveq	r3, #0
 800a228:	6102      	str	r2, [r0, #16]
 800a22a:	bf08      	it	eq
 800a22c:	6143      	streq	r3, [r0, #20]
 800a22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a232:	f8dc c000 	ldr.w	ip, [ip]
 800a236:	fa0c fc08 	lsl.w	ip, ip, r8
 800a23a:	ea4c 0707 	orr.w	r7, ip, r7
 800a23e:	f849 7b04 	str.w	r7, [r9], #4
 800a242:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a246:	40cf      	lsrs	r7, r1
 800a248:	e7da      	b.n	800a200 <rshift+0x4c>
 800a24a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a24e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a252:	e7c3      	b.n	800a1dc <rshift+0x28>
 800a254:	4623      	mov	r3, r4
 800a256:	e7e1      	b.n	800a21c <rshift+0x68>

0800a258 <__hexdig_fun>:
 800a258:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a25c:	2b09      	cmp	r3, #9
 800a25e:	d802      	bhi.n	800a266 <__hexdig_fun+0xe>
 800a260:	3820      	subs	r0, #32
 800a262:	b2c0      	uxtb	r0, r0
 800a264:	4770      	bx	lr
 800a266:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a26a:	2b05      	cmp	r3, #5
 800a26c:	d801      	bhi.n	800a272 <__hexdig_fun+0x1a>
 800a26e:	3847      	subs	r0, #71	@ 0x47
 800a270:	e7f7      	b.n	800a262 <__hexdig_fun+0xa>
 800a272:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a276:	2b05      	cmp	r3, #5
 800a278:	d801      	bhi.n	800a27e <__hexdig_fun+0x26>
 800a27a:	3827      	subs	r0, #39	@ 0x27
 800a27c:	e7f1      	b.n	800a262 <__hexdig_fun+0xa>
 800a27e:	2000      	movs	r0, #0
 800a280:	4770      	bx	lr
	...

0800a284 <__gethex>:
 800a284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a288:	b085      	sub	sp, #20
 800a28a:	468a      	mov	sl, r1
 800a28c:	9302      	str	r3, [sp, #8]
 800a28e:	680b      	ldr	r3, [r1, #0]
 800a290:	9001      	str	r0, [sp, #4]
 800a292:	4690      	mov	r8, r2
 800a294:	1c9c      	adds	r4, r3, #2
 800a296:	46a1      	mov	r9, r4
 800a298:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a29c:	2830      	cmp	r0, #48	@ 0x30
 800a29e:	d0fa      	beq.n	800a296 <__gethex+0x12>
 800a2a0:	eba9 0303 	sub.w	r3, r9, r3
 800a2a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a2a8:	f7ff ffd6 	bl	800a258 <__hexdig_fun>
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d168      	bne.n	800a384 <__gethex+0x100>
 800a2b2:	49a0      	ldr	r1, [pc, #640]	@ (800a534 <__gethex+0x2b0>)
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	4648      	mov	r0, r9
 800a2b8:	f7ff ff12 	bl	800a0e0 <strncmp>
 800a2bc:	4607      	mov	r7, r0
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d167      	bne.n	800a392 <__gethex+0x10e>
 800a2c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a2c6:	4626      	mov	r6, r4
 800a2c8:	f7ff ffc6 	bl	800a258 <__hexdig_fun>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d062      	beq.n	800a396 <__gethex+0x112>
 800a2d0:	4623      	mov	r3, r4
 800a2d2:	7818      	ldrb	r0, [r3, #0]
 800a2d4:	2830      	cmp	r0, #48	@ 0x30
 800a2d6:	4699      	mov	r9, r3
 800a2d8:	f103 0301 	add.w	r3, r3, #1
 800a2dc:	d0f9      	beq.n	800a2d2 <__gethex+0x4e>
 800a2de:	f7ff ffbb 	bl	800a258 <__hexdig_fun>
 800a2e2:	fab0 f580 	clz	r5, r0
 800a2e6:	096d      	lsrs	r5, r5, #5
 800a2e8:	f04f 0b01 	mov.w	fp, #1
 800a2ec:	464a      	mov	r2, r9
 800a2ee:	4616      	mov	r6, r2
 800a2f0:	3201      	adds	r2, #1
 800a2f2:	7830      	ldrb	r0, [r6, #0]
 800a2f4:	f7ff ffb0 	bl	800a258 <__hexdig_fun>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d1f8      	bne.n	800a2ee <__gethex+0x6a>
 800a2fc:	498d      	ldr	r1, [pc, #564]	@ (800a534 <__gethex+0x2b0>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	4630      	mov	r0, r6
 800a302:	f7ff feed 	bl	800a0e0 <strncmp>
 800a306:	2800      	cmp	r0, #0
 800a308:	d13f      	bne.n	800a38a <__gethex+0x106>
 800a30a:	b944      	cbnz	r4, 800a31e <__gethex+0x9a>
 800a30c:	1c74      	adds	r4, r6, #1
 800a30e:	4622      	mov	r2, r4
 800a310:	4616      	mov	r6, r2
 800a312:	3201      	adds	r2, #1
 800a314:	7830      	ldrb	r0, [r6, #0]
 800a316:	f7ff ff9f 	bl	800a258 <__hexdig_fun>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d1f8      	bne.n	800a310 <__gethex+0x8c>
 800a31e:	1ba4      	subs	r4, r4, r6
 800a320:	00a7      	lsls	r7, r4, #2
 800a322:	7833      	ldrb	r3, [r6, #0]
 800a324:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a328:	2b50      	cmp	r3, #80	@ 0x50
 800a32a:	d13e      	bne.n	800a3aa <__gethex+0x126>
 800a32c:	7873      	ldrb	r3, [r6, #1]
 800a32e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a330:	d033      	beq.n	800a39a <__gethex+0x116>
 800a332:	2b2d      	cmp	r3, #45	@ 0x2d
 800a334:	d034      	beq.n	800a3a0 <__gethex+0x11c>
 800a336:	1c71      	adds	r1, r6, #1
 800a338:	2400      	movs	r4, #0
 800a33a:	7808      	ldrb	r0, [r1, #0]
 800a33c:	f7ff ff8c 	bl	800a258 <__hexdig_fun>
 800a340:	1e43      	subs	r3, r0, #1
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b18      	cmp	r3, #24
 800a346:	d830      	bhi.n	800a3aa <__gethex+0x126>
 800a348:	f1a0 0210 	sub.w	r2, r0, #16
 800a34c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a350:	f7ff ff82 	bl	800a258 <__hexdig_fun>
 800a354:	f100 3cff 	add.w	ip, r0, #4294967295
 800a358:	fa5f fc8c 	uxtb.w	ip, ip
 800a35c:	f1bc 0f18 	cmp.w	ip, #24
 800a360:	f04f 030a 	mov.w	r3, #10
 800a364:	d91e      	bls.n	800a3a4 <__gethex+0x120>
 800a366:	b104      	cbz	r4, 800a36a <__gethex+0xe6>
 800a368:	4252      	negs	r2, r2
 800a36a:	4417      	add	r7, r2
 800a36c:	f8ca 1000 	str.w	r1, [sl]
 800a370:	b1ed      	cbz	r5, 800a3ae <__gethex+0x12a>
 800a372:	f1bb 0f00 	cmp.w	fp, #0
 800a376:	bf0c      	ite	eq
 800a378:	2506      	moveq	r5, #6
 800a37a:	2500      	movne	r5, #0
 800a37c:	4628      	mov	r0, r5
 800a37e:	b005      	add	sp, #20
 800a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a384:	2500      	movs	r5, #0
 800a386:	462c      	mov	r4, r5
 800a388:	e7b0      	b.n	800a2ec <__gethex+0x68>
 800a38a:	2c00      	cmp	r4, #0
 800a38c:	d1c7      	bne.n	800a31e <__gethex+0x9a>
 800a38e:	4627      	mov	r7, r4
 800a390:	e7c7      	b.n	800a322 <__gethex+0x9e>
 800a392:	464e      	mov	r6, r9
 800a394:	462f      	mov	r7, r5
 800a396:	2501      	movs	r5, #1
 800a398:	e7c3      	b.n	800a322 <__gethex+0x9e>
 800a39a:	2400      	movs	r4, #0
 800a39c:	1cb1      	adds	r1, r6, #2
 800a39e:	e7cc      	b.n	800a33a <__gethex+0xb6>
 800a3a0:	2401      	movs	r4, #1
 800a3a2:	e7fb      	b.n	800a39c <__gethex+0x118>
 800a3a4:	fb03 0002 	mla	r0, r3, r2, r0
 800a3a8:	e7ce      	b.n	800a348 <__gethex+0xc4>
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	e7de      	b.n	800a36c <__gethex+0xe8>
 800a3ae:	eba6 0309 	sub.w	r3, r6, r9
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	2b07      	cmp	r3, #7
 800a3b8:	dc0a      	bgt.n	800a3d0 <__gethex+0x14c>
 800a3ba:	9801      	ldr	r0, [sp, #4]
 800a3bc:	f7fe f93c 	bl	8008638 <_Balloc>
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	b940      	cbnz	r0, 800a3d6 <__gethex+0x152>
 800a3c4:	4b5c      	ldr	r3, [pc, #368]	@ (800a538 <__gethex+0x2b4>)
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	21e4      	movs	r1, #228	@ 0xe4
 800a3ca:	485c      	ldr	r0, [pc, #368]	@ (800a53c <__gethex+0x2b8>)
 800a3cc:	f7ff fec0 	bl	800a150 <__assert_func>
 800a3d0:	3101      	adds	r1, #1
 800a3d2:	105b      	asrs	r3, r3, #1
 800a3d4:	e7ef      	b.n	800a3b6 <__gethex+0x132>
 800a3d6:	f100 0a14 	add.w	sl, r0, #20
 800a3da:	2300      	movs	r3, #0
 800a3dc:	4655      	mov	r5, sl
 800a3de:	469b      	mov	fp, r3
 800a3e0:	45b1      	cmp	r9, r6
 800a3e2:	d337      	bcc.n	800a454 <__gethex+0x1d0>
 800a3e4:	f845 bb04 	str.w	fp, [r5], #4
 800a3e8:	eba5 050a 	sub.w	r5, r5, sl
 800a3ec:	10ad      	asrs	r5, r5, #2
 800a3ee:	6125      	str	r5, [r4, #16]
 800a3f0:	4658      	mov	r0, fp
 800a3f2:	f7fe fa13 	bl	800881c <__hi0bits>
 800a3f6:	016d      	lsls	r5, r5, #5
 800a3f8:	f8d8 6000 	ldr.w	r6, [r8]
 800a3fc:	1a2d      	subs	r5, r5, r0
 800a3fe:	42b5      	cmp	r5, r6
 800a400:	dd54      	ble.n	800a4ac <__gethex+0x228>
 800a402:	1bad      	subs	r5, r5, r6
 800a404:	4629      	mov	r1, r5
 800a406:	4620      	mov	r0, r4
 800a408:	f7fe fda7 	bl	8008f5a <__any_on>
 800a40c:	4681      	mov	r9, r0
 800a40e:	b178      	cbz	r0, 800a430 <__gethex+0x1ac>
 800a410:	1e6b      	subs	r3, r5, #1
 800a412:	1159      	asrs	r1, r3, #5
 800a414:	f003 021f 	and.w	r2, r3, #31
 800a418:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a41c:	f04f 0901 	mov.w	r9, #1
 800a420:	fa09 f202 	lsl.w	r2, r9, r2
 800a424:	420a      	tst	r2, r1
 800a426:	d003      	beq.n	800a430 <__gethex+0x1ac>
 800a428:	454b      	cmp	r3, r9
 800a42a:	dc36      	bgt.n	800a49a <__gethex+0x216>
 800a42c:	f04f 0902 	mov.w	r9, #2
 800a430:	4629      	mov	r1, r5
 800a432:	4620      	mov	r0, r4
 800a434:	f7ff febe 	bl	800a1b4 <rshift>
 800a438:	442f      	add	r7, r5
 800a43a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a43e:	42bb      	cmp	r3, r7
 800a440:	da42      	bge.n	800a4c8 <__gethex+0x244>
 800a442:	9801      	ldr	r0, [sp, #4]
 800a444:	4621      	mov	r1, r4
 800a446:	f7fe f937 	bl	80086b8 <_Bfree>
 800a44a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a44c:	2300      	movs	r3, #0
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	25a3      	movs	r5, #163	@ 0xa3
 800a452:	e793      	b.n	800a37c <__gethex+0xf8>
 800a454:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a458:	2a2e      	cmp	r2, #46	@ 0x2e
 800a45a:	d012      	beq.n	800a482 <__gethex+0x1fe>
 800a45c:	2b20      	cmp	r3, #32
 800a45e:	d104      	bne.n	800a46a <__gethex+0x1e6>
 800a460:	f845 bb04 	str.w	fp, [r5], #4
 800a464:	f04f 0b00 	mov.w	fp, #0
 800a468:	465b      	mov	r3, fp
 800a46a:	7830      	ldrb	r0, [r6, #0]
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	f7ff fef3 	bl	800a258 <__hexdig_fun>
 800a472:	9b03      	ldr	r3, [sp, #12]
 800a474:	f000 000f 	and.w	r0, r0, #15
 800a478:	4098      	lsls	r0, r3
 800a47a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a47e:	3304      	adds	r3, #4
 800a480:	e7ae      	b.n	800a3e0 <__gethex+0x15c>
 800a482:	45b1      	cmp	r9, r6
 800a484:	d8ea      	bhi.n	800a45c <__gethex+0x1d8>
 800a486:	492b      	ldr	r1, [pc, #172]	@ (800a534 <__gethex+0x2b0>)
 800a488:	9303      	str	r3, [sp, #12]
 800a48a:	2201      	movs	r2, #1
 800a48c:	4630      	mov	r0, r6
 800a48e:	f7ff fe27 	bl	800a0e0 <strncmp>
 800a492:	9b03      	ldr	r3, [sp, #12]
 800a494:	2800      	cmp	r0, #0
 800a496:	d1e1      	bne.n	800a45c <__gethex+0x1d8>
 800a498:	e7a2      	b.n	800a3e0 <__gethex+0x15c>
 800a49a:	1ea9      	subs	r1, r5, #2
 800a49c:	4620      	mov	r0, r4
 800a49e:	f7fe fd5c 	bl	8008f5a <__any_on>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d0c2      	beq.n	800a42c <__gethex+0x1a8>
 800a4a6:	f04f 0903 	mov.w	r9, #3
 800a4aa:	e7c1      	b.n	800a430 <__gethex+0x1ac>
 800a4ac:	da09      	bge.n	800a4c2 <__gethex+0x23e>
 800a4ae:	1b75      	subs	r5, r6, r5
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	9801      	ldr	r0, [sp, #4]
 800a4b4:	462a      	mov	r2, r5
 800a4b6:	f7fe fb17 	bl	8008ae8 <__lshift>
 800a4ba:	1b7f      	subs	r7, r7, r5
 800a4bc:	4604      	mov	r4, r0
 800a4be:	f100 0a14 	add.w	sl, r0, #20
 800a4c2:	f04f 0900 	mov.w	r9, #0
 800a4c6:	e7b8      	b.n	800a43a <__gethex+0x1b6>
 800a4c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4cc:	42bd      	cmp	r5, r7
 800a4ce:	dd6f      	ble.n	800a5b0 <__gethex+0x32c>
 800a4d0:	1bed      	subs	r5, r5, r7
 800a4d2:	42ae      	cmp	r6, r5
 800a4d4:	dc34      	bgt.n	800a540 <__gethex+0x2bc>
 800a4d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d022      	beq.n	800a524 <__gethex+0x2a0>
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d024      	beq.n	800a52c <__gethex+0x2a8>
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d115      	bne.n	800a512 <__gethex+0x28e>
 800a4e6:	42ae      	cmp	r6, r5
 800a4e8:	d113      	bne.n	800a512 <__gethex+0x28e>
 800a4ea:	2e01      	cmp	r6, #1
 800a4ec:	d10b      	bne.n	800a506 <__gethex+0x282>
 800a4ee:	9a02      	ldr	r2, [sp, #8]
 800a4f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	6123      	str	r3, [r4, #16]
 800a4fa:	f8ca 3000 	str.w	r3, [sl]
 800a4fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a500:	2562      	movs	r5, #98	@ 0x62
 800a502:	601c      	str	r4, [r3, #0]
 800a504:	e73a      	b.n	800a37c <__gethex+0xf8>
 800a506:	1e71      	subs	r1, r6, #1
 800a508:	4620      	mov	r0, r4
 800a50a:	f7fe fd26 	bl	8008f5a <__any_on>
 800a50e:	2800      	cmp	r0, #0
 800a510:	d1ed      	bne.n	800a4ee <__gethex+0x26a>
 800a512:	9801      	ldr	r0, [sp, #4]
 800a514:	4621      	mov	r1, r4
 800a516:	f7fe f8cf 	bl	80086b8 <_Bfree>
 800a51a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a51c:	2300      	movs	r3, #0
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	2550      	movs	r5, #80	@ 0x50
 800a522:	e72b      	b.n	800a37c <__gethex+0xf8>
 800a524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1f3      	bne.n	800a512 <__gethex+0x28e>
 800a52a:	e7e0      	b.n	800a4ee <__gethex+0x26a>
 800a52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1dd      	bne.n	800a4ee <__gethex+0x26a>
 800a532:	e7ee      	b.n	800a512 <__gethex+0x28e>
 800a534:	0800b110 	.word	0x0800b110
 800a538:	0800afa9 	.word	0x0800afa9
 800a53c:	0800b2be 	.word	0x0800b2be
 800a540:	1e6f      	subs	r7, r5, #1
 800a542:	f1b9 0f00 	cmp.w	r9, #0
 800a546:	d130      	bne.n	800a5aa <__gethex+0x326>
 800a548:	b127      	cbz	r7, 800a554 <__gethex+0x2d0>
 800a54a:	4639      	mov	r1, r7
 800a54c:	4620      	mov	r0, r4
 800a54e:	f7fe fd04 	bl	8008f5a <__any_on>
 800a552:	4681      	mov	r9, r0
 800a554:	117a      	asrs	r2, r7, #5
 800a556:	2301      	movs	r3, #1
 800a558:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a55c:	f007 071f 	and.w	r7, r7, #31
 800a560:	40bb      	lsls	r3, r7
 800a562:	4213      	tst	r3, r2
 800a564:	4629      	mov	r1, r5
 800a566:	4620      	mov	r0, r4
 800a568:	bf18      	it	ne
 800a56a:	f049 0902 	orrne.w	r9, r9, #2
 800a56e:	f7ff fe21 	bl	800a1b4 <rshift>
 800a572:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a576:	1b76      	subs	r6, r6, r5
 800a578:	2502      	movs	r5, #2
 800a57a:	f1b9 0f00 	cmp.w	r9, #0
 800a57e:	d047      	beq.n	800a610 <__gethex+0x38c>
 800a580:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a584:	2b02      	cmp	r3, #2
 800a586:	d015      	beq.n	800a5b4 <__gethex+0x330>
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d017      	beq.n	800a5bc <__gethex+0x338>
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d109      	bne.n	800a5a4 <__gethex+0x320>
 800a590:	f019 0f02 	tst.w	r9, #2
 800a594:	d006      	beq.n	800a5a4 <__gethex+0x320>
 800a596:	f8da 3000 	ldr.w	r3, [sl]
 800a59a:	ea49 0903 	orr.w	r9, r9, r3
 800a59e:	f019 0f01 	tst.w	r9, #1
 800a5a2:	d10e      	bne.n	800a5c2 <__gethex+0x33e>
 800a5a4:	f045 0510 	orr.w	r5, r5, #16
 800a5a8:	e032      	b.n	800a610 <__gethex+0x38c>
 800a5aa:	f04f 0901 	mov.w	r9, #1
 800a5ae:	e7d1      	b.n	800a554 <__gethex+0x2d0>
 800a5b0:	2501      	movs	r5, #1
 800a5b2:	e7e2      	b.n	800a57a <__gethex+0x2f6>
 800a5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5b6:	f1c3 0301 	rsb	r3, r3, #1
 800a5ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0f0      	beq.n	800a5a4 <__gethex+0x320>
 800a5c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5c6:	f104 0314 	add.w	r3, r4, #20
 800a5ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a5ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a5d2:	f04f 0c00 	mov.w	ip, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a5e0:	d01b      	beq.n	800a61a <__gethex+0x396>
 800a5e2:	3201      	adds	r2, #1
 800a5e4:	6002      	str	r2, [r0, #0]
 800a5e6:	2d02      	cmp	r5, #2
 800a5e8:	f104 0314 	add.w	r3, r4, #20
 800a5ec:	d13c      	bne.n	800a668 <__gethex+0x3e4>
 800a5ee:	f8d8 2000 	ldr.w	r2, [r8]
 800a5f2:	3a01      	subs	r2, #1
 800a5f4:	42b2      	cmp	r2, r6
 800a5f6:	d109      	bne.n	800a60c <__gethex+0x388>
 800a5f8:	1171      	asrs	r1, r6, #5
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a600:	f006 061f 	and.w	r6, r6, #31
 800a604:	fa02 f606 	lsl.w	r6, r2, r6
 800a608:	421e      	tst	r6, r3
 800a60a:	d13a      	bne.n	800a682 <__gethex+0x3fe>
 800a60c:	f045 0520 	orr.w	r5, r5, #32
 800a610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a612:	601c      	str	r4, [r3, #0]
 800a614:	9b02      	ldr	r3, [sp, #8]
 800a616:	601f      	str	r7, [r3, #0]
 800a618:	e6b0      	b.n	800a37c <__gethex+0xf8>
 800a61a:	4299      	cmp	r1, r3
 800a61c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a620:	d8d9      	bhi.n	800a5d6 <__gethex+0x352>
 800a622:	68a3      	ldr	r3, [r4, #8]
 800a624:	459b      	cmp	fp, r3
 800a626:	db17      	blt.n	800a658 <__gethex+0x3d4>
 800a628:	6861      	ldr	r1, [r4, #4]
 800a62a:	9801      	ldr	r0, [sp, #4]
 800a62c:	3101      	adds	r1, #1
 800a62e:	f7fe f803 	bl	8008638 <_Balloc>
 800a632:	4681      	mov	r9, r0
 800a634:	b918      	cbnz	r0, 800a63e <__gethex+0x3ba>
 800a636:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a0 <__gethex+0x41c>)
 800a638:	4602      	mov	r2, r0
 800a63a:	2184      	movs	r1, #132	@ 0x84
 800a63c:	e6c5      	b.n	800a3ca <__gethex+0x146>
 800a63e:	6922      	ldr	r2, [r4, #16]
 800a640:	3202      	adds	r2, #2
 800a642:	f104 010c 	add.w	r1, r4, #12
 800a646:	0092      	lsls	r2, r2, #2
 800a648:	300c      	adds	r0, #12
 800a64a:	f7ff fd6b 	bl	800a124 <memcpy>
 800a64e:	4621      	mov	r1, r4
 800a650:	9801      	ldr	r0, [sp, #4]
 800a652:	f7fe f831 	bl	80086b8 <_Bfree>
 800a656:	464c      	mov	r4, r9
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a660:	6122      	str	r2, [r4, #16]
 800a662:	2201      	movs	r2, #1
 800a664:	615a      	str	r2, [r3, #20]
 800a666:	e7be      	b.n	800a5e6 <__gethex+0x362>
 800a668:	6922      	ldr	r2, [r4, #16]
 800a66a:	455a      	cmp	r2, fp
 800a66c:	dd0b      	ble.n	800a686 <__gethex+0x402>
 800a66e:	2101      	movs	r1, #1
 800a670:	4620      	mov	r0, r4
 800a672:	f7ff fd9f 	bl	800a1b4 <rshift>
 800a676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a67a:	3701      	adds	r7, #1
 800a67c:	42bb      	cmp	r3, r7
 800a67e:	f6ff aee0 	blt.w	800a442 <__gethex+0x1be>
 800a682:	2501      	movs	r5, #1
 800a684:	e7c2      	b.n	800a60c <__gethex+0x388>
 800a686:	f016 061f 	ands.w	r6, r6, #31
 800a68a:	d0fa      	beq.n	800a682 <__gethex+0x3fe>
 800a68c:	4453      	add	r3, sl
 800a68e:	f1c6 0620 	rsb	r6, r6, #32
 800a692:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a696:	f7fe f8c1 	bl	800881c <__hi0bits>
 800a69a:	42b0      	cmp	r0, r6
 800a69c:	dbe7      	blt.n	800a66e <__gethex+0x3ea>
 800a69e:	e7f0      	b.n	800a682 <__gethex+0x3fe>
 800a6a0:	0800afa9 	.word	0x0800afa9

0800a6a4 <L_shift>:
 800a6a4:	f1c2 0208 	rsb	r2, r2, #8
 800a6a8:	0092      	lsls	r2, r2, #2
 800a6aa:	b570      	push	{r4, r5, r6, lr}
 800a6ac:	f1c2 0620 	rsb	r6, r2, #32
 800a6b0:	6843      	ldr	r3, [r0, #4]
 800a6b2:	6804      	ldr	r4, [r0, #0]
 800a6b4:	fa03 f506 	lsl.w	r5, r3, r6
 800a6b8:	432c      	orrs	r4, r5
 800a6ba:	40d3      	lsrs	r3, r2
 800a6bc:	6004      	str	r4, [r0, #0]
 800a6be:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6c2:	4288      	cmp	r0, r1
 800a6c4:	d3f4      	bcc.n	800a6b0 <L_shift+0xc>
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}

0800a6c8 <__match>:
 800a6c8:	b530      	push	{r4, r5, lr}
 800a6ca:	6803      	ldr	r3, [r0, #0]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d2:	b914      	cbnz	r4, 800a6da <__match+0x12>
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	2001      	movs	r0, #1
 800a6d8:	bd30      	pop	{r4, r5, pc}
 800a6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a6e2:	2d19      	cmp	r5, #25
 800a6e4:	bf98      	it	ls
 800a6e6:	3220      	addls	r2, #32
 800a6e8:	42a2      	cmp	r2, r4
 800a6ea:	d0f0      	beq.n	800a6ce <__match+0x6>
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e7f3      	b.n	800a6d8 <__match+0x10>

0800a6f0 <__hexnan>:
 800a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	680b      	ldr	r3, [r1, #0]
 800a6f6:	6801      	ldr	r1, [r0, #0]
 800a6f8:	115e      	asrs	r6, r3, #5
 800a6fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a6fe:	f013 031f 	ands.w	r3, r3, #31
 800a702:	b087      	sub	sp, #28
 800a704:	bf18      	it	ne
 800a706:	3604      	addne	r6, #4
 800a708:	2500      	movs	r5, #0
 800a70a:	1f37      	subs	r7, r6, #4
 800a70c:	4682      	mov	sl, r0
 800a70e:	4690      	mov	r8, r2
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	f846 5c04 	str.w	r5, [r6, #-4]
 800a716:	46b9      	mov	r9, r7
 800a718:	463c      	mov	r4, r7
 800a71a:	9502      	str	r5, [sp, #8]
 800a71c:	46ab      	mov	fp, r5
 800a71e:	784a      	ldrb	r2, [r1, #1]
 800a720:	1c4b      	adds	r3, r1, #1
 800a722:	9303      	str	r3, [sp, #12]
 800a724:	b342      	cbz	r2, 800a778 <__hexnan+0x88>
 800a726:	4610      	mov	r0, r2
 800a728:	9105      	str	r1, [sp, #20]
 800a72a:	9204      	str	r2, [sp, #16]
 800a72c:	f7ff fd94 	bl	800a258 <__hexdig_fun>
 800a730:	2800      	cmp	r0, #0
 800a732:	d151      	bne.n	800a7d8 <__hexnan+0xe8>
 800a734:	9a04      	ldr	r2, [sp, #16]
 800a736:	9905      	ldr	r1, [sp, #20]
 800a738:	2a20      	cmp	r2, #32
 800a73a:	d818      	bhi.n	800a76e <__hexnan+0x7e>
 800a73c:	9b02      	ldr	r3, [sp, #8]
 800a73e:	459b      	cmp	fp, r3
 800a740:	dd13      	ble.n	800a76a <__hexnan+0x7a>
 800a742:	454c      	cmp	r4, r9
 800a744:	d206      	bcs.n	800a754 <__hexnan+0x64>
 800a746:	2d07      	cmp	r5, #7
 800a748:	dc04      	bgt.n	800a754 <__hexnan+0x64>
 800a74a:	462a      	mov	r2, r5
 800a74c:	4649      	mov	r1, r9
 800a74e:	4620      	mov	r0, r4
 800a750:	f7ff ffa8 	bl	800a6a4 <L_shift>
 800a754:	4544      	cmp	r4, r8
 800a756:	d952      	bls.n	800a7fe <__hexnan+0x10e>
 800a758:	2300      	movs	r3, #0
 800a75a:	f1a4 0904 	sub.w	r9, r4, #4
 800a75e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a762:	f8cd b008 	str.w	fp, [sp, #8]
 800a766:	464c      	mov	r4, r9
 800a768:	461d      	mov	r5, r3
 800a76a:	9903      	ldr	r1, [sp, #12]
 800a76c:	e7d7      	b.n	800a71e <__hexnan+0x2e>
 800a76e:	2a29      	cmp	r2, #41	@ 0x29
 800a770:	d157      	bne.n	800a822 <__hexnan+0x132>
 800a772:	3102      	adds	r1, #2
 800a774:	f8ca 1000 	str.w	r1, [sl]
 800a778:	f1bb 0f00 	cmp.w	fp, #0
 800a77c:	d051      	beq.n	800a822 <__hexnan+0x132>
 800a77e:	454c      	cmp	r4, r9
 800a780:	d206      	bcs.n	800a790 <__hexnan+0xa0>
 800a782:	2d07      	cmp	r5, #7
 800a784:	dc04      	bgt.n	800a790 <__hexnan+0xa0>
 800a786:	462a      	mov	r2, r5
 800a788:	4649      	mov	r1, r9
 800a78a:	4620      	mov	r0, r4
 800a78c:	f7ff ff8a 	bl	800a6a4 <L_shift>
 800a790:	4544      	cmp	r4, r8
 800a792:	d936      	bls.n	800a802 <__hexnan+0x112>
 800a794:	f1a8 0204 	sub.w	r2, r8, #4
 800a798:	4623      	mov	r3, r4
 800a79a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a79e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7a2:	429f      	cmp	r7, r3
 800a7a4:	d2f9      	bcs.n	800a79a <__hexnan+0xaa>
 800a7a6:	1b3b      	subs	r3, r7, r4
 800a7a8:	f023 0303 	bic.w	r3, r3, #3
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	3401      	adds	r4, #1
 800a7b0:	3e03      	subs	r6, #3
 800a7b2:	42b4      	cmp	r4, r6
 800a7b4:	bf88      	it	hi
 800a7b6:	2304      	movhi	r3, #4
 800a7b8:	4443      	add	r3, r8
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f843 2b04 	str.w	r2, [r3], #4
 800a7c0:	429f      	cmp	r7, r3
 800a7c2:	d2fb      	bcs.n	800a7bc <__hexnan+0xcc>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	b91b      	cbnz	r3, 800a7d0 <__hexnan+0xe0>
 800a7c8:	4547      	cmp	r7, r8
 800a7ca:	d128      	bne.n	800a81e <__hexnan+0x12e>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	603b      	str	r3, [r7, #0]
 800a7d0:	2005      	movs	r0, #5
 800a7d2:	b007      	add	sp, #28
 800a7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d8:	3501      	adds	r5, #1
 800a7da:	2d08      	cmp	r5, #8
 800a7dc:	f10b 0b01 	add.w	fp, fp, #1
 800a7e0:	dd06      	ble.n	800a7f0 <__hexnan+0x100>
 800a7e2:	4544      	cmp	r4, r8
 800a7e4:	d9c1      	bls.n	800a76a <__hexnan+0x7a>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7ec:	2501      	movs	r5, #1
 800a7ee:	3c04      	subs	r4, #4
 800a7f0:	6822      	ldr	r2, [r4, #0]
 800a7f2:	f000 000f 	and.w	r0, r0, #15
 800a7f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a7fa:	6020      	str	r0, [r4, #0]
 800a7fc:	e7b5      	b.n	800a76a <__hexnan+0x7a>
 800a7fe:	2508      	movs	r5, #8
 800a800:	e7b3      	b.n	800a76a <__hexnan+0x7a>
 800a802:	9b01      	ldr	r3, [sp, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0dd      	beq.n	800a7c4 <__hexnan+0xd4>
 800a808:	f1c3 0320 	rsb	r3, r3, #32
 800a80c:	f04f 32ff 	mov.w	r2, #4294967295
 800a810:	40da      	lsrs	r2, r3
 800a812:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a816:	4013      	ands	r3, r2
 800a818:	f846 3c04 	str.w	r3, [r6, #-4]
 800a81c:	e7d2      	b.n	800a7c4 <__hexnan+0xd4>
 800a81e:	3f04      	subs	r7, #4
 800a820:	e7d0      	b.n	800a7c4 <__hexnan+0xd4>
 800a822:	2004      	movs	r0, #4
 800a824:	e7d5      	b.n	800a7d2 <__hexnan+0xe2>

0800a826 <__ascii_mbtowc>:
 800a826:	b082      	sub	sp, #8
 800a828:	b901      	cbnz	r1, 800a82c <__ascii_mbtowc+0x6>
 800a82a:	a901      	add	r1, sp, #4
 800a82c:	b142      	cbz	r2, 800a840 <__ascii_mbtowc+0x1a>
 800a82e:	b14b      	cbz	r3, 800a844 <__ascii_mbtowc+0x1e>
 800a830:	7813      	ldrb	r3, [r2, #0]
 800a832:	600b      	str	r3, [r1, #0]
 800a834:	7812      	ldrb	r2, [r2, #0]
 800a836:	1e10      	subs	r0, r2, #0
 800a838:	bf18      	it	ne
 800a83a:	2001      	movne	r0, #1
 800a83c:	b002      	add	sp, #8
 800a83e:	4770      	bx	lr
 800a840:	4610      	mov	r0, r2
 800a842:	e7fb      	b.n	800a83c <__ascii_mbtowc+0x16>
 800a844:	f06f 0001 	mvn.w	r0, #1
 800a848:	e7f8      	b.n	800a83c <__ascii_mbtowc+0x16>

0800a84a <_realloc_r>:
 800a84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84e:	4680      	mov	r8, r0
 800a850:	4615      	mov	r5, r2
 800a852:	460c      	mov	r4, r1
 800a854:	b921      	cbnz	r1, 800a860 <_realloc_r+0x16>
 800a856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a85a:	4611      	mov	r1, r2
 800a85c:	f7fd be60 	b.w	8008520 <_malloc_r>
 800a860:	b92a      	cbnz	r2, 800a86e <_realloc_r+0x24>
 800a862:	f7fd fde9 	bl	8008438 <_free_r>
 800a866:	2400      	movs	r4, #0
 800a868:	4620      	mov	r0, r4
 800a86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86e:	f000 f840 	bl	800a8f2 <_malloc_usable_size_r>
 800a872:	4285      	cmp	r5, r0
 800a874:	4606      	mov	r6, r0
 800a876:	d802      	bhi.n	800a87e <_realloc_r+0x34>
 800a878:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a87c:	d8f4      	bhi.n	800a868 <_realloc_r+0x1e>
 800a87e:	4629      	mov	r1, r5
 800a880:	4640      	mov	r0, r8
 800a882:	f7fd fe4d 	bl	8008520 <_malloc_r>
 800a886:	4607      	mov	r7, r0
 800a888:	2800      	cmp	r0, #0
 800a88a:	d0ec      	beq.n	800a866 <_realloc_r+0x1c>
 800a88c:	42b5      	cmp	r5, r6
 800a88e:	462a      	mov	r2, r5
 800a890:	4621      	mov	r1, r4
 800a892:	bf28      	it	cs
 800a894:	4632      	movcs	r2, r6
 800a896:	f7ff fc45 	bl	800a124 <memcpy>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4640      	mov	r0, r8
 800a89e:	f7fd fdcb 	bl	8008438 <_free_r>
 800a8a2:	463c      	mov	r4, r7
 800a8a4:	e7e0      	b.n	800a868 <_realloc_r+0x1e>

0800a8a6 <__ascii_wctomb>:
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	4608      	mov	r0, r1
 800a8aa:	b141      	cbz	r1, 800a8be <__ascii_wctomb+0x18>
 800a8ac:	2aff      	cmp	r2, #255	@ 0xff
 800a8ae:	d904      	bls.n	800a8ba <__ascii_wctomb+0x14>
 800a8b0:	228a      	movs	r2, #138	@ 0x8a
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	4770      	bx	lr
 800a8ba:	700a      	strb	r2, [r1, #0]
 800a8bc:	2001      	movs	r0, #1
 800a8be:	4770      	bx	lr

0800a8c0 <fiprintf>:
 800a8c0:	b40e      	push	{r1, r2, r3}
 800a8c2:	b503      	push	{r0, r1, lr}
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	ab03      	add	r3, sp, #12
 800a8c8:	4805      	ldr	r0, [pc, #20]	@ (800a8e0 <fiprintf+0x20>)
 800a8ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ce:	6800      	ldr	r0, [r0, #0]
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	f000 f83f 	bl	800a954 <_vfiprintf_r>
 800a8d6:	b002      	add	sp, #8
 800a8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8dc:	b003      	add	sp, #12
 800a8de:	4770      	bx	lr
 800a8e0:	2000d410 	.word	0x2000d410

0800a8e4 <abort>:
 800a8e4:	b508      	push	{r3, lr}
 800a8e6:	2006      	movs	r0, #6
 800a8e8:	f000 fa08 	bl	800acfc <raise>
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	f7f8 fa79 	bl	8002de4 <_exit>

0800a8f2 <_malloc_usable_size_r>:
 800a8f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8f6:	1f18      	subs	r0, r3, #4
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	bfbc      	itt	lt
 800a8fc:	580b      	ldrlt	r3, [r1, r0]
 800a8fe:	18c0      	addlt	r0, r0, r3
 800a900:	4770      	bx	lr

0800a902 <__sfputc_r>:
 800a902:	6893      	ldr	r3, [r2, #8]
 800a904:	3b01      	subs	r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	b410      	push	{r4}
 800a90a:	6093      	str	r3, [r2, #8]
 800a90c:	da08      	bge.n	800a920 <__sfputc_r+0x1e>
 800a90e:	6994      	ldr	r4, [r2, #24]
 800a910:	42a3      	cmp	r3, r4
 800a912:	db01      	blt.n	800a918 <__sfputc_r+0x16>
 800a914:	290a      	cmp	r1, #10
 800a916:	d103      	bne.n	800a920 <__sfputc_r+0x1e>
 800a918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a91c:	f000 b932 	b.w	800ab84 <__swbuf_r>
 800a920:	6813      	ldr	r3, [r2, #0]
 800a922:	1c58      	adds	r0, r3, #1
 800a924:	6010      	str	r0, [r2, #0]
 800a926:	7019      	strb	r1, [r3, #0]
 800a928:	4608      	mov	r0, r1
 800a92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <__sfputs_r>:
 800a930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a932:	4606      	mov	r6, r0
 800a934:	460f      	mov	r7, r1
 800a936:	4614      	mov	r4, r2
 800a938:	18d5      	adds	r5, r2, r3
 800a93a:	42ac      	cmp	r4, r5
 800a93c:	d101      	bne.n	800a942 <__sfputs_r+0x12>
 800a93e:	2000      	movs	r0, #0
 800a940:	e007      	b.n	800a952 <__sfputs_r+0x22>
 800a942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a946:	463a      	mov	r2, r7
 800a948:	4630      	mov	r0, r6
 800a94a:	f7ff ffda 	bl	800a902 <__sfputc_r>
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	d1f3      	bne.n	800a93a <__sfputs_r+0xa>
 800a952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a954 <_vfiprintf_r>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	460d      	mov	r5, r1
 800a95a:	b09d      	sub	sp, #116	@ 0x74
 800a95c:	4614      	mov	r4, r2
 800a95e:	4698      	mov	r8, r3
 800a960:	4606      	mov	r6, r0
 800a962:	b118      	cbz	r0, 800a96c <_vfiprintf_r+0x18>
 800a964:	6a03      	ldr	r3, [r0, #32]
 800a966:	b90b      	cbnz	r3, 800a96c <_vfiprintf_r+0x18>
 800a968:	f7fc fdf8 	bl	800755c <__sinit>
 800a96c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a96e:	07d9      	lsls	r1, r3, #31
 800a970:	d405      	bmi.n	800a97e <_vfiprintf_r+0x2a>
 800a972:	89ab      	ldrh	r3, [r5, #12]
 800a974:	059a      	lsls	r2, r3, #22
 800a976:	d402      	bmi.n	800a97e <_vfiprintf_r+0x2a>
 800a978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a97a:	f7fc ff06 	bl	800778a <__retarget_lock_acquire_recursive>
 800a97e:	89ab      	ldrh	r3, [r5, #12]
 800a980:	071b      	lsls	r3, r3, #28
 800a982:	d501      	bpl.n	800a988 <_vfiprintf_r+0x34>
 800a984:	692b      	ldr	r3, [r5, #16]
 800a986:	b99b      	cbnz	r3, 800a9b0 <_vfiprintf_r+0x5c>
 800a988:	4629      	mov	r1, r5
 800a98a:	4630      	mov	r0, r6
 800a98c:	f000 f938 	bl	800ac00 <__swsetup_r>
 800a990:	b170      	cbz	r0, 800a9b0 <_vfiprintf_r+0x5c>
 800a992:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a994:	07dc      	lsls	r4, r3, #31
 800a996:	d504      	bpl.n	800a9a2 <_vfiprintf_r+0x4e>
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	b01d      	add	sp, #116	@ 0x74
 800a99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	0598      	lsls	r0, r3, #22
 800a9a6:	d4f7      	bmi.n	800a998 <_vfiprintf_r+0x44>
 800a9a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9aa:	f7fc feef 	bl	800778c <__retarget_lock_release_recursive>
 800a9ae:	e7f3      	b.n	800a998 <_vfiprintf_r+0x44>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9b4:	2320      	movs	r3, #32
 800a9b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9be:	2330      	movs	r3, #48	@ 0x30
 800a9c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab70 <_vfiprintf_r+0x21c>
 800a9c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9c8:	f04f 0901 	mov.w	r9, #1
 800a9cc:	4623      	mov	r3, r4
 800a9ce:	469a      	mov	sl, r3
 800a9d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9d4:	b10a      	cbz	r2, 800a9da <_vfiprintf_r+0x86>
 800a9d6:	2a25      	cmp	r2, #37	@ 0x25
 800a9d8:	d1f9      	bne.n	800a9ce <_vfiprintf_r+0x7a>
 800a9da:	ebba 0b04 	subs.w	fp, sl, r4
 800a9de:	d00b      	beq.n	800a9f8 <_vfiprintf_r+0xa4>
 800a9e0:	465b      	mov	r3, fp
 800a9e2:	4622      	mov	r2, r4
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff ffa2 	bl	800a930 <__sfputs_r>
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	f000 80a7 	beq.w	800ab40 <_vfiprintf_r+0x1ec>
 800a9f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9f4:	445a      	add	r2, fp
 800a9f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f000 809f 	beq.w	800ab40 <_vfiprintf_r+0x1ec>
 800aa02:	2300      	movs	r3, #0
 800aa04:	f04f 32ff 	mov.w	r2, #4294967295
 800aa08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa0c:	f10a 0a01 	add.w	sl, sl, #1
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	9307      	str	r3, [sp, #28]
 800aa14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa18:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa1a:	4654      	mov	r4, sl
 800aa1c:	2205      	movs	r2, #5
 800aa1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa22:	4853      	ldr	r0, [pc, #332]	@ (800ab70 <_vfiprintf_r+0x21c>)
 800aa24:	f7f5 fbdc 	bl	80001e0 <memchr>
 800aa28:	9a04      	ldr	r2, [sp, #16]
 800aa2a:	b9d8      	cbnz	r0, 800aa64 <_vfiprintf_r+0x110>
 800aa2c:	06d1      	lsls	r1, r2, #27
 800aa2e:	bf44      	itt	mi
 800aa30:	2320      	movmi	r3, #32
 800aa32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa36:	0713      	lsls	r3, r2, #28
 800aa38:	bf44      	itt	mi
 800aa3a:	232b      	movmi	r3, #43	@ 0x2b
 800aa3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa40:	f89a 3000 	ldrb.w	r3, [sl]
 800aa44:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa46:	d015      	beq.n	800aa74 <_vfiprintf_r+0x120>
 800aa48:	9a07      	ldr	r2, [sp, #28]
 800aa4a:	4654      	mov	r4, sl
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	f04f 0c0a 	mov.w	ip, #10
 800aa52:	4621      	mov	r1, r4
 800aa54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa58:	3b30      	subs	r3, #48	@ 0x30
 800aa5a:	2b09      	cmp	r3, #9
 800aa5c:	d94b      	bls.n	800aaf6 <_vfiprintf_r+0x1a2>
 800aa5e:	b1b0      	cbz	r0, 800aa8e <_vfiprintf_r+0x13a>
 800aa60:	9207      	str	r2, [sp, #28]
 800aa62:	e014      	b.n	800aa8e <_vfiprintf_r+0x13a>
 800aa64:	eba0 0308 	sub.w	r3, r0, r8
 800aa68:	fa09 f303 	lsl.w	r3, r9, r3
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	9304      	str	r3, [sp, #16]
 800aa70:	46a2      	mov	sl, r4
 800aa72:	e7d2      	b.n	800aa1a <_vfiprintf_r+0xc6>
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	1d19      	adds	r1, r3, #4
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	9103      	str	r1, [sp, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	bfbb      	ittet	lt
 800aa80:	425b      	neglt	r3, r3
 800aa82:	f042 0202 	orrlt.w	r2, r2, #2
 800aa86:	9307      	strge	r3, [sp, #28]
 800aa88:	9307      	strlt	r3, [sp, #28]
 800aa8a:	bfb8      	it	lt
 800aa8c:	9204      	strlt	r2, [sp, #16]
 800aa8e:	7823      	ldrb	r3, [r4, #0]
 800aa90:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa92:	d10a      	bne.n	800aaaa <_vfiprintf_r+0x156>
 800aa94:	7863      	ldrb	r3, [r4, #1]
 800aa96:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa98:	d132      	bne.n	800ab00 <_vfiprintf_r+0x1ac>
 800aa9a:	9b03      	ldr	r3, [sp, #12]
 800aa9c:	1d1a      	adds	r2, r3, #4
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	9203      	str	r2, [sp, #12]
 800aaa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aaa6:	3402      	adds	r4, #2
 800aaa8:	9305      	str	r3, [sp, #20]
 800aaaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab80 <_vfiprintf_r+0x22c>
 800aaae:	7821      	ldrb	r1, [r4, #0]
 800aab0:	2203      	movs	r2, #3
 800aab2:	4650      	mov	r0, sl
 800aab4:	f7f5 fb94 	bl	80001e0 <memchr>
 800aab8:	b138      	cbz	r0, 800aaca <_vfiprintf_r+0x176>
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	eba0 000a 	sub.w	r0, r0, sl
 800aac0:	2240      	movs	r2, #64	@ 0x40
 800aac2:	4082      	lsls	r2, r0
 800aac4:	4313      	orrs	r3, r2
 800aac6:	3401      	adds	r4, #1
 800aac8:	9304      	str	r3, [sp, #16]
 800aaca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aace:	4829      	ldr	r0, [pc, #164]	@ (800ab74 <_vfiprintf_r+0x220>)
 800aad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aad4:	2206      	movs	r2, #6
 800aad6:	f7f5 fb83 	bl	80001e0 <memchr>
 800aada:	2800      	cmp	r0, #0
 800aadc:	d03f      	beq.n	800ab5e <_vfiprintf_r+0x20a>
 800aade:	4b26      	ldr	r3, [pc, #152]	@ (800ab78 <_vfiprintf_r+0x224>)
 800aae0:	bb1b      	cbnz	r3, 800ab2a <_vfiprintf_r+0x1d6>
 800aae2:	9b03      	ldr	r3, [sp, #12]
 800aae4:	3307      	adds	r3, #7
 800aae6:	f023 0307 	bic.w	r3, r3, #7
 800aaea:	3308      	adds	r3, #8
 800aaec:	9303      	str	r3, [sp, #12]
 800aaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf0:	443b      	add	r3, r7
 800aaf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf4:	e76a      	b.n	800a9cc <_vfiprintf_r+0x78>
 800aaf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aafa:	460c      	mov	r4, r1
 800aafc:	2001      	movs	r0, #1
 800aafe:	e7a8      	b.n	800aa52 <_vfiprintf_r+0xfe>
 800ab00:	2300      	movs	r3, #0
 800ab02:	3401      	adds	r4, #1
 800ab04:	9305      	str	r3, [sp, #20]
 800ab06:	4619      	mov	r1, r3
 800ab08:	f04f 0c0a 	mov.w	ip, #10
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab12:	3a30      	subs	r2, #48	@ 0x30
 800ab14:	2a09      	cmp	r2, #9
 800ab16:	d903      	bls.n	800ab20 <_vfiprintf_r+0x1cc>
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d0c6      	beq.n	800aaaa <_vfiprintf_r+0x156>
 800ab1c:	9105      	str	r1, [sp, #20]
 800ab1e:	e7c4      	b.n	800aaaa <_vfiprintf_r+0x156>
 800ab20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab24:	4604      	mov	r4, r0
 800ab26:	2301      	movs	r3, #1
 800ab28:	e7f0      	b.n	800ab0c <_vfiprintf_r+0x1b8>
 800ab2a:	ab03      	add	r3, sp, #12
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	462a      	mov	r2, r5
 800ab30:	4b12      	ldr	r3, [pc, #72]	@ (800ab7c <_vfiprintf_r+0x228>)
 800ab32:	a904      	add	r1, sp, #16
 800ab34:	4630      	mov	r0, r6
 800ab36:	f7fb feb9 	bl	80068ac <_printf_float>
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	1c78      	adds	r0, r7, #1
 800ab3e:	d1d6      	bne.n	800aaee <_vfiprintf_r+0x19a>
 800ab40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab42:	07d9      	lsls	r1, r3, #31
 800ab44:	d405      	bmi.n	800ab52 <_vfiprintf_r+0x1fe>
 800ab46:	89ab      	ldrh	r3, [r5, #12]
 800ab48:	059a      	lsls	r2, r3, #22
 800ab4a:	d402      	bmi.n	800ab52 <_vfiprintf_r+0x1fe>
 800ab4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab4e:	f7fc fe1d 	bl	800778c <__retarget_lock_release_recursive>
 800ab52:	89ab      	ldrh	r3, [r5, #12]
 800ab54:	065b      	lsls	r3, r3, #25
 800ab56:	f53f af1f 	bmi.w	800a998 <_vfiprintf_r+0x44>
 800ab5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab5c:	e71e      	b.n	800a99c <_vfiprintf_r+0x48>
 800ab5e:	ab03      	add	r3, sp, #12
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	462a      	mov	r2, r5
 800ab64:	4b05      	ldr	r3, [pc, #20]	@ (800ab7c <_vfiprintf_r+0x228>)
 800ab66:	a904      	add	r1, sp, #16
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7fc f937 	bl	8006ddc <_printf_i>
 800ab6e:	e7e4      	b.n	800ab3a <_vfiprintf_r+0x1e6>
 800ab70:	0800b269 	.word	0x0800b269
 800ab74:	0800b273 	.word	0x0800b273
 800ab78:	080068ad 	.word	0x080068ad
 800ab7c:	0800a931 	.word	0x0800a931
 800ab80:	0800b26f 	.word	0x0800b26f

0800ab84 <__swbuf_r>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	460e      	mov	r6, r1
 800ab88:	4614      	mov	r4, r2
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	b118      	cbz	r0, 800ab96 <__swbuf_r+0x12>
 800ab8e:	6a03      	ldr	r3, [r0, #32]
 800ab90:	b90b      	cbnz	r3, 800ab96 <__swbuf_r+0x12>
 800ab92:	f7fc fce3 	bl	800755c <__sinit>
 800ab96:	69a3      	ldr	r3, [r4, #24]
 800ab98:	60a3      	str	r3, [r4, #8]
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	071a      	lsls	r2, r3, #28
 800ab9e:	d501      	bpl.n	800aba4 <__swbuf_r+0x20>
 800aba0:	6923      	ldr	r3, [r4, #16]
 800aba2:	b943      	cbnz	r3, 800abb6 <__swbuf_r+0x32>
 800aba4:	4621      	mov	r1, r4
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 f82a 	bl	800ac00 <__swsetup_r>
 800abac:	b118      	cbz	r0, 800abb6 <__swbuf_r+0x32>
 800abae:	f04f 37ff 	mov.w	r7, #4294967295
 800abb2:	4638      	mov	r0, r7
 800abb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	6922      	ldr	r2, [r4, #16]
 800abba:	1a98      	subs	r0, r3, r2
 800abbc:	6963      	ldr	r3, [r4, #20]
 800abbe:	b2f6      	uxtb	r6, r6
 800abc0:	4283      	cmp	r3, r0
 800abc2:	4637      	mov	r7, r6
 800abc4:	dc05      	bgt.n	800abd2 <__swbuf_r+0x4e>
 800abc6:	4621      	mov	r1, r4
 800abc8:	4628      	mov	r0, r5
 800abca:	f7ff fa47 	bl	800a05c <_fflush_r>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d1ed      	bne.n	800abae <__swbuf_r+0x2a>
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	60a3      	str	r3, [r4, #8]
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	701e      	strb	r6, [r3, #0]
 800abe0:	6962      	ldr	r2, [r4, #20]
 800abe2:	1c43      	adds	r3, r0, #1
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d004      	beq.n	800abf2 <__swbuf_r+0x6e>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	07db      	lsls	r3, r3, #31
 800abec:	d5e1      	bpl.n	800abb2 <__swbuf_r+0x2e>
 800abee:	2e0a      	cmp	r6, #10
 800abf0:	d1df      	bne.n	800abb2 <__swbuf_r+0x2e>
 800abf2:	4621      	mov	r1, r4
 800abf4:	4628      	mov	r0, r5
 800abf6:	f7ff fa31 	bl	800a05c <_fflush_r>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d0d9      	beq.n	800abb2 <__swbuf_r+0x2e>
 800abfe:	e7d6      	b.n	800abae <__swbuf_r+0x2a>

0800ac00 <__swsetup_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4b29      	ldr	r3, [pc, #164]	@ (800aca8 <__swsetup_r+0xa8>)
 800ac04:	4605      	mov	r5, r0
 800ac06:	6818      	ldr	r0, [r3, #0]
 800ac08:	460c      	mov	r4, r1
 800ac0a:	b118      	cbz	r0, 800ac14 <__swsetup_r+0x14>
 800ac0c:	6a03      	ldr	r3, [r0, #32]
 800ac0e:	b90b      	cbnz	r3, 800ac14 <__swsetup_r+0x14>
 800ac10:	f7fc fca4 	bl	800755c <__sinit>
 800ac14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac18:	0719      	lsls	r1, r3, #28
 800ac1a:	d422      	bmi.n	800ac62 <__swsetup_r+0x62>
 800ac1c:	06da      	lsls	r2, r3, #27
 800ac1e:	d407      	bmi.n	800ac30 <__swsetup_r+0x30>
 800ac20:	2209      	movs	r2, #9
 800ac22:	602a      	str	r2, [r5, #0]
 800ac24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2e:	e033      	b.n	800ac98 <__swsetup_r+0x98>
 800ac30:	0758      	lsls	r0, r3, #29
 800ac32:	d512      	bpl.n	800ac5a <__swsetup_r+0x5a>
 800ac34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac36:	b141      	cbz	r1, 800ac4a <__swsetup_r+0x4a>
 800ac38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac3c:	4299      	cmp	r1, r3
 800ac3e:	d002      	beq.n	800ac46 <__swsetup_r+0x46>
 800ac40:	4628      	mov	r0, r5
 800ac42:	f7fd fbf9 	bl	8008438 <_free_r>
 800ac46:	2300      	movs	r3, #0
 800ac48:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac50:	81a3      	strh	r3, [r4, #12]
 800ac52:	2300      	movs	r3, #0
 800ac54:	6063      	str	r3, [r4, #4]
 800ac56:	6923      	ldr	r3, [r4, #16]
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f043 0308 	orr.w	r3, r3, #8
 800ac60:	81a3      	strh	r3, [r4, #12]
 800ac62:	6923      	ldr	r3, [r4, #16]
 800ac64:	b94b      	cbnz	r3, 800ac7a <__swsetup_r+0x7a>
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac70:	d003      	beq.n	800ac7a <__swsetup_r+0x7a>
 800ac72:	4621      	mov	r1, r4
 800ac74:	4628      	mov	r0, r5
 800ac76:	f000 f883 	bl	800ad80 <__smakebuf_r>
 800ac7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac7e:	f013 0201 	ands.w	r2, r3, #1
 800ac82:	d00a      	beq.n	800ac9a <__swsetup_r+0x9a>
 800ac84:	2200      	movs	r2, #0
 800ac86:	60a2      	str	r2, [r4, #8]
 800ac88:	6962      	ldr	r2, [r4, #20]
 800ac8a:	4252      	negs	r2, r2
 800ac8c:	61a2      	str	r2, [r4, #24]
 800ac8e:	6922      	ldr	r2, [r4, #16]
 800ac90:	b942      	cbnz	r2, 800aca4 <__swsetup_r+0xa4>
 800ac92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac96:	d1c5      	bne.n	800ac24 <__swsetup_r+0x24>
 800ac98:	bd38      	pop	{r3, r4, r5, pc}
 800ac9a:	0799      	lsls	r1, r3, #30
 800ac9c:	bf58      	it	pl
 800ac9e:	6962      	ldrpl	r2, [r4, #20]
 800aca0:	60a2      	str	r2, [r4, #8]
 800aca2:	e7f4      	b.n	800ac8e <__swsetup_r+0x8e>
 800aca4:	2000      	movs	r0, #0
 800aca6:	e7f7      	b.n	800ac98 <__swsetup_r+0x98>
 800aca8:	2000d410 	.word	0x2000d410

0800acac <_raise_r>:
 800acac:	291f      	cmp	r1, #31
 800acae:	b538      	push	{r3, r4, r5, lr}
 800acb0:	4605      	mov	r5, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	d904      	bls.n	800acc0 <_raise_r+0x14>
 800acb6:	2316      	movs	r3, #22
 800acb8:	6003      	str	r3, [r0, #0]
 800acba:	f04f 30ff 	mov.w	r0, #4294967295
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800acc2:	b112      	cbz	r2, 800acca <_raise_r+0x1e>
 800acc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acc8:	b94b      	cbnz	r3, 800acde <_raise_r+0x32>
 800acca:	4628      	mov	r0, r5
 800accc:	f000 f830 	bl	800ad30 <_getpid_r>
 800acd0:	4622      	mov	r2, r4
 800acd2:	4601      	mov	r1, r0
 800acd4:	4628      	mov	r0, r5
 800acd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acda:	f000 b817 	b.w	800ad0c <_kill_r>
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d00a      	beq.n	800acf8 <_raise_r+0x4c>
 800ace2:	1c59      	adds	r1, r3, #1
 800ace4:	d103      	bne.n	800acee <_raise_r+0x42>
 800ace6:	2316      	movs	r3, #22
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	2001      	movs	r0, #1
 800acec:	e7e7      	b.n	800acbe <_raise_r+0x12>
 800acee:	2100      	movs	r1, #0
 800acf0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800acf4:	4620      	mov	r0, r4
 800acf6:	4798      	blx	r3
 800acf8:	2000      	movs	r0, #0
 800acfa:	e7e0      	b.n	800acbe <_raise_r+0x12>

0800acfc <raise>:
 800acfc:	4b02      	ldr	r3, [pc, #8]	@ (800ad08 <raise+0xc>)
 800acfe:	4601      	mov	r1, r0
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	f7ff bfd3 	b.w	800acac <_raise_r>
 800ad06:	bf00      	nop
 800ad08:	2000d410 	.word	0x2000d410

0800ad0c <_kill_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d07      	ldr	r5, [pc, #28]	@ (800ad2c <_kill_r+0x20>)
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	4611      	mov	r1, r2
 800ad18:	602b      	str	r3, [r5, #0]
 800ad1a:	f7f8 f853 	bl	8002dc4 <_kill>
 800ad1e:	1c43      	adds	r3, r0, #1
 800ad20:	d102      	bne.n	800ad28 <_kill_r+0x1c>
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	b103      	cbz	r3, 800ad28 <_kill_r+0x1c>
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	bd38      	pop	{r3, r4, r5, pc}
 800ad2a:	bf00      	nop
 800ad2c:	2000da08 	.word	0x2000da08

0800ad30 <_getpid_r>:
 800ad30:	f7f8 b840 	b.w	8002db4 <_getpid>

0800ad34 <__swhatbuf_r>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	460c      	mov	r4, r1
 800ad38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	b096      	sub	sp, #88	@ 0x58
 800ad40:	4615      	mov	r5, r2
 800ad42:	461e      	mov	r6, r3
 800ad44:	da0d      	bge.n	800ad62 <__swhatbuf_r+0x2e>
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad4c:	f04f 0100 	mov.w	r1, #0
 800ad50:	bf14      	ite	ne
 800ad52:	2340      	movne	r3, #64	@ 0x40
 800ad54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad58:	2000      	movs	r0, #0
 800ad5a:	6031      	str	r1, [r6, #0]
 800ad5c:	602b      	str	r3, [r5, #0]
 800ad5e:	b016      	add	sp, #88	@ 0x58
 800ad60:	bd70      	pop	{r4, r5, r6, pc}
 800ad62:	466a      	mov	r2, sp
 800ad64:	f000 f848 	bl	800adf8 <_fstat_r>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	dbec      	blt.n	800ad46 <__swhatbuf_r+0x12>
 800ad6c:	9901      	ldr	r1, [sp, #4]
 800ad6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad76:	4259      	negs	r1, r3
 800ad78:	4159      	adcs	r1, r3
 800ad7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad7e:	e7eb      	b.n	800ad58 <__swhatbuf_r+0x24>

0800ad80 <__smakebuf_r>:
 800ad80:	898b      	ldrh	r3, [r1, #12]
 800ad82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad84:	079d      	lsls	r5, r3, #30
 800ad86:	4606      	mov	r6, r0
 800ad88:	460c      	mov	r4, r1
 800ad8a:	d507      	bpl.n	800ad9c <__smakebuf_r+0x1c>
 800ad8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	6123      	str	r3, [r4, #16]
 800ad94:	2301      	movs	r3, #1
 800ad96:	6163      	str	r3, [r4, #20]
 800ad98:	b003      	add	sp, #12
 800ad9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad9c:	ab01      	add	r3, sp, #4
 800ad9e:	466a      	mov	r2, sp
 800ada0:	f7ff ffc8 	bl	800ad34 <__swhatbuf_r>
 800ada4:	9f00      	ldr	r7, [sp, #0]
 800ada6:	4605      	mov	r5, r0
 800ada8:	4639      	mov	r1, r7
 800adaa:	4630      	mov	r0, r6
 800adac:	f7fd fbb8 	bl	8008520 <_malloc_r>
 800adb0:	b948      	cbnz	r0, 800adc6 <__smakebuf_r+0x46>
 800adb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb6:	059a      	lsls	r2, r3, #22
 800adb8:	d4ee      	bmi.n	800ad98 <__smakebuf_r+0x18>
 800adba:	f023 0303 	bic.w	r3, r3, #3
 800adbe:	f043 0302 	orr.w	r3, r3, #2
 800adc2:	81a3      	strh	r3, [r4, #12]
 800adc4:	e7e2      	b.n	800ad8c <__smakebuf_r+0xc>
 800adc6:	89a3      	ldrh	r3, [r4, #12]
 800adc8:	6020      	str	r0, [r4, #0]
 800adca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	9b01      	ldr	r3, [sp, #4]
 800add2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800add6:	b15b      	cbz	r3, 800adf0 <__smakebuf_r+0x70>
 800add8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800addc:	4630      	mov	r0, r6
 800adde:	f000 f81d 	bl	800ae1c <_isatty_r>
 800ade2:	b128      	cbz	r0, 800adf0 <__smakebuf_r+0x70>
 800ade4:	89a3      	ldrh	r3, [r4, #12]
 800ade6:	f023 0303 	bic.w	r3, r3, #3
 800adea:	f043 0301 	orr.w	r3, r3, #1
 800adee:	81a3      	strh	r3, [r4, #12]
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	431d      	orrs	r5, r3
 800adf4:	81a5      	strh	r5, [r4, #12]
 800adf6:	e7cf      	b.n	800ad98 <__smakebuf_r+0x18>

0800adf8 <_fstat_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d07      	ldr	r5, [pc, #28]	@ (800ae18 <_fstat_r+0x20>)
 800adfc:	2300      	movs	r3, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	4611      	mov	r1, r2
 800ae04:	602b      	str	r3, [r5, #0]
 800ae06:	f7f8 f83d 	bl	8002e84 <_fstat>
 800ae0a:	1c43      	adds	r3, r0, #1
 800ae0c:	d102      	bne.n	800ae14 <_fstat_r+0x1c>
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	b103      	cbz	r3, 800ae14 <_fstat_r+0x1c>
 800ae12:	6023      	str	r3, [r4, #0]
 800ae14:	bd38      	pop	{r3, r4, r5, pc}
 800ae16:	bf00      	nop
 800ae18:	2000da08 	.word	0x2000da08

0800ae1c <_isatty_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d06      	ldr	r5, [pc, #24]	@ (800ae38 <_isatty_r+0x1c>)
 800ae20:	2300      	movs	r3, #0
 800ae22:	4604      	mov	r4, r0
 800ae24:	4608      	mov	r0, r1
 800ae26:	602b      	str	r3, [r5, #0]
 800ae28:	f7f8 f83c 	bl	8002ea4 <_isatty>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d102      	bne.n	800ae36 <_isatty_r+0x1a>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	b103      	cbz	r3, 800ae36 <_isatty_r+0x1a>
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	2000da08 	.word	0x2000da08

0800ae3c <_init>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr

0800ae48 <_fini>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr
